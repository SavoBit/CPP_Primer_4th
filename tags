!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
Account	12/Account.h	/^class Account {$/;"	c
Account::accountType	12/Account.h	/^    static const std::string accountType;$/;"	m	class:Account	access:private
Account::amount	12/Account.h	/^    double amount; $/;"	m	class:Account	access:private
Account::applyint	12/Account.h	/^    void applyint() { amount += amount * interestRate; }$/;"	f	class:Account	access:public	signature:()
Account::balance	12/Account.h	/^    double balance() { return amount; }$/;"	f	class:Account	access:public	signature:()
Account::daily_tbl	12/Account.h	/^    double daily_tbl[period]; \/\/ ok: period is constant expression$/;"	m	class:Account	access:private
Account::interestRate	12/Account.h	/^    static double interestRate;$/;"	m	class:Account	access:private
Account::owner	12/Account.h	/^    std::string owner;$/;"	m	class:Account	access:private
Account::period	12/Account.h	/^    static const int period = 30;  \/\/ interest posted every 30 days$/;"	m	class:Account	access:private
Account::rate	12/Account.h	/^    static double rate() { return interestRate; }$/;"	f	class:Account	access:public	signature:()
Account::rate	12/Account.h	/^void Account::rate(double newRate) $/;"	f	class:Account	signature:(double newRate)
AndQuery	15/Query.h	/^    AndQuery(Query left, Query right): $/;"	f	class:AndQuery	access:private	signature:(Query left, Query right)
AndQuery	15/Query.h	/^class AndQuery: public BinaryQuery {$/;"	c	inherits:BinaryQuery
AndQuery	16/Query.h	/^    AndQuery(Query left, Query right): $/;"	f	class:AndQuery	access:private	signature:(Query left, Query right)
AndQuery	16/Query.h	/^class AndQuery: public BinaryQuery {$/;"	c	inherits:BinaryQuery
AndQuery::AndQuery	15/Query.h	/^    AndQuery(Query left, Query right): $/;"	f	class:AndQuery	access:private	signature:(Query left, Query right)
AndQuery::AndQuery	16/Query.h	/^    AndQuery(Query left, Query right): $/;"	f	class:AndQuery	access:private	signature:(Query left, Query right)
AndQuery::eval	15/Query.cc	/^AndQuery::eval(const TextQuery& file) const$/;"	f	class:AndQuery	signature:(const TextQuery& file) const
AndQuery::eval	16/Query.cc	/^AndQuery::eval(const TextQuery& file) const$/;"	f	class:AndQuery	signature:(const TextQuery& file) const
BASKET_H	15/Basket.h	31;"	d
BASKET_H	15/Basket2.h	31;"	d
BASKET_H	16/Basket.h	31;"	d
BOOK_EXCEPT	17/bookexcept.h	31;"	d
Base	15/scope.cc	/^    Base(): mem(0) { }$/;"	f	struct:Base	access:public	signature:()
Base	15/scope.cc	/^struct Base {$/;"	s	file:
Base	18/dyn_cast.cc	/^struct Base {$/;"	s	file:
Base	18/typeid.cc	/^struct Base {$/;"	s	file:
Base::Base	15/scope.cc	/^    Base(): mem(0) { }$/;"	f	struct:Base	access:public	signature:()
Base::f	18/dyn_cast.cc	/^   virtual void f() {};$/;"	f	struct:Base	access:public	signature:()
Base::mem	15/scope.cc	/^    int mem;$/;"	m	struct:Base	file:	access:protected
Base::~Base	18/dyn_cast.cc	/^   virtual ~Base() {};$/;"	f	struct:Base	access:public	signature:()
Base::~Base	18/typeid.cc	/^    virtual ~Base() { }$/;"	f	struct:Base	access:public	signature:()
Basket	15/Basket.h	/^    Basket(): items(compare) { }  \/\/ initialze the comparator $/;"	f	class:Basket	access:public	signature:()
Basket	15/Basket.h	/^class Basket {$/;"	c
Basket	15/Basket2.h	/^    Basket(): items(compare) { }  \/\/ initialze the comparator$/;"	f	class:Basket	access:public	signature:()
Basket	15/Basket2.h	/^class Basket {$/;"	c
Basket	16/Basket.h	/^class Basket {$/;"	c
Basket::Basket	15/Basket.h	/^    Basket(): items(compare) { }  \/\/ initialze the comparator $/;"	f	class:Basket	access:public	signature:()
Basket::Basket	15/Basket2.h	/^    Basket(): items(compare) { }  \/\/ initialze the comparator$/;"	f	class:Basket	access:public	signature:()
Basket::Comp	15/Basket.h	/^    typedef bool (*Comp)(const Sales_item&, const Sales_item&);$/;"	t	class:Basket	access:private
Basket::Comp	15/Basket2.h	/^    typedef bool (*Comp)(const Sales_item&, const Sales_item&);$/;"	t	class:Basket	access:private
Basket::add_item	15/Basket.h	/^    void add_item(const Sales_item &item) $/;"	f	class:Basket	access:public	signature:(const Sales_item &item)
Basket::add_item	15/Basket2.h	/^    void add_item(const Sales_item &item) $/;"	f	class:Basket	access:public	signature:(const Sales_item &item)
Basket::add_item	16/Basket.h	/^    void add_item(const Sales_item &item) $/;"	f	class:Basket	access:public	signature:(const Sales_item &item)
Basket::const_iter	15/Basket.h	/^    typedef set_type::const_iterator const_iter;$/;"	t	class:Basket	access:public
Basket::const_iter	15/Basket2.h	/^    typedef std::multiset<Sales_item, Comp>::const_iterator const_iter;$/;"	t	class:Basket	access:public
Basket::const_iter	16/Basket.h	/^    typedef std::multiset<Sales_item>::const_iterator const_iter;$/;"	t	class:Basket	access:public
Basket::display	15/Basket.cc	/^void Basket::display(ostream &os) const$/;"	f	class:Basket	signature:(ostream &os) const
Basket::display	15/V2_Basket.cc	/^void Basket::display(ostream &os) const$/;"	f	class:Basket	signature:(ostream &os) const
Basket::display	16/Basket.cc	/^void Basket::display(ostream &os) const$/;"	f	class:Basket	signature:(ostream &os) const
Basket::item_count	16/Basket.h	/^    size_type item_count(const Sales_item &i) const$/;"	f	class:Basket	access:public	signature:(const Sales_item &i) const
Basket::items	15/Basket.h	/^    std::multiset<Sales_item, Comp> items;$/;"	m	class:Basket	access:private
Basket::items	15/Basket2.h	/^    std::multiset<Sales_item, Comp> items;$/;"	m	class:Basket	access:private
Basket::items	16/Basket.h	/^    std::multiset<Sales_item> items;$/;"	m	class:Basket	access:private
Basket::set_type	15/Basket.h	/^    typedef std::multiset<Sales_item, Comp> set_type;$/;"	t	class:Basket	access:public
Basket::size	15/Basket.h	/^    size_type size(const Sales_item &i) const$/;"	f	class:Basket	access:public	signature:(const Sales_item &i) const
Basket::size	15/Basket2.h	/^    size_type size(const Sales_item &i) const$/;"	f	class:Basket	access:public	signature:(const Sales_item &i) const
Basket::size_type	15/Basket.h	/^    typedef set_type::size_type size_type;$/;"	t	class:Basket	access:public
Basket::size_type	15/Basket2.h	/^    typedef std::multiset<Sales_item, Comp>::size_type size_type;$/;"	t	class:Basket	access:public
Basket::size_type	16/Basket.h	/^    typedef std::multiset<Sales_item>::size_type size_type;$/;"	t	class:Basket	access:public
Basket::total	15/Basket.cc	/^double Basket::total() const$/;"	f	class:Basket	signature:() const
Basket::total	15/V2_Basket.cc	/^double Basket::total() const$/;"	f	class:Basket	signature:() const
Basket::total	16/Basket.cc	/^double Basket::total() const$/;"	f	class:Basket	signature:() const
Bear	17/Animal.h	/^    Bear(std::string name, bool onExhibit=true, $/;"	f	class:Bear	access:public	signature:(std::string name, bool onExhibit=true, std::string family = Ó)
Bear	17/Animal.h	/^class Bear : public ZooAnimal {$/;"	c	inherits:ZooAnimal
Bear	17/nopandaprint.h	/^    Bear(std::string name, bool onExhibit=true, $/;"	f	class:Bear	access:public	signature:(std::string name, bool onExhibit=true, std::string family = Ó)
Bear	17/nopandaprint.h	/^class Bear : public ZooAnimal {$/;"	c	inherits:ZooAnimal
Bear	17/virt.h	/^    Bear() : dance_flag(two_left_feet) { }$/;"	f	class:Bear	access:protected	signature:()
Bear	17/virt.h	/^Bear::Bear(std::string name, bool onExhibit):$/;"	f	class:Bear	signature:(std::string name, bool onExhibit)
Bear	17/virt.h	/^class Bear : virtual public ZooAnimal {$/;"	c	inherits:ZooAnimal
Bear::Bear	17/Animal.h	/^    Bear(std::string name, bool onExhibit=true, $/;"	f	class:Bear	access:public	signature:(std::string name, bool onExhibit=true, std::string family = Ó)
Bear::Bear	17/nopandaprint.h	/^    Bear(std::string name, bool onExhibit=true, $/;"	f	class:Bear	access:public	signature:(std::string name, bool onExhibit=true, std::string family = Ó)
Bear::Bear	17/virt.h	/^    Bear() : dance_flag(two_left_feet) { }$/;"	f	class:Bear	access:protected	signature:()
Bear::Bear	17/virt.h	/^Bear::Bear(std::string name, bool onExhibit):$/;"	f	class:Bear	signature:(std::string name, bool onExhibit)
Bear::DanceType	17/Animal.h	/^enum DanceType { two_left_feet, macarena, fandango, waltz };$/;"	g	class:Bear	access:private
Bear::DanceType	17/nopandaprint.h	/^enum DanceType { two_left_feet, macarena, fandango, waltz };$/;"	g	class:Bear	access:private
Bear::DanceType	17/virt.h	/^    enum DanceType { two_left_feet, macarena, fandango };$/;"	g	class:Bear	access:public
Bear::dance_flag	17/virt.h	/^    DanceType dance_flag;$/;"	m	class:Bear	access:private
Bear::dancetype	17/Animal.h	/^    DanceType   dancetype;$/;"	m	class:Bear	access:private
Bear::dancetype	17/nopandaprint.h	/^    DanceType   dancetype;$/;"	m	class:Bear	access:private
Bear::fandango	17/Animal.h	/^enum DanceType { two_left_feet, macarena, fandango, waltz };$/;"	e	enum:Bear::DanceType
Bear::fandango	17/nopandaprint.h	/^enum DanceType { two_left_feet, macarena, fandango, waltz };$/;"	e	enum:Bear::DanceType
Bear::fandango	17/virt.h	/^    enum DanceType { two_left_feet, macarena, fandango };$/;"	e	enum:Bear::DanceType
Bear::ival	17/Animal.h	/^    int         ival;$/;"	m	class:Bear	access:private
Bear::ival	17/nopandaprint.h	/^    int         ival;$/;"	m	class:Bear	access:private
Bear::ival	17/virt.h	/^    int    ival;$/;"	m	class:Bear	access:private
Bear::macarena	17/Animal.h	/^enum DanceType { two_left_feet, macarena, fandango, waltz };$/;"	e	enum:Bear::DanceType
Bear::macarena	17/nopandaprint.h	/^enum DanceType { two_left_feet, macarena, fandango, waltz };$/;"	e	enum:Bear::DanceType
Bear::macarena	17/virt.h	/^    enum DanceType { two_left_feet, macarena, fandango };$/;"	e	enum:Bear::DanceType
Bear::name	17/virt.h	/^    std::string name;$/;"	m	class:Bear	access:private
Bear::two_left_feet	17/Animal.h	/^enum DanceType { two_left_feet, macarena, fandango, waltz };$/;"	e	enum:Bear::DanceType
Bear::two_left_feet	17/nopandaprint.h	/^enum DanceType { two_left_feet, macarena, fandango, waltz };$/;"	e	enum:Bear::DanceType
Bear::two_left_feet	17/virt.h	/^    enum DanceType { two_left_feet, macarena, fandango };$/;"	e	enum:Bear::DanceType
Bear::waltz	17/Animal.h	/^enum DanceType { two_left_feet, macarena, fandango, waltz };$/;"	e	enum:Bear::DanceType
Bear::waltz	17/nopandaprint.h	/^enum DanceType { two_left_feet, macarena, fandango, waltz };$/;"	e	enum:Bear::DanceType
BinaryQuery	15/Query.h	/^    BinaryQuery(Query left, Query right, std::string op): $/;"	f	class:BinaryQuery	access:protected	signature:(Query left, Query right, std::string op)
BinaryQuery	15/Query.h	/^class BinaryQuery: public Query_base {$/;"	c	inherits:Query_base
BinaryQuery	16/Query.h	/^    BinaryQuery(Query left, Query right, std::string op): $/;"	f	class:BinaryQuery	access:protected	signature:(Query left, Query right, std::string op)
BinaryQuery	16/Query.h	/^class BinaryQuery: public Query_base {$/;"	c	inherits:Query_base
BinaryQuery::BinaryQuery	15/Query.h	/^    BinaryQuery(Query left, Query right, std::string op): $/;"	f	class:BinaryQuery	access:protected	signature:(Query left, Query right, std::string op)
BinaryQuery::BinaryQuery	16/Query.h	/^    BinaryQuery(Query left, Query right, std::string op): $/;"	f	class:BinaryQuery	access:protected	signature:(Query left, Query right, std::string op)
BinaryQuery::display	15/Query.h	/^    std::ostream& display(std::ostream &os) const$/;"	f	class:BinaryQuery	access:protected	signature:(std::ostream &os) const
BinaryQuery::display	16/Query.h	/^    std::ostream& display(std::ostream &os) const$/;"	f	class:BinaryQuery	access:protected	signature:(std::ostream &os) const
BinaryQuery::lhs	15/Query.h	/^    const Query lhs, rhs;   \/\/ right- and left-hand operands$/;"	m	class:BinaryQuery	access:protected
BinaryQuery::lhs	16/Query.h	/^    Query lhs, rhs;   \/\/ right and left hand operands$/;"	m	class:BinaryQuery	access:protected
BinaryQuery::oper	15/Query.h	/^    const std::string oper; \/\/ name of the operator$/;"	m	class:BinaryQuery	access:protected
BinaryQuery::oper	16/Query.h	/^    std::string oper; \/\/ name of the operator$/;"	m	class:BinaryQuery	access:protected
BinaryQuery::rhs	15/Query.h	/^    const Query lhs, rhs;   \/\/ right- and left-hand operands$/;"	m	class:BinaryQuery	access:protected
BinaryQuery::rhs	16/Query.h	/^    Query lhs, rhs;   \/\/ right and left hand operands$/;"	m	class:BinaryQuery	access:protected
Bulk_item	15/Basket.h	/^    Bulk_item(): min_qty(0), discount(0.0) { }$/;"	f	class:Bulk_item	access:public	signature:()
Bulk_item	15/Basket.h	/^    Bulk_item(const std::string& book, double sales_price, $/;"	f	class:Bulk_item	access:public	signature:(const std::string& book, double sales_price, std::size_t qty = 0, double disc_rate = 0.0)
Bulk_item	15/Basket.h	/^class Bulk_item : public Item_base {$/;"	c	inherits:Item_base
Bulk_item	15/Basket2.h	/^    Bulk_item(const std::string& book = "", $/;"	f	class:Bulk_item	access:public	signature:(const std::string& book = Ó, double sales_price = 0.0, std::size_t qty = 0, double disc_rate = 0.0)
Bulk_item	15/Basket2.h	/^class Bulk_item : public Disc_item {$/;"	c	inherits:Disc_item
Bulk_item	16/Basket.h	/^    Bulk_item(): min_qty(0), discount(0.0) { }$/;"	f	class:Bulk_item	access:public	signature:()
Bulk_item	16/Basket.h	/^    Bulk_item(const std::string& book, double sales_price, $/;"	f	class:Bulk_item	access:public	signature:(const std::string& book, double sales_price, std::size_t qty = 0, double disc_rate = 0.0)
Bulk_item	16/Basket.h	/^class Bulk_item : public Item_base {$/;"	c	inherits:Item_base
Bulk_item::Bulk_item	15/Basket.h	/^    Bulk_item(): min_qty(0), discount(0.0) { }$/;"	f	class:Bulk_item	access:public	signature:()
Bulk_item::Bulk_item	15/Basket.h	/^    Bulk_item(const std::string& book, double sales_price, $/;"	f	class:Bulk_item	access:public	signature:(const std::string& book, double sales_price, std::size_t qty = 0, double disc_rate = 0.0)
Bulk_item::Bulk_item	15/Basket2.h	/^    Bulk_item(const std::string& book = "", $/;"	f	class:Bulk_item	access:public	signature:(const std::string& book = Ó, double sales_price = 0.0, std::size_t qty = 0, double disc_rate = 0.0)
Bulk_item::Bulk_item	16/Basket.h	/^    Bulk_item(): min_qty(0), discount(0.0) { }$/;"	f	class:Bulk_item	access:public	signature:()
Bulk_item::Bulk_item	16/Basket.h	/^    Bulk_item(const std::string& book, double sales_price, $/;"	f	class:Bulk_item	access:public	signature:(const std::string& book, double sales_price, std::size_t qty = 0, double disc_rate = 0.0)
Bulk_item::clone	15/Basket.h	/^    Bulk_item* clone() const $/;"	f	class:Bulk_item	access:public	signature:() const
Bulk_item::clone	15/Basket2.h	/^    Bulk_item* clone() const $/;"	f	class:Bulk_item	access:public	signature:() const
Bulk_item::clone	16/Basket.h	/^    Bulk_item* clone() const $/;"	f	class:Bulk_item	access:public	signature:() const
Bulk_item::discount	15/Basket.h	/^    double discount;       \/\/ fractional discount to apply$/;"	m	class:Bulk_item	access:private
Bulk_item::discount	16/Basket.h	/^    double discount;       \/\/ fractional discount to apply$/;"	m	class:Bulk_item	access:private
Bulk_item::discount_policy	15/Basket.h	/^    std::pair<size_t, double> discount_policy() const$/;"	f	class:Bulk_item	access:public	signature:() const
Bulk_item::discount_policy	15/Basket2.h	/^    std::pair<size_t, double> discount_policy() const$/;"	f	class:Bulk_item	access:public	signature:() const
Bulk_item::discount_policy	16/Basket.h	/^    std::pair<size_t, double> discount_policy() const$/;"	f	class:Bulk_item	access:public	signature:() const
Bulk_item::min_qty	15/Basket.h	/^    std::size_t min_qty;   \/\/ minimum purchase for discount to apply$/;"	m	class:Bulk_item	access:private
Bulk_item::min_qty	16/Basket.h	/^    std::size_t min_qty;   \/\/ minimum purchase for discount to apply$/;"	m	class:Bulk_item	access:private
Bulk_item::net_price	15/Basket.cc	/^double Bulk_item::net_price(size_t cnt) const$/;"	f	class:Bulk_item	signature:(size_t cnt) const
Bulk_item::net_price	15/V2_Basket.cc	/^double Bulk_item::net_price(size_t cnt) const$/;"	f	class:Bulk_item	signature:(size_t cnt) const
Bulk_item::net_price	16/Basket.cc	/^double Bulk_item::net_price(size_t cnt) const$/;"	f	class:Bulk_item	signature:(size_t cnt) const
CACHED_OBJ_H	18/CachedObj.h	31;"	d
CachedObj	18/CachedObj.h	/^template <class T> class CachedObj {$/;"	c
CachedObj::alloc_mem	18/CachedObj.h	/^    static std::allocator<T> alloc_mem;$/;"	m	class:CachedObj	access:private
CachedObj::chunk	18/CachedObj.h	/^    static const std::size_t chunk;$/;"	m	class:CachedObj	access:private
CachedObj::freeStore	18/CachedObj.h	/^    static T *freeStore;$/;"	m	class:CachedObj	access:private
CachedObj::next	18/CachedObj.h	/^    T *next;$/;"	m	class:CachedObj	access:protected
CachedObj::~CachedObj	18/CachedObj.h	/^    virtual ~CachedObj() { }$/;"	f	class:CachedObj	access:public	signature:()
CheckedPtr	14/CheckedPtr.h	/^    CheckedPtr(int *b, int *e): beg(b), end(e), curr(b) { }$/;"	f	class:CheckedPtr	access:public	signature:(int *b, int *e)
CheckedPtr	14/CheckedPtr.h	/^class CheckedPtr {$/;"	c
CheckedPtr::CheckedPtr	14/CheckedPtr.h	/^    CheckedPtr(int *b, int *e): beg(b), end(e), curr(b) { }$/;"	f	class:CheckedPtr	access:public	signature:(int *b, int *e)
CheckedPtr::beg	14/CheckedPtr.h	/^    int* beg;    \/\/ pointer to beginning of the array$/;"	m	class:CheckedPtr	access:private
CheckedPtr::curr	14/CheckedPtr.h	/^    int* curr;   \/\/ current position within the array$/;"	m	class:CheckedPtr	access:private
CheckedPtr::end	14/CheckedPtr.h	/^    int* end;    \/\/ one past the end of the array$/;"	m	class:CheckedPtr	access:private
CheckedPtr::operator *	14/CheckedPtr.cc	/^const int& CheckedPtr::operator*() const$/;"	f	class:CheckedPtr	signature:() const
CheckedPtr::operator *	14/CheckedPtr.cc	/^int& CheckedPtr::operator*() $/;"	f	class:CheckedPtr	signature:()
CheckedPtr::operator ++	14/CheckedPtr.cc	/^CheckedPtr CheckedPtr::operator++(int)$/;"	f	class:CheckedPtr	signature:(int)
CheckedPtr::operator ++	14/CheckedPtr.cc	/^CheckedPtr& CheckedPtr::operator++()$/;"	f	class:CheckedPtr	signature:()
CheckedPtr::operator --	14/CheckedPtr.cc	/^CheckedPtr CheckedPtr::operator--(int)$/;"	f	class:CheckedPtr	signature:(int)
CheckedPtr::operator --	14/CheckedPtr.cc	/^CheckedPtr& CheckedPtr::operator--()$/;"	f	class:CheckedPtr	signature:()
Comp	15/Basket.h	/^    typedef bool (*Comp)(const Sales_item&, const Sales_item&);$/;"	t	class:Basket	access:private
Comp	15/Basket2.h	/^    typedef bool (*Comp)(const Sales_item&, const Sales_item&);$/;"	t	class:Basket	access:private
DIRS	makefile	/^DIRS = 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18$/;"	m
DanceType	17/Animal.h	/^enum DanceType { two_left_feet, macarena, fandango, waltz };$/;"	g	class:Bear	access:private
DanceType	17/nopandaprint.h	/^enum DanceType { two_left_feet, macarena, fandango, waltz };$/;"	g	class:Bear	access:private
DanceType	17/virt.h	/^    enum DanceType { two_left_feet, macarena, fandango };$/;"	g	class:Bear	access:public
Derived	15/scope.cc	/^    Derived(int i): mem(i) { }     \/\/ initializes Derived::mem$/;"	f	struct:Derived	access:public	signature:(int i)
Derived	15/scope.cc	/^struct Derived : Base {$/;"	s	file:	inherits:Base
Derived	18/dyn_cast.cc	/^struct Derived: public Base { };$/;"	s	file:	inherits:Base
Derived	18/typeid.cc	/^struct Derived : Base { };$/;"	s	file:	inherits:Base
Derived::Derived	15/scope.cc	/^    Derived(int i): mem(i) { }     \/\/ initializes Derived::mem$/;"	f	struct:Derived	access:public	signature:(int i)
Derived::get_base_mem	15/scope.cc	/^    int get_base_mem() { return Base::mem; }$/;"	f	struct:Derived	access:public	signature:()
Derived::get_mem	15/scope.cc	/^    int get_mem() { return mem; }  \/\/ returns Derived::mem$/;"	f	struct:Derived	access:public	signature:()
Derived::mem	15/scope.cc	/^    int mem;   \/\/ hides mem in the base$/;"	m	struct:Derived	file:	access:protected
Disc_item	15/Basket2.h	/^    Disc_item(const std::string& book = "", $/;"	f	class:Disc_item	access:public	signature:(const std::string& book = Ó, double sales_price = 0.0, std::size_t qty = 0, double disc_rate = 0.0)
Disc_item	15/Basket2.h	/^class Disc_item : public Item_base {$/;"	c	inherits:Item_base
Disc_item::Disc_item	15/Basket2.h	/^    Disc_item(const std::string& book = "", $/;"	f	class:Disc_item	access:public	signature:(const std::string& book = Ó, double sales_price = 0.0, std::size_t qty = 0, double disc_rate = 0.0)
Disc_item::discount	15/Basket2.h	/^    double discount;       \/\/ fractional discount to apply$/;"	m	class:Disc_item	access:protected
Disc_item::discount_policy	15/Basket2.h	/^    std::pair<size_t, double> discount_policy() const$/;"	f	class:Disc_item	access:public	signature:() const
Disc_item::quantity	15/Basket2.h	/^    std::size_t quantity;  \/\/ purchase size for discount to apply$/;"	m	class:Disc_item	access:protected
EQ	14/count-size.cc	/^    EQ(size_t val = 0): bound(val) { }$/;"	f	class:EQ	access:public	signature:(size_t val = 0)
EQ	14/count-size.cc	/^class EQ {$/;"	c	file:
EQ::EQ	14/count-size.cc	/^    EQ(size_t val = 0): bound(val) { }$/;"	f	class:EQ	access:public	signature:(size_t val = 0)
EQ::bound	14/count-size.cc	/^    size_t bound;$/;"	m	class:EQ	file:	access:private
EQ::operator ()	14/count-size.cc	/^    bool operator()(const string &s) { return s.size() == bound; }$/;"	f	class:EQ	access:public	signature:(const string &s)
Endangered	17/Animal.h	/^class Endangered {$/;"	c
Endangered	17/nopandaprint.h	/^    Endangered(Status stat): animal_status(stat) { }$/;"	f	class:Endangered	access:public	signature:(Status stat)
Endangered	17/nopandaprint.h	/^class Endangered {$/;"	c
Endangered	17/virt.h	/^    Endangered(Status stat): animal_status(stat) { }$/;"	f	class:Endangered	access:public	signature:(Status stat)
Endangered	17/virt.h	/^class Endangered {$/;"	c
Endangered::Endangered	17/nopandaprint.h	/^    Endangered(Status stat): animal_status(stat) { }$/;"	f	class:Endangered	access:public	signature:(Status stat)
Endangered::Endangered	17/virt.h	/^    Endangered(Status stat): animal_status(stat) { }$/;"	f	class:Endangered	access:public	signature:(Status stat)
Endangered::Status	17/nopandaprint.h	/^    enum Status { critical, environment, improving };$/;"	g	class:Endangered	access:public
Endangered::Status	17/virt.h	/^    enum Status { critical, environment, improving };$/;"	g	class:Endangered	access:public
Endangered::animal_status	17/nopandaprint.h	/^    Status animal_status;$/;"	m	class:Endangered	access:private
Endangered::animal_status	17/virt.h	/^    Status animal_status;$/;"	m	class:Endangered	access:private
Endangered::critical	17/nopandaprint.h	/^    enum Status { critical, environment, improving };$/;"	e	enum:Endangered::Status
Endangered::critical	17/virt.h	/^    enum Status { critical, environment, improving };$/;"	e	enum:Endangered::Status
Endangered::environment	17/nopandaprint.h	/^    enum Status { critical, environment, improving };$/;"	e	enum:Endangered::Status
Endangered::environment	17/virt.h	/^    enum Status { critical, environment, improving };$/;"	e	enum:Endangered::Status
Endangered::improving	17/nopandaprint.h	/^    enum Status { critical, environment, improving };$/;"	e	enum:Endangered::Status
Endangered::improving	17/virt.h	/^    enum Status { critical, environment, improving };$/;"	e	enum:Endangered::Status
Fail	7/conv-enums.cc	/^enum Stat {Fail, Pass};$/;"	e	enum:Stat	file:
Folder	13/Folder.cc	/^Folder::Folder(const Folder &f)$/;"	f	class:Folder	signature:(const Folder &f)
Folder	13/Folder.h	/^    Folder() { } \/\/ defaults ok$/;"	f	class:Folder	access:public	signature:()
Folder	13/Folder.h	/^class Folder {$/;"	c
Folder::Folder	13/Folder.cc	/^Folder::Folder(const Folder &f)$/;"	f	class:Folder	signature:(const Folder &f)
Folder::Folder	13/Folder.h	/^    Folder() { } \/\/ defaults ok$/;"	f	class:Folder	access:public	signature:()
Folder::Msg_iter	13/Folder.h	/^    typedef std::set<Message*>::const_iterator Msg_iter;$/;"	t	class:Folder	access:private
Folder::addMsg	13/Folder.h	/^    void addMsg(Message *m) { msgs.insert(m); }$/;"	f	class:Folder	access:private	signature:(Message *m)
Folder::copy_msgs	13/Folder.cc	/^void Folder::copy_msgs(const set<Message*> &m)$/;"	f	class:Folder	signature:(const set<Message*> &m)
Folder::debug_print	13/Folder.cc	/^void Folder::debug_print()$/;"	f	class:Folder	signature:()
Folder::empty_msgs	13/Folder.cc	/^void Folder::empty_msgs()$/;"	f	class:Folder	signature:()
Folder::messages	13/Folder.cc	/^vector<Message*> Folder::messages()$/;"	f	class:Folder	signature:()
Folder::msgs	13/Folder.h	/^    std::set<Message*> msgs;  \/\/ messages in this folder$/;"	m	class:Folder	access:private
Folder::operator =	13/Folder.cc	/^Folder& Folder::operator=(const Folder &f)$/;"	f	class:Folder	signature:(const Folder &f)
Folder::remMsg	13/Folder.h	/^    void remMsg(Message *m) { msgs.erase(m); }$/;"	f	class:Folder	access:private	signature:(Message *m)
Folder::remove	13/Folder.cc	/^void Folder::remove(Message &m)$/;"	f	class:Folder	signature:(Message &m)
Folder::save	13/Folder.cc	/^void Folder::save(Message &m)$/;"	f	class:Folder	signature:(Message &m)
Folder::~Folder	13/Folder.cc	/^Folder::~Folder()$/;"	f	class:Folder	signature:()
Foo	14/subscript.cc	/^Foo(): data(100) { for (int i = 0; i != 100; ++i) data[i] = i; }$/;"	f	class:Foo	access:public	signature:()
Foo	14/subscript.cc	/^class Foo {$/;"	c	file:
Foo::Foo	14/subscript.cc	/^Foo(): data(100) { for (int i = 0; i != 100; ++i) data[i] = i; }$/;"	f	class:Foo	access:public	signature:()
Foo::data	14/subscript.cc	/^    vector<int> data;$/;"	m	class:Foo	file:	access:private
Foo::operator []	14/subscript.cc	/^const int& Foo::operator[](const size_t index) const$/;"	f	class:Foo	signature:(const size_t index) const
Foo::operator []	14/subscript.cc	/^int& Foo::operator[](const size_t index)$/;"	f	class:Foo	signature:(const size_t index)
GT6	11/count-size.cc	/^bool GT6(const string &s) $/;"	f	signature:(const string &s)
GT6	11/vocab.cc	/^bool GT6(const string &s)$/;"	f	signature:(const string &s)
GT_cls	14/count-size.cc	/^    GT_cls(size_t val = 0): bound(val) { }$/;"	f	class:GT_cls	access:public	signature:(size_t val = 0)
GT_cls	14/count-size.cc	/^class GT_cls {$/;"	c	file:
GT_cls::GT_cls	14/count-size.cc	/^    GT_cls(size_t val = 0): bound(val) { }$/;"	f	class:GT_cls	access:public	signature:(size_t val = 0)
GT_cls::bound	14/count-size.cc	/^    std::string::size_type bound;$/;"	m	class:GT_cls	file:	access:private
GT_cls::operator ()	14/count-size.cc	/^    bool operator()(const string &s) $/;"	f	class:GT_cls	access:public	signature:(const string &s)
Handle	16/Handle.h	/^    Handle(T *p = 0): ptr(p), use(new size_t(1)) { }$/;"	f	class:Handle	access:public	signature:(T *p = 0)
Handle	16/Handle.h	/^    Handle(const Handle& h): ptr(h.ptr), use(h.use) $/;"	f	class:Handle	access:public	signature:(const Handle& h)
Handle	16/Handle.h	/^template <class T> class Handle {$/;"	c
Handle	17/Handle.h	/^    Handle(const Handle& h): ptr(h.ptr), use(h.use) { ++*use; }$/;"	f	class:Handle	access:public	signature:(const Handle& h)
Handle	17/Handle.h	/^template <class T> Handle<T>::Handle(T *p)$/;"	f	class:Handle	signature:(T *p)
Handle	17/Handle.h	/^template <class T> class Handle {$/;"	c
Handle	17/MS_Handle.h	/^    Handle(T *p = 0) try : ptr(p), use(new size_t(1)) { $/;"	f	class:Handle	access:public	signature:(T *p = 0)
Handle	17/MS_Handle.h	/^    Handle(const Handle& h): ptr(h.ptr), use(h.use) { ++*use; }$/;"	f	class:Handle	access:public	signature:(const Handle& h)
Handle	17/MS_Handle.h	/^template <class T> class Handle {$/;"	c
Handle::Handle	16/Handle.h	/^    Handle(T *p = 0): ptr(p), use(new size_t(1)) { }$/;"	f	class:Handle	access:public	signature:(T *p = 0)
Handle::Handle	16/Handle.h	/^    Handle(const Handle& h): ptr(h.ptr), use(h.use) $/;"	f	class:Handle	access:public	signature:(const Handle& h)
Handle::Handle	17/Handle.h	/^    Handle(const Handle& h): ptr(h.ptr), use(h.use) { ++*use; }$/;"	f	class:Handle	access:public	signature:(const Handle& h)
Handle::Handle	17/Handle.h	/^template <class T> Handle<T>::Handle(T *p)$/;"	f	class:Handle	signature:(T *p)
Handle::Handle	17/MS_Handle.h	/^    Handle(T *p = 0) try : ptr(p), use(new size_t(1)) { $/;"	f	class:Handle	access:public	signature:(T *p = 0)
Handle::Handle	17/MS_Handle.h	/^    Handle(const Handle& h): ptr(h.ptr), use(h.use) { ++*use; }$/;"	f	class:Handle	access:public	signature:(const Handle& h)
Handle::operator *	16/Handle.h	/^const T& Handle<T>::operator*() const$/;"	f	class:Handle	signature:() const
Handle::operator *	16/Handle.h	/^template <class T> inline T& Handle<T>::operator*() $/;"	f	class:Handle	signature:()
Handle::operator *	17/Handle.h	/^const T& Handle<T>::operator*() const$/;"	f	class:Handle	signature:() const
Handle::operator *	17/Handle.h	/^template <class T> inline T& Handle<T>::operator*() $/;"	f	class:Handle	signature:()
Handle::operator *	17/MS_Handle.h	/^const T& Handle<T>::operator*() const$/;"	f	class:Handle	signature:() const
Handle::operator *	17/MS_Handle.h	/^template <class T> inline T& Handle<T>::operator*() $/;"	f	class:Handle	signature:()
Handle::operator ->	16/Handle.h	/^const T* Handle<T>::operator->() const$/;"	f	class:Handle	signature:() const
Handle::operator ->	16/Handle.h	/^template <class T> inline T* Handle<T>::operator->() $/;"	f	class:Handle	signature:()
Handle::operator ->	17/Handle.h	/^const T* Handle<T>::operator->() const$/;"	f	class:Handle	signature:() const
Handle::operator ->	17/Handle.h	/^template <class T> inline T* Handle<T>::operator->() $/;"	f	class:Handle	signature:()
Handle::operator ->	17/MS_Handle.h	/^const T* Handle<T>::operator->() const$/;"	f	class:Handle	signature:() const
Handle::operator ->	17/MS_Handle.h	/^template <class T> inline T* Handle<T>::operator->() $/;"	f	class:Handle	signature:()
Handle::operator =	16/Handle.h	/^inline Handle<T>& Handle<T>::operator=(const Handle &rhs)$/;"	f	class:Handle	signature:(const Handle &rhs)
Handle::operator =	17/Handle.h	/^Handle<T>& Handle<T>::operator=(const Handle &rhs)$/;"	f	class:Handle	signature:(const Handle &rhs)
Handle::operator =	17/MS_Handle.h	/^Handle<T>& Handle<T>::operator=(const Handle &rhs)$/;"	f	class:Handle	signature:(const Handle &rhs)
Handle::ptr	16/Handle.h	/^    T* ptr;          \/\/ shared object$/;"	m	class:Handle	access:private
Handle::ptr	17/Handle.h	/^    T* ptr;$/;"	m	class:Handle	access:private
Handle::ptr	17/MS_Handle.h	/^    T* ptr;$/;"	m	class:Handle	access:private
Handle::rem_ref	16/Handle.h	/^    void rem_ref() $/;"	f	class:Handle	access:private	signature:()
Handle::rem_ref	17/Handle.h	/^    void rem_ref() { if (--*use == 0) {delete ptr; delete use;} }$/;"	f	class:Handle	access:private	signature:()
Handle::rem_ref	17/MS_Handle.h	/^    void rem_ref() { if (--*use == 0) {delete ptr; delete use;} }$/;"	f	class:Handle	access:private	signature:()
Handle::use	16/Handle.h	/^    size_t *use;     \/\/ count of how many Handles point to *ptr$/;"	m	class:Handle	access:private
Handle::use	17/Handle.h	/^    size_t *use;$/;"	m	class:Handle	access:private
Handle::use	17/MS_Handle.h	/^    size_t *use;$/;"	m	class:Handle	access:private
Handle::~Handle	16/Handle.h	/^    ~Handle() { rem_ref(); }$/;"	f	class:Handle	access:public	signature:()
Handle::~Handle	17/Handle.h	/^    ~Handle() { rem_ref(); }$/;"	f	class:Handle	access:public	signature:()
Handle::~Handle	17/MS_Handle.h	/^    ~Handle() { rem_ref(); }$/;"	f	class:Handle	access:public	signature:()
HasPtr	13/plain-ptr.cc	/^    HasPtr(int *p, int i): ptr(p), val(i) { }$/;"	f	class:HasPtr	access:public	signature:(int *p, int i)
HasPtr	13/plain-ptr.cc	/^class HasPtr {$/;"	c	file:
HasPtr	13/smart-ptr.cc	/^    HasPtr(const HasPtr &orig):$/;"	f	class:HasPtr	access:public	signature:(const HasPtr &orig)
HasPtr	13/smart-ptr.cc	/^    HasPtr(int *p, int i): ptr(new U_Ptr(p)), val(i) { }$/;"	f	class:HasPtr	access:public	signature:(int *p, int i)
HasPtr	13/smart-ptr.cc	/^class HasPtr {$/;"	c	file:
HasPtr	13/value-ptr.cc	/^    HasPtr(const HasPtr &orig):$/;"	f	class:HasPtr	access:public	signature:(const HasPtr &orig)
HasPtr	13/value-ptr.cc	/^    HasPtr(const int &p, int i): ptr(new int(p)), val(i) {}$/;"	f	class:HasPtr	access:public	signature:(const int &p, int i)
HasPtr	13/value-ptr.cc	/^class HasPtr {$/;"	c	file:
HasPtr::HasPtr	13/plain-ptr.cc	/^    HasPtr(int *p, int i): ptr(p), val(i) { }$/;"	f	class:HasPtr	access:public	signature:(int *p, int i)
HasPtr::HasPtr	13/smart-ptr.cc	/^    HasPtr(const HasPtr &orig):$/;"	f	class:HasPtr	access:public	signature:(const HasPtr &orig)
HasPtr::HasPtr	13/smart-ptr.cc	/^    HasPtr(int *p, int i): ptr(new U_Ptr(p)), val(i) { }$/;"	f	class:HasPtr	access:public	signature:(int *p, int i)
HasPtr::HasPtr	13/value-ptr.cc	/^    HasPtr(const HasPtr &orig):$/;"	f	class:HasPtr	access:public	signature:(const HasPtr &orig)
HasPtr::HasPtr	13/value-ptr.cc	/^    HasPtr(const int &p, int i): ptr(new int(p)), val(i) {}$/;"	f	class:HasPtr	access:public	signature:(const int &p, int i)
HasPtr::get_int	13/plain-ptr.cc	/^    int get_int() const { return val; }$/;"	f	class:HasPtr	access:public	signature:() const
HasPtr::get_int	13/smart-ptr.cc	/^    int get_int() const { return val; }$/;"	f	class:HasPtr	access:public	signature:() const
HasPtr::get_int	13/value-ptr.cc	/^    int get_int() const { return val; }$/;"	f	class:HasPtr	access:public	signature:() const
HasPtr::get_ptr	13/plain-ptr.cc	/^    int *get_ptr() const { return ptr; }     $/;"	f	class:HasPtr	access:public	signature:() const
HasPtr::get_ptr	13/smart-ptr.cc	/^    int *get_ptr() const { return ptr->ip; } $/;"	f	class:HasPtr	access:public	signature:() const
HasPtr::get_ptr	13/value-ptr.cc	/^    int *get_ptr() const { return ptr; } $/;"	f	class:HasPtr	access:public	signature:() const
HasPtr::get_ptr_val	13/plain-ptr.cc	/^    int get_ptr_val() const { return *ptr; } $/;"	f	class:HasPtr	access:public	signature:() const
HasPtr::get_ptr_val	13/smart-ptr.cc	/^    int get_ptr_val() const { return *ptr->ip; } $/;"	f	class:HasPtr	access:public	signature:() const
HasPtr::get_ptr_val	13/value-ptr.cc	/^    int get_ptr_val() const { return *ptr; } $/;"	f	class:HasPtr	access:public	signature:() const
HasPtr::operator =	13/smart-ptr.cc	/^HasPtr& HasPtr::operator=(const HasPtr &rhs)$/;"	f	class:HasPtr	signature:(const HasPtr &rhs)
HasPtr::operator =	13/value-ptr.cc	/^HasPtr& HasPtr::operator=(const HasPtr &rhs)$/;"	f	class:HasPtr	signature:(const HasPtr &rhs)
HasPtr::ptr	13/plain-ptr.cc	/^    int *ptr;$/;"	m	class:HasPtr	file:	access:private
HasPtr::ptr	13/smart-ptr.cc	/^    U_Ptr *ptr;        \/\/ points to use-counted U_Ptr class$/;"	m	class:HasPtr	file:	access:private
HasPtr::ptr	13/value-ptr.cc	/^    int *ptr;        \/\/ points to an int$/;"	m	class:HasPtr	file:	access:private
HasPtr::set_int	13/plain-ptr.cc	/^    void set_int(int i) { val = i; }$/;"	f	class:HasPtr	access:public	signature:(int i)
HasPtr::set_int	13/smart-ptr.cc	/^    void set_int(int i) { val = i; }$/;"	f	class:HasPtr	access:public	signature:(int i)
HasPtr::set_int	13/value-ptr.cc	/^    void set_int(int i)  { val = i; }$/;"	f	class:HasPtr	access:public	signature:(int i)
HasPtr::set_ptr	13/plain-ptr.cc	/^    void set_ptr(int *p) { ptr = p; }$/;"	f	class:HasPtr	access:public	signature:(int *p)
HasPtr::set_ptr	13/smart-ptr.cc	/^    void set_ptr(int *p) { ptr->ip = p; }$/;"	f	class:HasPtr	access:public	signature:(int *p)
HasPtr::set_ptr	13/value-ptr.cc	/^    void set_ptr(int *p) { ptr = p; }$/;"	f	class:HasPtr	access:public	signature:(int *p)
HasPtr::set_ptr_val	13/plain-ptr.cc	/^    void set_ptr_val(int val) const { *ptr = val; }$/;"	f	class:HasPtr	access:public	signature:(int val) const
HasPtr::set_ptr_val	13/smart-ptr.cc	/^    void set_ptr_val(int i) { *ptr->ip = i; }$/;"	f	class:HasPtr	access:public	signature:(int i)
HasPtr::set_ptr_val	13/value-ptr.cc	/^    void set_ptr_val(int p) const { *ptr = p; }$/;"	f	class:HasPtr	access:public	signature:(int p) const
HasPtr::val	13/plain-ptr.cc	/^    int val;$/;"	m	class:HasPtr	file:	access:private
HasPtr::val	13/smart-ptr.cc	/^    int val;$/;"	m	class:HasPtr	file:	access:private
HasPtr::val	13/value-ptr.cc	/^    int val;$/;"	m	class:HasPtr	file:	access:private
HasPtr::~HasPtr	13/smart-ptr.cc	/^    ~HasPtr() { if (--ptr->use == 0) delete ptr; } $/;"	f	class:HasPtr	access:public	signature:()
HasPtr::~HasPtr	13/value-ptr.cc	/^    ~HasPtr() { delete ptr; } $/;"	f	class:HasPtr	access:public	signature:()
INLINE	7/enum-match.cc	/^enum Tokens {INLINE = 128, VIRTUAL = 129};$/;"	e	enum:Tokens	file:
Item_base	15/Basket.h	/^    Item_base(const std::string &book = "", $/;"	f	class:Item_base	access:public	signature:(const std::string &book = Ó, double sales_price = 0.0)
Item_base	15/Basket.h	/^class Item_base {$/;"	c
Item_base	15/Basket2.h	/^    Item_base(const std::string &book = "", $/;"	f	class:Item_base	access:public	signature:(const std::string &book = Ó, double sales_price = 0.0)
Item_base	15/Basket2.h	/^class Item_base {$/;"	c
Item_base	16/Basket.h	/^    Item_base(const std::string &book = "", $/;"	f	class:Item_base	access:public	signature:(const std::string &book = Ó, double sales_price = 0.0)
Item_base	16/Basket.h	/^class Item_base {$/;"	c
Item_base::Item_base	15/Basket.h	/^    Item_base(const std::string &book = "", $/;"	f	class:Item_base	access:public	signature:(const std::string &book = Ó, double sales_price = 0.0)
Item_base::Item_base	15/Basket2.h	/^    Item_base(const std::string &book = "", $/;"	f	class:Item_base	access:public	signature:(const std::string &book = Ó, double sales_price = 0.0)
Item_base::Item_base	16/Basket.h	/^    Item_base(const std::string &book = "", $/;"	f	class:Item_base	access:public	signature:(const std::string &book = Ó, double sales_price = 0.0)
Item_base::book	15/Basket.h	/^    std::string book() const { return isbn; }$/;"	f	class:Item_base	access:public	signature:() const
Item_base::book	15/Basket2.h	/^    std::string book() const { return isbn; }$/;"	f	class:Item_base	access:public	signature:() const
Item_base::book	16/Basket.h	/^    std::string book() const { return isbn; }$/;"	f	class:Item_base	access:public	signature:() const
Item_base::clone	15/Basket.h	/^    virtual Item_base* clone() const $/;"	f	class:Item_base	access:public	signature:() const
Item_base::clone	15/Basket2.h	/^    virtual Item_base* clone() const $/;"	f	class:Item_base	access:public	signature:() const
Item_base::clone	16/Basket.h	/^    virtual Item_base* clone() const $/;"	f	class:Item_base	access:public	signature:() const
Item_base::isbn	15/Basket.h	/^    std::string isbn;   \/\/ identifier for the item$/;"	m	class:Item_base	access:private
Item_base::isbn	15/Basket2.h	/^    std::string isbn;   \/\/ identifier for the item$/;"	m	class:Item_base	access:private
Item_base::isbn	16/Basket.h	/^    std::string isbn;   \/\/ identifier for the item$/;"	m	class:Item_base	access:private
Item_base::net_price	15/Basket.h	/^    virtual double net_price(std::size_t n) const $/;"	f	class:Item_base	access:public	signature:(std::size_t n) const
Item_base::net_price	15/Basket2.h	/^    virtual double net_price(std::size_t n) const $/;"	f	class:Item_base	access:public	signature:(std::size_t n) const
Item_base::net_price	16/Basket.h	/^    virtual double net_price(std::size_t n) const $/;"	f	class:Item_base	access:public	signature:(std::size_t n) const
Item_base::price	15/Basket.h	/^    double price;       \/\/ normal, undiscounted price$/;"	m	class:Item_base	access:protected
Item_base::price	15/Basket2.h	/^    double price;       \/\/ normal, undiscounted price$/;"	m	class:Item_base	access:protected
Item_base::price	16/Basket.h	/^    double price;       \/\/ normal, undiscounted price$/;"	m	class:Item_base	access:protected
Item_base::~Item_base	15/Basket.h	/^    virtual ~Item_base() { } $/;"	f	class:Item_base	access:public	signature:()
Item_base::~Item_base	15/Basket2.h	/^    virtual ~Item_base() { } $/;"	f	class:Item_base	access:public	signature:()
Item_base::~Item_base	16/Basket.h	/^    virtual ~Item_base() { } $/;"	f	class:Item_base	access:public	signature:()
LOCALMATH_H	7/localMath.h	31;"	d
LOCFILE	9/makefile	/^LOCFILE = -I..\/9$/;"	m
LOCFLAGS	10/makefile	/^LOCFLAGS=-I ..\/9$/;"	m
LOCFLAGS	11/makefile	/^LOCFLAGS=-I ..\/1$/;"	m
LOCFLAGS	14/makefile	/^LOCFLAGS = -I..\/11 -I..\/12$/;"	m
LOCFLAGS	15/makefile	/^LOCFLAGS = -I..\/10$/;"	m
LOCFLAGS	16/makefile	/^LOCFLAGS = -I. -I..\/1 -I..\/10$/;"	m
LOCFLAGS	5/makefile	/^LOCFLAGS = -I..\/1$/;"	m
LOCFLAGS	6/makefile	/^LOCFLAGS = -I..\/1$/;"	m
Lim_item	15/Basket.h	/^    Lim_item(const std::string& book = "", $/;"	f	class:Lim_item	access:public	signature:(const std::string& book = Ó, double sales_price = 0.0, std::size_t qty = 0, double disc_rate = 0.0)
Lim_item	15/Basket.h	/^class Lim_item : public Item_base {$/;"	c	inherits:Item_base
Lim_item	15/Basket2.h	/^    Lim_item(const std::string& book = "", $/;"	f	class:Lim_item	access:public	signature:(const std::string& book = Ó, double sales_price = 0.0, std::size_t qty = 0, double disc_rate = 0.0)
Lim_item	15/Basket2.h	/^class Lim_item : public Disc_item {$/;"	c	inherits:Disc_item
Lim_item	16/Basket.h	/^    Lim_item(const std::string& book = "", $/;"	f	class:Lim_item	access:public	signature:(const std::string& book = Ó, double sales_price = 0.0, std::size_t qty = 0, double disc_rate = 0.0)
Lim_item	16/Basket.h	/^class Lim_item : public Item_base {$/;"	c	inherits:Item_base
Lim_item::Lim_item	15/Basket.h	/^    Lim_item(const std::string& book = "", $/;"	f	class:Lim_item	access:public	signature:(const std::string& book = Ó, double sales_price = 0.0, std::size_t qty = 0, double disc_rate = 0.0)
Lim_item::Lim_item	15/Basket2.h	/^    Lim_item(const std::string& book = "", $/;"	f	class:Lim_item	access:public	signature:(const std::string& book = Ó, double sales_price = 0.0, std::size_t qty = 0, double disc_rate = 0.0)
Lim_item::Lim_item	16/Basket.h	/^    Lim_item(const std::string& book = "", $/;"	f	class:Lim_item	access:public	signature:(const std::string& book = Ó, double sales_price = 0.0, std::size_t qty = 0, double disc_rate = 0.0)
Lim_item::clone	15/Basket.h	/^    Lim_item* clone() const { return new Lim_item(*this); }$/;"	f	class:Lim_item	access:public	signature:() const
Lim_item::clone	15/Basket2.h	/^    Lim_item* clone() const { return new Lim_item(*this); }$/;"	f	class:Lim_item	access:public	signature:() const
Lim_item::clone	16/Basket.h	/^    Lim_item* clone() const { return new Lim_item(*this); }$/;"	f	class:Lim_item	access:public	signature:() const
Lim_item::discount	15/Basket.h	/^    double discount;       \/\/ fractional discount to apply$/;"	m	class:Lim_item	access:private
Lim_item::discount	16/Basket.h	/^    double discount;       \/\/ fractional discount to apply$/;"	m	class:Lim_item	access:private
Lim_item::discount_policy	15/Basket.h	/^    std::pair<size_t, double> discount_policy() const$/;"	f	class:Lim_item	access:public	signature:() const
Lim_item::discount_policy	15/Basket2.h	/^    std::pair<size_t, double> discount_policy() const$/;"	f	class:Lim_item	access:public	signature:() const
Lim_item::discount_policy	16/Basket.h	/^    std::pair<size_t, double> discount_policy() const$/;"	f	class:Lim_item	access:public	signature:() const
Lim_item::max_qty	15/Basket.h	/^    std::size_t max_qty;   \/\/ maximum number sold at discount$/;"	m	class:Lim_item	access:private
Lim_item::max_qty	16/Basket.h	/^    std::size_t max_qty;   \/\/ maximum number sold at discount$/;"	m	class:Lim_item	access:private
Lim_item::net_price	15/Basket.cc	/^double Lim_item::net_price(size_t cnt) const$/;"	f	class:Lim_item	signature:(size_t cnt) const
Lim_item::net_price	15/V2_Basket.cc	/^double Lim_item::net_price(size_t cnt) const$/;"	f	class:Lim_item	signature:(size_t cnt) const
Lim_item::net_price	16/Basket.cc	/^double Lim_item::net_price(size_t cnt) const$/;"	f	class:Lim_item	signature:(size_t cnt) const
Message	13/Folder.cc	/^Message::Message(const Message &m): $/;"	f	class:Message	signature:(const Message &m)
Message	13/Folder.h	/^    Message(const std::string &str = ""): $/;"	f	class:Message	access:public	signature:(const std::string &str = Ó)
Message	13/Folder.h	/^class Message {$/;"	c
Message::Message	13/Folder.cc	/^Message::Message(const Message &m): $/;"	f	class:Message	signature:(const Message &m)
Message::Message	13/Folder.h	/^    Message(const std::string &str = ""): $/;"	f	class:Message	access:public	signature:(const std::string &str = Ó)
Message::addFldr	13/Folder.h	/^    void addFldr(Folder *f) { folders.insert(f); }$/;"	f	class:Message	access:private	signature:(Folder *f)
Message::contents	13/Folder.h	/^    std::string contents;      \/\/ actual message text$/;"	m	class:Message	access:private
Message::debug_print	13/Folder.cc	/^void Message::debug_print()$/;"	f	class:Message	signature:()
Message::folders	13/Folder.h	/^    std::set<Folder*> folders; \/\/ Folders that have this Message$/;"	m	class:Message	access:private
Message::get_folders	13/Folder.cc	/^vector<Folder*> Message::get_folders()$/;"	f	class:Message	signature:()
Message::operator =	13/Folder.cc	/^Message& Message::operator=(const Message &rhs)$/;"	f	class:Message	signature:(const Message &rhs)
Message::print_message	13/Folder.h	/^    std::string print_message() { return contents; }$/;"	f	class:Message	access:public	signature:()
Message::put_Msg_in_Folders	13/Folder.cc	/^void Message::put_Msg_in_Folders(const set<Folder*> &rhs)$/;"	f	class:Message	signature:(const set<Folder*> &rhs)
Message::remFldr	13/Folder.h	/^    void remFldr(Folder *f) { folders.erase(f); }$/;"	f	class:Message	access:private	signature:(Folder *f)
Message::remove	13/Folder.cc	/^void Message::remove(Folder &f)$/;"	f	class:Message	signature:(Folder &f)
Message::remove_Msg_from_Folders	13/Folder.cc	/^void Message::remove_Msg_from_Folders()$/;"	f	class:Message	signature:()
Message::save	13/Folder.cc	/^void Message::save(Folder &f)$/;"	f	class:Message	signature:(Folder &f)
Message::~Message	13/Folder.cc	/^Message::~Message()$/;"	f	class:Message	signature:()
Msg_iter	13/Folder.h	/^    typedef std::set<Message*>::const_iterator Msg_iter;$/;"	t	class:Folder	access:private
NotQuery	15/Query.h	/^    NotQuery(Query q): query(q) { }$/;"	f	class:NotQuery	access:private	signature:(Query q)
NotQuery	15/Query.h	/^class NotQuery: public Query_base {$/;"	c	inherits:Query_base
NotQuery	16/Query.h	/^    NotQuery(Query q): query(q) { }$/;"	f	class:NotQuery	access:private	signature:(Query q)
NotQuery	16/Query.h	/^class NotQuery: public Query_base {$/;"	c	inherits:Query_base
NotQuery::NotQuery	15/Query.h	/^    NotQuery(Query q): query(q) { }$/;"	f	class:NotQuery	access:private	signature:(Query q)
NotQuery::NotQuery	16/Query.h	/^    NotQuery(Query q): query(q) { }$/;"	f	class:NotQuery	access:private	signature:(Query q)
NotQuery::display	15/Query.h	/^    std::ostream& display(std::ostream &os) const$/;"	f	class:NotQuery	access:private	signature:(std::ostream &os) const
NotQuery::display	16/Query.h	/^    std::ostream& display(std::ostream &os) const$/;"	f	class:NotQuery	access:private	signature:(std::ostream &os) const
NotQuery::eval	15/Query.cc	/^NotQuery::eval(const TextQuery& file) const$/;"	f	class:NotQuery	signature:(const TextQuery& file) const
NotQuery::eval	16/Query.cc	/^NotQuery::eval(const TextQuery& file) const$/;"	f	class:NotQuery	signature:(const TextQuery& file) const
NotQuery::query	15/Query.h	/^    const Query query;$/;"	m	class:NotQuery	access:private
NotQuery::query	16/Query.h	/^    Query query;$/;"	m	class:NotQuery	access:private
OBJECTS	1/makefile	/^OBJECTS = main_only.exe forcount.exe for_ex.exe whilecount.exe \\$/;"	m
OBJECTS	10/makefile	/^OBJECTS = word_transform.exe multimap.exe \\$/;"	m
OBJECTS	11/makefile	/^OBJECTS = inserters.exe use-istream-iter.exe \\$/;"	m
OBJECTS	12/makefile	/^OBJECTS = screen3.exe$/;"	m
OBJECTS	13/makefile	/^OBJECTS = Foldermain.exe smart-ptr.exe value-ptr.exe \\$/;"	m
OBJECTS	14/makefile	/^OBJECTS = subscript.exe absInt.exe fcnobj.exe directcall.exe \\$/;"	m
OBJECTS	15/makefile	/^OBJECTS = Basket_main.exe scope.exe V2_Basket_main.exe \\$/;"	m
OBJECTS	16/makefile	/^OBJECTS = QueueMain.exe QueueMain2.exe QueueMain3.exe \\$/;"	m
OBJECTS	17/makefile	/^OBJECTS = use-handle.exe book.exe$/;"	m
OBJECTS	18/makefile	/^OBJECTS = statmem.exe QueueMain.exe QueueMain2.exe QueueMain3.exe \\$/;"	m
OBJECTS	2/makefile	/^OBJECTS = pow2.exe pow2_try2.exe pow_tbl.exe twosome.exe \\$/;"	m
OBJECTS	3/makefile	/^OBJECTS = string_size.exe char_repl.exe init_vec.exe \\$/;"	m
OBJECTS	4/makefile	/^OBJECTS = arr_init.exe  ptr_traversal.exe \\$/;"	m
OBJECTS	5/makefile	/^OBJECTS = overflow.exe vec_init.exe incr.exe \\$/;"	m
OBJECTS	6/makefile	/^OBJECTS = forcount.exe copy_array.exe wdebug.exe nodebug.exe \\$/;"	m
OBJECTS	7/makefile	/^OBJECTS = swapmain1.exe swapmain2.exe enum-match.exe conv-enums.exe \\$/;"	m
OBJECTS	8/makefile	/^OBJECTS = manips.exe prec.exe point.exe sci_dec.exe \\$/;"	m
OBJECTS	9/makefile	/^OBJECTS = capacity.exe str_print.exe str_assignOps.exe \\$/;"	m
OrQuery	15/Query.h	/^    OrQuery(Query left, Query right): $/;"	f	class:OrQuery	access:private	signature:(Query left, Query right)
OrQuery	15/Query.h	/^class OrQuery: public BinaryQuery {$/;"	c	inherits:BinaryQuery
OrQuery	16/Query.h	/^    OrQuery(Query left, Query right): $/;"	f	class:OrQuery	access:private	signature:(Query left, Query right)
OrQuery	16/Query.h	/^class OrQuery: public BinaryQuery {$/;"	c	inherits:BinaryQuery
OrQuery::OrQuery	15/Query.h	/^    OrQuery(Query left, Query right): $/;"	f	class:OrQuery	access:private	signature:(Query left, Query right)
OrQuery::OrQuery	16/Query.h	/^    OrQuery(Query left, Query right): $/;"	f	class:OrQuery	access:private	signature:(Query left, Query right)
OrQuery::eval	15/Query.cc	/^OrQuery::eval(const TextQuery& file) const$/;"	f	class:OrQuery	signature:(const TextQuery& file) const
OrQuery::eval	16/Query.cc	/^OrQuery::eval(const TextQuery& file) const$/;"	f	class:OrQuery	signature:(const TextQuery& file) const
Panda	17/Animal.h	/^Panda::Panda(std::string name, bool onExhibit)$/;"	f	class:Panda	signature:(std::string name, bool onExhibit)
Panda	17/Animal.h	/^class Panda : public Bear, public Endangered {$/;"	c	inherits:Bear,Endangered
Panda	17/nopandaprint.h	/^Panda::Panda()$/;"	f	class:Panda	signature:()
Panda	17/nopandaprint.h	/^Panda::Panda(std::string name, bool onExhibit)$/;"	f	class:Panda	signature:(std::string name, bool onExhibit)
Panda	17/nopandaprint.h	/^class Panda : public Bear, public Endangered {$/;"	c	inherits:Bear,Endangered
Panda	17/virt.h	/^Panda::Panda(std::string name, bool onExhibit)$/;"	f	class:Panda	signature:(std::string name, bool onExhibit)
Panda	17/virt.h	/^class Panda : public Bear,$/;"	c	inherits:Bear,Raccoon,Endangered
Panda::Panda	17/Animal.h	/^Panda::Panda(std::string name, bool onExhibit)$/;"	f	class:Panda	signature:(std::string name, bool onExhibit)
Panda::Panda	17/nopandaprint.h	/^Panda::Panda()$/;"	f	class:Panda	signature:()
Panda::Panda	17/nopandaprint.h	/^Panda::Panda(std::string name, bool onExhibit)$/;"	f	class:Panda	signature:(std::string name, bool onExhibit)
Panda::Panda	17/virt.h	/^Panda::Panda(std::string name, bool onExhibit)$/;"	f	class:Panda	signature:(std::string name, bool onExhibit)
Panda::print	17/Animal.h	/^std::ostream& Panda::print(std::ostream &os) const$/;"	f	class:Panda	signature:(std::ostream &os) const
Panda::sleeping	17/virt.h	/^    bool sleeping() const {return sleeping_flag;}$/;"	f	class:Panda	access:public	signature:() const
Panda::sleeping	17/virt.h	/^    void sleeping(bool newval) {sleeping_flag = newval;}$/;"	f	class:Panda	access:public	signature:(bool newval)
Panda::sleeping_flag	17/virt.h	/^    bool sleeping_flag;$/;"	m	class:Panda	access:protected
Pass	7/conv-enums.cc	/^enum Stat {Fail, Pass};$/;"	e	enum:Stat	file:
PolarBear	17/Animal.h	/^class PolarBear : public Bear { \/* . . . *\/ };$/;"	c	inherits:Bear
QUERY_H	15/Query.h	31;"	d
QUERY_H	16/Query.h	31;"	d
QUEUE_H	16/Queue.h	31;"	d
QUEUE_H	16/newQueue.h	31;"	d
QUEUE_H	18/Queue.h	31;"	d
QUQUE_CHAR_H	16/char_queue.h	31;"	d
Query	15/Query.h	/^    Query(Query_base *query): q(query), $/;"	f	class:Query	access:private	signature:(Query_base *query)
Query	15/Query.h	/^    Query(const Query &c): q(c.q), use(c.use) { ++*use; }$/;"	f	class:Query	access:public	signature:(const Query &c)
Query	15/Query.h	/^Query::Query(const std::string &s): q(new WordQuery(s)),$/;"	f	class:Query	signature:(const std::string &s)
Query	15/Query.h	/^class Query {$/;"	c
Query	16/Query.h	/^    Query(Query_base *p): h(p) { }  \/\/ bind Handle to the given pointer$/;"	f	class:Query	access:private	signature:(Query_base *p)
Query	16/Query.h	/^Query::Query(const std::string &s): h(new WordQuery(s)) { }$/;"	f	class:Query	signature:(const std::string &s)
Query	16/Query.h	/^class Query {$/;"	c
Query	17/cplusplus_primer.h	/^    class Query { $/;"	c	namespace:cplusplus_primer
Query::Query	15/Query.h	/^    Query(Query_base *query): q(query), $/;"	f	class:Query	access:private	signature:(Query_base *query)
Query::Query	15/Query.h	/^    Query(const Query &c): q(c.q), use(c.use) { ++*use; }$/;"	f	class:Query	access:public	signature:(const Query &c)
Query::Query	15/Query.h	/^Query::Query(const std::string &s): q(new WordQuery(s)),$/;"	f	class:Query	signature:(const std::string &s)
Query::Query	16/Query.h	/^    Query(Query_base *p): h(p) { }  \/\/ bind Handle to the given pointer$/;"	f	class:Query	access:private	signature:(Query_base *p)
Query::Query	16/Query.h	/^Query::Query(const std::string &s): h(new WordQuery(s)) { }$/;"	f	class:Query	signature:(const std::string &s)
Query::decr_use	15/Query.h	/^    void decr_use() $/;"	f	class:Query	access:private	signature:()
Query::display	15/Query.h	/^    std::ostream &display(std::ostream &os) const$/;"	f	class:Query	access:public	signature:(std::ostream &os) const
Query::display	16/Query.h	/^    std::ostream &display(std::ostream &os) const$/;"	f	class:Query	access:public	signature:(std::ostream &os) const
Query::eval	15/Query.h	/^      eval(const TextQuery &t) const { return q->eval(t); }$/;"	f	class:Query	access:public	signature:(const TextQuery &t) const
Query::eval	16/Query.h	/^      eval(const TextQuery &t) const {return h->eval(t);}$/;"	f	class:Query	access:public	signature:(const TextQuery &t) const
Query::h	16/Query.h	/^    Handle<Query_base> h;           \/\/ use-counted handle$/;"	m	class:Query	access:private
Query::operator =	15/Query.h	/^inline Query& Query::operator=(const Query &rhs)$/;"	f	class:Query	signature:(const Query &rhs)
Query::q	15/Query.h	/^    Query_base *q;$/;"	m	class:Query	access:private
Query::use	15/Query.h	/^    std::size_t *use;$/;"	m	class:Query	access:private
Query::~Query	15/Query.h	/^    ~Query() { decr_use(); }$/;"	f	class:Query	access:public	signature:()
Query_base	15/Query.h	/^class Query_base {$/;"	c
Query_base	16/Query.h	/^class Query_base {$/;"	c
Query_base	17/cplusplus_primer.h	/^    class Query_base { \/* . . . *\/};$/;"	c	namespace:cplusplus_primer
Query_base::line_no	15/Query.h	/^    typedef TextQuery::line_no line_no;$/;"	t	class:Query_base	access:protected
Query_base::line_no	16/Query.h	/^    typedef TextQuery::line_no line_no;$/;"	t	class:Query_base	access:protected
Query_base::~Query_base	15/Query.h	/^    virtual ~Query_base() { }$/;"	f	class:Query_base	access:protected	signature:()
Query_base::~Query_base	16/Query.h	/^    virtual ~Query_base() { }$/;"	f	class:Query_base	access:protected	signature:()
Queue	16/Queue.h	/^    Queue(): head(0), tail(0) { }$/;"	f	class:Queue	access:public	signature:()
Queue	16/Queue.h	/^    Queue(It beg, It end): $/;"	f	class:Queue	access:public	signature:(It beg, It end)
Queue	16/Queue.h	/^    Queue(const Queue &Q): head(0), tail(0) $/;"	f	class:Queue	access:public	signature:(const Queue &Q)
Queue	16/Queue.h	/^template <class Type> class Queue {$/;"	c
Queue	16/Queue_interface.h	/^template <class Type> class Queue {$/;"	c
Queue	16/char_queue.h	/^template<> class Queue<const char*> {$/;"	c
Queue	16/int-Queue.h	/^template <class Type> class Queue<int> {$/;"	c
Queue	16/newQueue.h	/^    Queue() { }$/;"	f	class:Queue	access:public	signature:()
Queue	16/newQueue.h	/^    template <class It> Queue(It beg, It end): items(beg, end) { }$/;"	f	class:Queue	access:public	signature:(It beg, It end)
Queue	16/newQueue.h	/^template <class Type> class Queue {$/;"	c
Queue	18/MS_statmem.cc	/^    Queue(): head(0), tail(0) { }$/;"	f	class:Queue	access:public	signature:()
Queue	18/MS_statmem.cc	/^    Queue(const Queue &Q): head(0), tail(0) {copy_elems(Q);}$/;"	f	class:Queue	access:public	signature:(const Queue &Q)
Queue	18/MS_statmem.cc	/^template <class Type> class Queue {$/;"	c	file:
Queue	18/Queue.h	/^    Queue(): head(0), tail(0) { }$/;"	f	class:Queue	access:public	signature:()
Queue	18/Queue.h	/^    Queue(const Queue &Q): head(0), tail(0) {copy(Q);}$/;"	f	class:Queue	access:public	signature:(const Queue &Q)
Queue	18/Queue.h	/^    template <class It> Queue(It, It): head(0), tail(0)$/;"	f	class:Queue	access:public	signature:(It, It)
Queue	18/Queue.h	/^template <class Type> class Queue {$/;"	c
Queue	18/statmem.cc	/^    Queue(): head(0), tail(0) { }$/;"	f	class:Queue	access:public	signature:()
Queue	18/statmem.cc	/^    Queue(const Queue &Q): head(0), tail(0) {copy(Q);}$/;"	f	class:Queue	access:public	signature:(const Queue &Q)
Queue	18/statmem.cc	/^template <class Type> class Queue {$/;"	c	file:
Queue::Queue	16/Queue.h	/^    Queue(): head(0), tail(0) { }$/;"	f	class:Queue	access:public	signature:()
Queue::Queue	16/Queue.h	/^    Queue(It beg, It end): $/;"	f	class:Queue	access:public	signature:(It beg, It end)
Queue::Queue	16/Queue.h	/^    Queue(const Queue &Q): head(0), tail(0) $/;"	f	class:Queue	access:public	signature:(const Queue &Q)
Queue::Queue	16/newQueue.h	/^    Queue() { }$/;"	f	class:Queue	access:public	signature:()
Queue::Queue	16/newQueue.h	/^    template <class It> Queue(It beg, It end): items(beg, end) { }$/;"	f	class:Queue	access:public	signature:(It beg, It end)
Queue::Queue	18/MS_statmem.cc	/^    Queue(): head(0), tail(0) { }$/;"	f	class:Queue	access:public	signature:()
Queue::Queue	18/MS_statmem.cc	/^    Queue(const Queue &Q): head(0), tail(0) {copy_elems(Q);}$/;"	f	class:Queue	access:public	signature:(const Queue &Q)
Queue::Queue	18/Queue.h	/^    Queue(): head(0), tail(0) { }$/;"	f	class:Queue	access:public	signature:()
Queue::Queue	18/Queue.h	/^    Queue(const Queue &Q): head(0), tail(0) {copy(Q);}$/;"	f	class:Queue	access:public	signature:(const Queue &Q)
Queue::Queue	18/Queue.h	/^    template <class It> Queue(It, It): head(0), tail(0)$/;"	f	class:Queue	access:public	signature:(It, It)
Queue::Queue	18/statmem.cc	/^    Queue(): head(0), tail(0) { }$/;"	f	class:Queue	access:public	signature:()
Queue::Queue	18/statmem.cc	/^    Queue(const Queue &Q): head(0), tail(0) {copy(Q);}$/;"	f	class:Queue	access:public	signature:(const Queue &Q)
Queue::QueueItem	18/MS_statmem.cc	/^    struct QueueItem {$/;"	s	class:Queue	file:	access:private
Queue::QueueItem	18/Queue.h	/^    struct QueueItem {$/;"	s	class:Queue	access:private
Queue::QueueItem	18/statmem.cc	/^struct Queue<Type>::QueueItem {$/;"	s	class:Queue	file:
Queue::QueueItem::QueueItem	18/MS_statmem.cc	/^        QueueItem(const Type &t): item(t), next(0) { }$/;"	f	struct:Queue::QueueItem	access:public	signature:(const Type &t)
Queue::QueueItem::QueueItem	18/Queue.cc	/^Queue<Type>::QueueItem::QueueItem(const Type &t): $/;"	f	class:Queue::QueueItem	signature:(const Type &t)
Queue::QueueItem::QueueItem	18/statmem.cc	/^    QueueItem(const Type &t): item(t), next(0) { }$/;"	f	struct:Queue::QueueItem	access:public	signature:(const Type &t)
Queue::QueueItem::item	18/MS_statmem.cc	/^        Type item;           \/\/ value stored in this element$/;"	m	struct:Queue::QueueItem	file:	access:public
Queue::QueueItem::item	18/Queue.h	/^        Type item;           \/\/ value stored in this element$/;"	m	struct:Queue::QueueItem	access:public
Queue::QueueItem::item	18/statmem.cc	/^    Type item;           \/\/ value stored in this element$/;"	m	struct:Queue::QueueItem	file:	access:public
Queue::QueueItem::next	18/MS_statmem.cc	/^        QueueItem *next;     \/\/ pointer to next element in the Queue$/;"	m	struct:Queue::QueueItem	file:	access:public
Queue::QueueItem::next	18/Queue.h	/^        QueueItem *next;     \/\/ pointer to next element in the Queue$/;"	m	struct:Queue::QueueItem	access:public
Queue::QueueItem::next	18/statmem.cc	/^    QueueItem *next;     \/\/ pointer to next element in the Queue$/;"	m	struct:Queue::QueueItem	file:	access:public
Queue::QueueItem::static_mem	18/statmem.cc	/^    static int static_mem;$/;"	m	struct:Queue::QueueItem	file:	access:public
Queue::QueueItem::static_mem	18/statmem.cc	/^int Queue<Type>::QueueItem::static_mem = 1024;$/;"	m	class:Queue::QueueItem	file:
Queue::assign	16/Queue.cc	/^void Queue<T>::assign(Iter beg, Iter end)$/;"	f	class:Queue	signature:(Iter beg, Iter end)
Queue::assign	16/newQueue.h	/^    template <class Iter> void assign(Iter beg, Iter end)$/;"	f	class:Queue	access:public	signature:(Iter beg, Iter end)
Queue::assign	18/Queue.cc	/^void Queue<T>::assign(Iter beg, Iter end)$/;"	f	class:Queue	signature:(Iter beg, Iter end)
Queue::copy	18/Queue.cc	/^Queue<Type>::copy(const Queue &orig)$/;"	f	class:Queue	signature:(const Queue &orig)
Queue::copy	18/Queue.cc	/^void Queue<Type>::copy(Iter beg, Iter end)$/;"	f	class:Queue	signature:(Iter beg, Iter end)
Queue::copy	18/statmem.cc	/^Queue<Type>::copy(const Queue &orig)$/;"	f	class:Queue	signature:(const Queue &orig)
Queue::copy	18/statmem.cc	/^void Queue<Type>::copy(Iter beg, Iter end)$/;"	f	class:Queue	signature:(Iter beg, Iter end)
Queue::copy_elems	16/Queue.cc	/^void Queue<Type>::copy_elems(It beg, It end)$/;"	f	class:Queue	signature:(It beg, It end)
Queue::copy_elems	16/Queue.cc	/^void Queue<Type>::copy_elems(const Queue &orig)$/;"	f	class:Queue	signature:(const Queue &orig)
Queue::copy_elems	18/MS_statmem.cc	/^    template <class Iter> void copy_elems(Iter, Iter)$/;"	f	class:Queue	file:	access:private	signature:(Iter, Iter)
Queue::copy_elems	18/MS_statmem.cc	/^Queue<Type>::copy_elems(const Queue &orig)$/;"	f	class:Queue	signature:(const Queue &orig)
Queue::destroy	16/Queue.cc	/^template <class Type> void Queue<Type>::destroy()$/;"	f	class:Queue	signature:()
Queue::destroy	18/MS_statmem.cc	/^Queue<Type>::destroy()$/;"	f	class:Queue	signature:()
Queue::destroy	18/Queue.cc	/^Queue<Type>::destroy()$/;"	f	class:Queue	signature:()
Queue::destroy	18/statmem.cc	/^Queue<Type>::destroy()$/;"	f	class:Queue	signature:()
Queue::empty	16/Queue.h	/^    bool empty() const {          \/\/ true if no elements in the Queue$/;"	f	class:Queue	access:public	signature:() const
Queue::empty	16/char_queue.h	/^    bool empty() const       {return real_queue.empty();}$/;"	f	class:Queue	access:public	signature:() const
Queue::empty	16/newQueue.h	/^    bool empty() const       { return items.empty(); }$/;"	f	class:Queue	access:public	signature:() const
Queue::empty	18/MS_statmem.cc	/^    bool empty() const {    \/\/ true if no elements in the Queue$/;"	f	class:Queue	access:public	signature:() const
Queue::empty	18/Queue.h	/^    bool empty() const {    \/\/ true if no elements in the Queue$/;"	f	class:Queue	access:public	signature:() const
Queue::empty	18/statmem.cc	/^    bool empty() const {    \/\/ true if no elements in the Queue$/;"	f	class:Queue	access:public	signature:() const
Queue::front	16/Queue.h	/^    Type& front()             { return head->item; }$/;"	f	class:Queue	access:public	signature:()
Queue::front	16/Queue.h	/^    const Type &front() const { return head->item; }$/;"	f	class:Queue	access:public	signature:() const
Queue::front	16/char_queue.h	/^    const std::string &front() const $/;"	f	class:Queue	access:public	signature:() const
Queue::front	16/char_queue.h	/^    std::string front()     {return real_queue.front();}$/;"	f	class:Queue	access:public	signature:()
Queue::front	16/newQueue.h	/^    Type& front()             { return items.front(); }$/;"	f	class:Queue	access:public	signature:()
Queue::front	16/newQueue.h	/^    const Type &front() const { return items.front(); }$/;"	f	class:Queue	access:public	signature:() const
Queue::front	18/MS_statmem.cc	/^    Type& front()            { return head->item; }$/;"	f	class:Queue	access:public	signature:()
Queue::front	18/MS_statmem.cc	/^    const Type front() const { return head->item; }$/;"	f	class:Queue	access:public	signature:() const
Queue::front	18/Queue.h	/^    Type& front()            { return head->item; }$/;"	f	class:Queue	access:public	signature:()
Queue::front	18/Queue.h	/^    const Type front() const { return head->item; }$/;"	f	class:Queue	access:public	signature:() const
Queue::front	18/statmem.cc	/^    Type& front()            { return head->item; }$/;"	f	class:Queue	access:public	signature:()
Queue::front	18/statmem.cc	/^    const Type front() const { return head->item; }$/;"	f	class:Queue	access:public	signature:() const
Queue::head	16/Queue.h	/^    QueueItem<Type> *head;         \/\/ pointer to first element in Queue$/;"	m	class:Queue	access:private
Queue::head	16/int-Queue.h	/^    QueueItem<int> *head;     \/\/ use QueueItem of int$/;"	m	class:Queue	access:private
Queue::head	18/MS_statmem.cc	/^    QueueItem *head;   \/\/ pointer to first element in Queue$/;"	m	class:Queue	file:	access:private
Queue::head	18/Queue.h	/^    QueueItem *head;   \/\/ pointer to first element in Queue$/;"	m	class:Queue	access:private
Queue::head	18/statmem.cc	/^    QueueItem *head;   \/\/ pointer to first element in Queue$/;"	m	class:Queue	file:	access:private
Queue::items	16/newQueue.h	/^    std::list<Type> items;$/;"	m	class:Queue	access:private
Queue::operator =	16/Queue.cc	/^Queue<Type>& Queue<Type>::operator=(const Queue &rhs)$/;"	f	class:Queue	signature:(const Queue &rhs)
Queue::operator =	18/MS_statmem.cc	/^Queue<Type>& Queue<Type>::operator=(const Queue &rhs)$/;"	f	class:Queue	signature:(const Queue &rhs)
Queue::operator =	18/Queue.cc	/^Queue<Type>& Queue<Type>::operator=(const Queue &rhs)$/;"	f	class:Queue	signature:(const Queue &rhs)
Queue::operator =	18/statmem.cc	/^Queue<Type>& Queue<Type>::operator=(const Queue &rhs)$/;"	f	class:Queue	signature:(const Queue &rhs)
Queue::pop	16/Queue.cc	/^template <class Type> void Queue<Type>::pop()$/;"	f	class:Queue	signature:()
Queue::pop	16/char_queue.h	/^    void pop()               {real_queue.pop();}$/;"	f	class:Queue	access:public	signature:()
Queue::pop	16/newQueue.h	/^    void pop()               { items.erase(items.begin()); }$/;"	f	class:Queue	access:public	signature:()
Queue::pop	16/queue_push_char.cc	/^void Queue<const char*>::pop()$/;"	f	class:Queue	signature:()
Queue::pop	18/MS_statmem.cc	/^void Queue<Type>::pop()$/;"	f	class:Queue	signature:()
Queue::pop	18/Queue.cc	/^void Queue<Type>::pop()$/;"	f	class:Queue	signature:()
Queue::pop	18/statmem.cc	/^void Queue<Type>::pop()$/;"	f	class:Queue	signature:()
Queue::push	16/Queue.cc	/^template <class Type> void Queue<Type>::push(const Type &val)$/;"	f	class:Queue	signature:(const Type &val)
Queue::push	16/char_queue.h	/^void Queue<const char*>::push(const char* val)$/;"	f	class:Queue	signature:(const char* val)
Queue::push	16/newQueue.h	/^    void push(const Type &t) { items.push_back(t); }$/;"	f	class:Queue	access:public	signature:(const Type &t)
Queue::push	16/queue_push_char.cc	/^void Queue<const char*>::push(const char *const &val)$/;"	f	class:Queue	signature:(const char *const &val)
Queue::push	18/MS_statmem.cc	/^void Queue<Type>::push(const Type &val)$/;"	f	class:Queue	signature:(const Type &val)
Queue::push	18/Queue.cc	/^void Queue<Type>::push(const Type &val)$/;"	f	class:Queue	signature:(const Type &val)
Queue::push	18/statmem.cc	/^void Queue<Type>::push(const Type &val)$/;"	f	class:Queue	signature:(const Type &val)
Queue::real_queue	16/char_queue.h	/^    Queue<std::string> real_queue; \/\/ forward calls to real_queue$/;"	m	class:Queue	access:private
Queue::tail	16/Queue.h	/^    QueueItem<Type> *tail;         \/\/ pointer to last element in Queue$/;"	m	class:Queue	access:private
Queue::tail	16/int-Queue.h	/^    QueueItem<int> *tail;   $/;"	m	class:Queue	access:private
Queue::tail	18/MS_statmem.cc	/^    QueueItem *tail;   \/\/ pointer to last element in Queue$/;"	m	class:Queue	file:	access:private
Queue::tail	18/Queue.h	/^    QueueItem *tail;   \/\/ pointer to last element in Queue$/;"	m	class:Queue	access:private
Queue::tail	18/statmem.cc	/^    QueueItem *tail;   \/\/ pointer to last element in Queue$/;"	m	class:Queue	file:	access:private
Queue::~Queue	16/Queue.h	/^    ~Queue() { destroy(); }$/;"	f	class:Queue	access:public	signature:()
Queue::~Queue	18/MS_statmem.cc	/^    ~Queue() { destroy(); }$/;"	f	class:Queue	access:public	signature:()
Queue::~Queue	18/Queue.h	/^    ~Queue() { destroy(); }$/;"	f	class:Queue	access:public	signature:()
Queue::~Queue	18/statmem.cc	/^    ~Queue() { destroy(); }$/;"	f	class:Queue	access:public	signature:()
QueueItem	16/Queue.h	/^    QueueItem(const Type &t): item(t), next(0) { }$/;"	f	class:QueueItem	access:private	signature:(const Type &t)
QueueItem	16/Queue.h	/^template <class Type> class QueueItem {$/;"	c
QueueItem	18/MS_statmem.cc	/^        QueueItem(const Type &t): item(t), next(0) { }$/;"	f	struct:Queue::QueueItem	access:public	signature:(const Type &t)
QueueItem	18/MS_statmem.cc	/^    struct QueueItem {$/;"	s	class:Queue	file:	access:private
QueueItem	18/Queue.cc	/^Queue<Type>::QueueItem::QueueItem(const Type &t): $/;"	f	class:Queue::QueueItem	signature:(const Type &t)
QueueItem	18/Queue.h	/^    struct QueueItem {$/;"	s	class:Queue	access:private
QueueItem	18/statmem.cc	/^    QueueItem(const Type &t): item(t), next(0) { }$/;"	f	struct:Queue::QueueItem	access:public	signature:(const Type &t)
QueueItem	18/statmem.cc	/^struct Queue<Type>::QueueItem {$/;"	s	class:Queue	file:
QueueItem::QueueItem	16/Queue.h	/^    QueueItem(const Type &t): item(t), next(0) { }$/;"	f	class:QueueItem	access:private	signature:(const Type &t)
QueueItem::item	16/Queue.h	/^    Type item;           \/\/ value stored in this element$/;"	m	class:QueueItem	access:private
QueueItem::next	16/Queue.h	/^    QueueItem *next;     \/\/ pointer to next element in the Queue$/;"	m	class:QueueItem	access:private
Raccoon	17/virt.h	/^Raccoon::Raccoon(std::string name, bool onExhibit)$/;"	f	class:Raccoon	signature:(std::string name, bool onExhibit)
Raccoon	17/virt.h	/^class Raccoon : public virtual ZooAnimal {$/;"	c	inherits:ZooAnimal
Raccoon::Raccoon	17/virt.h	/^Raccoon::Raccoon(std::string name, bool onExhibit)$/;"	f	class:Raccoon	signature:(std::string name, bool onExhibit)
Raccoon::pettable	17/virt.h	/^    bool pettable() const {return pettable_flag;  }$/;"	f	class:Raccoon	access:public	signature:() const
Raccoon::pettable	17/virt.h	/^    void pettable(bool petval) {pettable_flag = petval;}$/;"	f	class:Raccoon	access:public	signature:(bool petval)
Raccoon::pettable_flag	17/virt.h	/^    bool pettable_flag;$/;"	m	class:Raccoon	access:protected
SALESITEM_H	1/Sales_item.h	31;"	d
SALESITEM_H	14/Sales_item.h	31;"	d
SCREEN5_H	12/screen5.h	31;"	d
Sales_item	1/Sales_item.h	/^    Sales_item(): units_sold(0), revenue(0.0) { }$/;"	f	class:Sales_item	access:public	signature:()
Sales_item	1/Sales_item.h	/^    Sales_item(const std::string &book):$/;"	f	class:Sales_item	access:public	signature:(const std::string &book)
Sales_item	1/Sales_item.h	/^    Sales_item(std::istream &is) { is >> *this; }$/;"	f	class:Sales_item	access:public	signature:(std::istream &is)
Sales_item	1/Sales_item.h	/^class Sales_item {$/;"	c
Sales_item	14/Sales_item.h	/^    Sales_item(): units_sold(0), revenue(0.0) { }$/;"	f	class:Sales_item	access:public	signature:()
Sales_item	14/Sales_item.h	/^    Sales_item(const std::string &book):$/;"	f	class:Sales_item	access:public	signature:(const std::string &book)
Sales_item	14/Sales_item.h	/^    Sales_item(std::istream &is) { is >> *this; }$/;"	f	class:Sales_item	access:public	signature:(std::istream &is)
Sales_item	14/Sales_item.h	/^class Sales_item {$/;"	c
Sales_item	15/Basket.h	/^    Sales_item(): p(0), use(new std::size_t(1)) { }$/;"	f	class:Sales_item	access:public	signature:()
Sales_item	15/Basket.h	/^    Sales_item(const Sales_item &i): $/;"	f	class:Sales_item	access:public	signature:(const Sales_item &i)
Sales_item	15/Basket.h	/^Sales_item::Sales_item(const Item_base &item):$/;"	f	class:Sales_item	signature:(const Item_base &item)
Sales_item	15/Basket.h	/^class Sales_item {$/;"	c
Sales_item	15/Basket2.h	/^    Sales_item(): p(0), use(new std::size_t(1)) { }$/;"	f	class:Sales_item	access:public	signature:()
Sales_item	15/Basket2.h	/^    Sales_item(const Sales_item &i): p(i.p), use(i.use) $/;"	f	class:Sales_item	access:public	signature:(const Sales_item &i)
Sales_item	15/Basket2.h	/^Sales_item::Sales_item(const Item_base &item):$/;"	f	class:Sales_item	signature:(const Item_base &item)
Sales_item	15/Basket2.h	/^class Sales_item {$/;"	c
Sales_item	16/Basket.h	/^    Sales_item(): h() { }$/;"	f	class:Sales_item	access:public	signature:()
Sales_item	16/Basket.h	/^    Sales_item(const Item_base &item): h(item.clone()) { }$/;"	f	class:Sales_item	access:public	signature:(const Item_base &item)
Sales_item	16/Basket.h	/^class Sales_item {$/;"	c
Sales_item	17/Sales_item.h	/^    Sales_item(): units_sold(0), revenue(0.0) { }$/;"	f	class:Sales_item	access:public	signature:()
Sales_item	17/Sales_item.h	/^    Sales_item(const std::string &book):$/;"	f	class:Sales_item	access:public	signature:(const std::string &book)
Sales_item	17/Sales_item.h	/^    Sales_item(std::istream &is) { is >> *this; }$/;"	f	class:Sales_item	access:public	signature:(std::istream &is)
Sales_item	17/Sales_item.h	/^class Sales_item {$/;"	c
Sales_item	17/cplusplus_primer.h	/^    class Sales_item { \/* . . . *\/};$/;"	c	namespace:cplusplus_primer
Sales_item::Sales_item	1/Sales_item.h	/^    Sales_item(): units_sold(0), revenue(0.0) { }$/;"	f	class:Sales_item	access:public	signature:()
Sales_item::Sales_item	1/Sales_item.h	/^    Sales_item(const std::string &book):$/;"	f	class:Sales_item	access:public	signature:(const std::string &book)
Sales_item::Sales_item	1/Sales_item.h	/^    Sales_item(std::istream &is) { is >> *this; }$/;"	f	class:Sales_item	access:public	signature:(std::istream &is)
Sales_item::Sales_item	14/Sales_item.h	/^    Sales_item(): units_sold(0), revenue(0.0) { }$/;"	f	class:Sales_item	access:public	signature:()
Sales_item::Sales_item	14/Sales_item.h	/^    Sales_item(const std::string &book):$/;"	f	class:Sales_item	access:public	signature:(const std::string &book)
Sales_item::Sales_item	14/Sales_item.h	/^    Sales_item(std::istream &is) { is >> *this; }$/;"	f	class:Sales_item	access:public	signature:(std::istream &is)
Sales_item::Sales_item	15/Basket.h	/^    Sales_item(): p(0), use(new std::size_t(1)) { }$/;"	f	class:Sales_item	access:public	signature:()
Sales_item::Sales_item	15/Basket.h	/^    Sales_item(const Sales_item &i): $/;"	f	class:Sales_item	access:public	signature:(const Sales_item &i)
Sales_item::Sales_item	15/Basket.h	/^Sales_item::Sales_item(const Item_base &item):$/;"	f	class:Sales_item	signature:(const Item_base &item)
Sales_item::Sales_item	15/Basket2.h	/^    Sales_item(): p(0), use(new std::size_t(1)) { }$/;"	f	class:Sales_item	access:public	signature:()
Sales_item::Sales_item	15/Basket2.h	/^    Sales_item(const Sales_item &i): p(i.p), use(i.use) $/;"	f	class:Sales_item	access:public	signature:(const Sales_item &i)
Sales_item::Sales_item	15/Basket2.h	/^Sales_item::Sales_item(const Item_base &item):$/;"	f	class:Sales_item	signature:(const Item_base &item)
Sales_item::Sales_item	16/Basket.h	/^    Sales_item(): h() { }$/;"	f	class:Sales_item	access:public	signature:()
Sales_item::Sales_item	16/Basket.h	/^    Sales_item(const Item_base &item): h(item.clone()) { }$/;"	f	class:Sales_item	access:public	signature:(const Item_base &item)
Sales_item::Sales_item	17/Sales_item.h	/^    Sales_item(): units_sold(0), revenue(0.0) { }$/;"	f	class:Sales_item	access:public	signature:()
Sales_item::Sales_item	17/Sales_item.h	/^    Sales_item(const std::string &book):$/;"	f	class:Sales_item	access:public	signature:(const std::string &book)
Sales_item::Sales_item	17/Sales_item.h	/^    Sales_item(std::istream &is) { is >> *this; }$/;"	f	class:Sales_item	access:public	signature:(std::istream &is)
Sales_item::avg_price	1/Sales_item.h	/^double Sales_item::avg_price() const$/;"	f	class:Sales_item	signature:() const
Sales_item::avg_price	14/Sales_item.cc	/^double Sales_item::avg_price() const$/;"	f	class:Sales_item	signature:() const
Sales_item::avg_price	17/Sales_item.cc	/^double Sales_item::avg_price() const$/;"	f	class:Sales_item	signature:() const
Sales_item::book	17/Sales_item.h	/^    std::string book() const { return isbn; }$/;"	f	class:Sales_item	access:public	signature:() const
Sales_item::decr_use	15/Basket.h	/^    void decr_use() $/;"	f	class:Sales_item	access:private	signature:()
Sales_item::decr_use	15/Basket2.h	/^    void decr_use() $/;"	f	class:Sales_item	access:private	signature:()
Sales_item::h	16/Basket.h	/^    Handle<Item_base> h;   \/\/ use-counted handle$/;"	m	class:Sales_item	access:private
Sales_item::isbn	1/Sales_item.h	/^    std::string isbn;$/;"	m	class:Sales_item	access:private
Sales_item::isbn	14/Sales_item.h	/^    std::string isbn;$/;"	m	class:Sales_item	access:private
Sales_item::isbn	17/Sales_item.h	/^    std::string isbn;$/;"	m	class:Sales_item	access:private
Sales_item::operator *	15/Basket.h	/^    const Item_base &operator*() const { if (p) return *p; $/;"	f	class:Sales_item	access:public	signature:() const
Sales_item::operator *	15/Basket2.h	/^    const Item_base &operator*() const { return *p; }$/;"	f	class:Sales_item	access:public	signature:() const
Sales_item::operator *	16/Basket.h	/^    const Item_base& operator*() const { return *h; }$/;"	f	class:Sales_item	access:public	signature:() const
Sales_item::operator +=	1/Sales_item.h	/^Sales_item& Sales_item::operator+=(const Sales_item& rhs) $/;"	f	class:Sales_item	signature:(const Sales_item& rhs)
Sales_item::operator +=	14/Sales_item.cc	/^Sales_item& Sales_item::operator+=(const Sales_item& rhs) $/;"	f	class:Sales_item	signature:(const Sales_item& rhs)
Sales_item::operator +=	17/Sales_item.cc	/^Sales_item::operator+=(const Sales_item& rhs) $/;"	f	class:Sales_item	signature:(const Sales_item& rhs)
Sales_item::operator ->	15/Basket.h	/^    const Item_base *operator->() const { if (p) return p; $/;"	f	class:Sales_item	access:public	signature:() const
Sales_item::operator ->	15/Basket2.h	/^    const Item_base *operator->() const { return p; }$/;"	f	class:Sales_item	access:public	signature:() const
Sales_item::operator ->	16/Basket.h	/^    const Item_base* operator->() const $/;"	f	class:Sales_item	access:public	signature:() const
Sales_item::operator =	15/Basket.cc	/^Sales_item::operator=(const Sales_item &rhs)$/;"	f	class:Sales_item	signature:(const Sales_item &rhs)
Sales_item::operator =	15/V2_Basket.cc	/^Sales_item::operator=(const Sales_item &rhs)$/;"	f	class:Sales_item	signature:(const Sales_item &rhs)
Sales_item::p	15/Basket.h	/^    Item_base *p;         \/\/ pointer to shared item$/;"	m	class:Sales_item	access:private
Sales_item::p	15/Basket2.h	/^    Item_base *p;         \/\/ pointer to shared item$/;"	m	class:Sales_item	access:private
Sales_item::revenue	1/Sales_item.h	/^    double revenue;$/;"	m	class:Sales_item	access:private
Sales_item::revenue	14/Sales_item.h	/^    double revenue;$/;"	m	class:Sales_item	access:private
Sales_item::revenue	17/Sales_item.h	/^    double revenue;$/;"	m	class:Sales_item	access:private
Sales_item::same_isbn	1/Sales_item.h	/^    bool same_isbn(const Sales_item &rhs) const$/;"	f	class:Sales_item	access:public	signature:(const Sales_item &rhs) const
Sales_item::same_isbn	14/Sales_item.h	/^    bool same_isbn(const Sales_item &rhs) const$/;"	f	class:Sales_item	access:public	signature:(const Sales_item &rhs) const
Sales_item::same_isbn	17/Sales_item.h	/^    bool same_isbn(const Sales_item &rhs) const$/;"	f	class:Sales_item	access:public	signature:(const Sales_item &rhs) const
Sales_item::units_sold	1/Sales_item.h	/^    unsigned units_sold;$/;"	m	class:Sales_item	access:private
Sales_item::units_sold	14/Sales_item.h	/^    unsigned units_sold;$/;"	m	class:Sales_item	access:private
Sales_item::units_sold	17/Sales_item.h	/^    unsigned units_sold;$/;"	m	class:Sales_item	access:private
Sales_item::use	15/Basket.h	/^    std::size_t *use;     \/\/ pointer to shared use count$/;"	m	class:Sales_item	access:private
Sales_item::use	15/Basket2.h	/^    std::size_t *use;     \/\/ pointer to shared use count$/;"	m	class:Sales_item	access:private
Sales_item::~Sales_item	15/Basket.h	/^    ~Sales_item() { decr_use(); }$/;"	f	class:Sales_item	access:public	signature:()
Sales_item::~Sales_item	15/Basket2.h	/^    ~Sales_item() { decr_use(); }$/;"	f	class:Sales_item	access:public	signature:()
ScrPtr	14/ScrPtr.h	/^    ScrPtr(Screen *p): sp(p), use(1) { }$/;"	f	class:ScrPtr	access:private	signature:(Screen *p)
ScrPtr	14/ScrPtr.h	/^class ScrPtr {$/;"	c
ScrPtr::ScrPtr	14/ScrPtr.h	/^    ScrPtr(Screen *p): sp(p), use(1) { }$/;"	f	class:ScrPtr	access:private	signature:(Screen *p)
ScrPtr::sp	14/ScrPtr.h	/^    Screen *sp;$/;"	m	class:ScrPtr	access:private
ScrPtr::use	14/ScrPtr.h	/^    size_t use;$/;"	m	class:ScrPtr	access:private
ScrPtr::~ScrPtr	14/ScrPtr.h	/^    ~ScrPtr() { delete sp; }$/;"	f	class:ScrPtr	access:private	signature:()
Screen	12/Screen.h	/^    Screen(index ht = 0, index wd = 0): $/;"	f	class:Screen	access:public	signature:(index ht = 0, index wd = 0)
Screen	12/Screen.h	/^class Screen {$/;"	c
Screen	12/screen3.h	/^    Screen(index ht = 0, index wd = 0): $/;"	f	class:Screen	access:public	signature:(index ht = 0, index wd = 0)
Screen	12/screen3.h	/^class Screen {$/;"	c
Screen	12/screen4.h	/^    Screen(index ht = 0, index wd = 0): $/;"	f	class:Screen	access:public	signature:(index ht = 0, index wd = 0)
Screen	12/screen4.h	/^class Screen {$/;"	c
Screen	12/screen5.h	/^    Screen(index ht = 0, index wd = 0): $/;"	f	class:Screen	access:public	signature:(index ht = 0, index wd = 0)
Screen	12/screen5.h	/^class Screen {$/;"	c
Screen	18/Screen.h	/^    Screen(index ht = 0, index wd = 0):$/;"	f	class:Screen	access:public	signature:(index ht = 0, index wd = 0)
Screen	18/Screen.h	/^class Screen {$/;"	c
Screen::Screen	12/Screen.h	/^    Screen(index ht = 0, index wd = 0): $/;"	f	class:Screen	access:public	signature:(index ht = 0, index wd = 0)
Screen::Screen	12/screen3.h	/^    Screen(index ht = 0, index wd = 0): $/;"	f	class:Screen	access:public	signature:(index ht = 0, index wd = 0)
Screen::Screen	12/screen4.h	/^    Screen(index ht = 0, index wd = 0): $/;"	f	class:Screen	access:public	signature:(index ht = 0, index wd = 0)
Screen::Screen	12/screen5.h	/^    Screen(index ht = 0, index wd = 0): $/;"	f	class:Screen	access:public	signature:(index ht = 0, index wd = 0)
Screen::Screen	18/Screen.h	/^    Screen(index ht = 0, index wd = 0):$/;"	f	class:Screen	access:public	signature:(index ht = 0, index wd = 0)
Screen::access_ctr	12/screen5.h	/^    mutable size_t access_ctr; \/\/ may change in a const members$/;"	m	class:Screen	access:private
Screen::contents	12/Screen.h	/^    std::string contents;$/;"	m	class:Screen	access:private
Screen::contents	12/screen3.h	/^    std::string contents;$/;"	m	class:Screen	access:private
Screen::contents	12/screen4.h	/^    std::string contents;$/;"	m	class:Screen	access:private
Screen::contents	12/screen5.h	/^    std::string contents;$/;"	m	class:Screen	access:private
Screen::contents	18/Screen.h	/^    std::string contents;$/;"	m	class:Screen	access:private
Screen::cursor	12/Screen.h	/^    index cursor;$/;"	m	class:Screen	access:private
Screen::cursor	12/screen3.h	/^    index cursor;$/;"	m	class:Screen	access:private
Screen::cursor	12/screen4.h	/^    index cursor;$/;"	m	class:Screen	access:private
Screen::cursor	12/screen5.h	/^    index cursor;  $/;"	m	class:Screen	access:private
Screen::cursor	18/Screen.h	/^    index cursor;$/;"	m	class:Screen	access:private
Screen::display	12/screen3.h	/^    Screen& display(std::ostream &os) $/;"	f	class:Screen	access:public	signature:(std::ostream &os)
Screen::display	12/screen3.h	/^    const Screen& display(std::ostream &os) const$/;"	f	class:Screen	access:public	signature:(std::ostream &os) const
Screen::display	12/screen4.h	/^const Screen& Screen::display(std::ostream& os) const$/;"	f	class:Screen	signature:(std::ostream& os) const
Screen::do_display	12/screen3.h	/^     void do_display(std::ostream &os) const$/;"	f	class:Screen	access:private	signature:(std::ostream &os) const
Screen::do_display	12/screen5.h	/^void Screen::do_display(std::ostream& os) const$/;"	f	class:Screen	signature:(std::ostream& os) const
Screen::do_display	18/screen.cc	/^void Screen::do_display(std::ostream& os) const$/;"	f	class:Screen	signature:(std::ostream& os) const
Screen::do_move	18/screen.cc	/^void Screen::do_move(index r, index c) const$/;"	f	class:Screen	signature:(index r, index c) const
Screen::get	12/Screen.h	/^    char get() const { return contents[cursor]; }$/;"	f	class:Screen	access:public	signature:() const
Screen::get	12/screen3.h	/^    char get() const { return contents[cursor]; }$/;"	f	class:Screen	access:public	signature:() const
Screen::get	12/screen3.h	/^char Screen::get(index r, index c) const$/;"	f	class:Screen	signature:(index r, index c) const
Screen::get	12/screen4.h	/^    char get() const { return contents[cursor]; }$/;"	f	class:Screen	access:public	signature:() const
Screen::get	12/screen4.h	/^char Screen::get(index r, index c) const$/;"	f	class:Screen	signature:(index r, index c) const
Screen::get	12/screen5.h	/^    char get() const { return contents[cursor]; }$/;"	f	class:Screen	access:public	signature:() const
Screen::get	12/screen5.h	/^char Screen::get(index r, index c) const$/;"	f	class:Screen	signature:(index r, index c) const
Screen::height	12/Screen.h	/^    index height, width;$/;"	m	class:Screen	access:private
Screen::height	12/screen3.h	/^    index height, width;$/;"	m	class:Screen	access:private
Screen::height	12/screen4.h	/^    int height, width;$/;"	m	class:Screen	access:private
Screen::height	12/screen5.h	/^    index height, width;$/;"	m	class:Screen	access:private
Screen::height	18/Screen.h	/^    index height, width;$/;"	m	class:Screen	access:private
Screen::index	12/Screen.h	/^    typedef std::string::size_type index;$/;"	t	class:Screen	access:public
Screen::index	12/screen3.h	/^    typedef std::string::size_type index;$/;"	t	class:Screen	access:public
Screen::index	12/screen4.h	/^    typedef std::string::size_type index;$/;"	t	class:Screen	access:public
Screen::index	12/screen5.h	/^    typedef std::string::size_type index;$/;"	t	class:Screen	access:public
Screen::index	18/Screen.h	/^    typedef std::string::size_type index;$/;"	t	class:Screen	access:public
Screen::move	12/screen3.h	/^Screen& Screen::move(index r, index c)$/;"	f	class:Screen	signature:(index r, index c)
Screen::move	12/screen4.h	/^Screen& Screen::move(index r, index c)$/;"	f	class:Screen	signature:(index r, index c)
Screen::move	12/screen5.h	/^    Screen& move(index r, index c) $/;"	f	class:Screen	access:public	signature:(index r, index c)
Screen::move	12/screen5.h	/^    const Screen& move(index r, index c) const $/;"	f	class:Screen	access:public	signature:(index r, index c) const
Screen::set	12/screen3.h	/^Screen& Screen::set(char c) $/;"	f	class:Screen	signature:(char c)
Screen::set	12/screen3.h	/^Screen& Screen::set(index r, index c, char ch)$/;"	f	class:Screen	signature:(index r, index c, char ch)
Screen::set	12/screen4.h	/^Screen& Screen::set(char c) $/;"	f	class:Screen	signature:(char c)
Screen::set	12/screen4.h	/^Screen& Screen::set(index r, index c, char ch)$/;"	f	class:Screen	signature:(index r, index c, char ch)
Screen::set	12/screen5.h	/^Screen& Screen::set(char c) $/;"	f	class:Screen	signature:(char c)
Screen::set	12/screen5.h	/^Screen& Screen::set(index r, index c, char ch)$/;"	f	class:Screen	signature:(index r, index c, char ch)
Screen::set	18/screen.cc	/^Screen& Screen::set(char c)$/;"	f	class:Screen	signature:(char c)
Screen::set	18/screen.cc	/^Screen& Screen::set(index r, index c, char ch)$/;"	f	class:Screen	signature:(index r, index c, char ch)
Screen::width	12/Screen.h	/^    index height, width;$/;"	m	class:Screen	access:private
Screen::width	12/screen3.h	/^    index height, width;$/;"	m	class:Screen	access:private
Screen::width	12/screen4.h	/^    int height, width;$/;"	m	class:Screen	access:private
Screen::width	12/screen5.h	/^    index height, width;$/;"	m	class:Screen	access:private
Screen::width	18/Screen.h	/^    index height, width;$/;"	m	class:Screen	access:private
ScreenPtr	14/ScrPtr.h	/^    ScreenPtr(Screen *p): ptr(new ScrPtr(p)) { }$/;"	f	class:ScreenPtr	access:public	signature:(Screen *p)
ScreenPtr	14/ScrPtr.h	/^    ScreenPtr(const ScreenPtr &orig):$/;"	f	class:ScreenPtr	access:public	signature:(const ScreenPtr &orig)
ScreenPtr	14/ScrPtr.h	/^class ScreenPtr {$/;"	c
ScreenPtr::ScreenPtr	14/ScrPtr.h	/^    ScreenPtr(Screen *p): ptr(new ScrPtr(p)) { }$/;"	f	class:ScreenPtr	access:public	signature:(Screen *p)
ScreenPtr::ScreenPtr	14/ScrPtr.h	/^    ScreenPtr(const ScreenPtr &orig):$/;"	f	class:ScreenPtr	access:public	signature:(const ScreenPtr &orig)
ScreenPtr::operator *	14/ScrPtr.h	/^    Screen &operator*() { return *ptr->sp; }$/;"	f	class:ScreenPtr	access:public	signature:()
ScreenPtr::operator *	14/ScrPtr.h	/^    const Screen &operator*() const { return *ptr->sp; }$/;"	f	class:ScreenPtr	access:public	signature:() const
ScreenPtr::operator ->	14/ScrPtr.h	/^    Screen *operator->() { return ptr->sp; }$/;"	f	class:ScreenPtr	access:public	signature:()
ScreenPtr::operator ->	14/ScrPtr.h	/^    const Screen *operator->() const { return ptr->sp; }$/;"	f	class:ScreenPtr	access:public	signature:() const
ScreenPtr::operator =	14/ScrPtr.h	/^ScreenPtr& ScreenPtr::operator=(const ScreenPtr &rhs)$/;"	f	class:ScreenPtr	signature:(const ScreenPtr &rhs)
ScreenPtr::ptr	14/ScrPtr.h	/^    ScrPtr *ptr;        \/\/ points to use-counted ScrPtr class$/;"	m	class:ScreenPtr	access:private
ScreenPtr::~ScreenPtr	14/ScrPtr.h	/^    ~ScreenPtr() { if (--ptr->use == 0) delete ptr; } $/;"	f	class:ScreenPtr	access:public	signature:()
SmallInt	16/Queue-assign.cc	/^    SmallInt(int i = 0): val(i)$/;"	f	class:SmallInt	access:public	signature:(int i = 0)
SmallInt	16/Queue-assign.cc	/^class SmallInt {$/;"	c	file:
SmallInt::SmallInt	16/Queue-assign.cc	/^    SmallInt(int i = 0): val(i)$/;"	f	class:SmallInt	access:public	signature:(int i = 0)
SmallInt::operator int	16/Queue-assign.cc	/^    operator int() { return val; }$/;"	f	class:SmallInt	access:public	signature:()
SmallInt::val	16/Queue-assign.cc	/^    std::size_t val;$/;"	m	class:SmallInt	file:	access:private
Stat	7/conv-enums.cc	/^enum Stat {Fail, Pass};$/;"	g	file:
Status	17/nopandaprint.h	/^    enum Status { critical, environment, improving };$/;"	g	class:Endangered	access:public
Status	17/virt.h	/^    enum Status { critical, environment, improving };$/;"	g	class:Endangered	access:public
TEXTQUERY_H	10/3ed_query.h	31;"	d
TEXTQUERY_H	10/TextQuery.h	31;"	d
TextQuery	10/3ed_query.h	/^class TextQuery {$/;"	c
TextQuery	10/TextQuery.h	/^class TextQuery {$/;"	c
TextQuery::build_exclusion_set	10/3ed_query.cc	/^set<string> TextQuery::build_exclusion_set()$/;"	f	class:TextQuery	signature:()
TextQuery::build_map	10/3ed_query.cc	/^void TextQuery::build_map()$/;"	f	class:TextQuery	signature:()
TextQuery::build_map	10/TextQuery.cc	/^void TextQuery::build_map()$/;"	f	class:TextQuery	signature:()
TextQuery::chk_ending	10/3ed_query.cc	/^int TextQuery::chk_ending(const string &word, const char *ending)$/;"	f	class:TextQuery	signature:(const string &word, const char *ending)
TextQuery::cleanup_str	10/TextQuery.cc	/^string TextQuery::cleanup_str(const string &word)$/;"	f	class:TextQuery	signature:(const string &word)
TextQuery::display_map	10/3ed_query.cc	/^void TextQuery::display_map()$/;"	f	class:TextQuery	signature:()
TextQuery::display_map	10/TextQuery.cc	/^void TextQuery::display_map()$/;"	f	class:TextQuery	signature:()
TextQuery::exclude_word	10/3ed_query.cc	/^bool TextQuery::exclude_word(const string &word)$/;"	f	class:TextQuery	signature:(const string &word)
TextQuery::exclusion_set	10/3ed_query.cc	/^set<string> TextQuery::exclusion_set = build_exclusion_set();$/;"	m	class:TextQuery	file:
TextQuery::exclusion_set	10/3ed_query.h	/^    static std::set<std::string> exclusion_set;$/;"	m	class:TextQuery	access:private
TextQuery::line_no	10/3ed_query.h	/^    typedef std::vector<std::string>::size_type line_no;$/;"	t	class:TextQuery	access:public
TextQuery::line_no	10/TextQuery.h	/^    typedef std::vector<std::string>::size_type line_no;$/;"	t	class:TextQuery	access:public
TextQuery::lines_of_text	10/3ed_query.h	/^    std::vector<std::string> lines_of_text; $/;"	m	class:TextQuery	access:private
TextQuery::lines_of_text	10/TextQuery.h	/^    std::vector<std::string> lines_of_text; $/;"	m	class:TextQuery	access:private
TextQuery::location	10/3ed_query.h	/^    typedef std::pair<line_no,str_size> location;$/;"	t	class:TextQuery	access:public
TextQuery::read_file	10/3ed_query.h	/^    void read_file(std::ifstream &is) $/;"	f	class:TextQuery	access:public	signature:(std::ifstream &is)
TextQuery::read_file	10/TextQuery.h	/^    void read_file(std::ifstream &is) $/;"	f	class:TextQuery	access:public	signature:(std::ifstream &is)
TextQuery::run_query	10/3ed_query.cc	/^vector<TextQuery::location> TextQuery::run_query(const string &s)$/;"	f	class:TextQuery	signature:(const string &s)
TextQuery::run_query	10/TextQuery.cc	/^TextQuery::run_query(const string &query_word) const$/;"	f	class:TextQuery	signature:(const string &query_word) const
TextQuery::size	10/3ed_query.h	/^    str_size size() const { return lines_of_text.size(); }$/;"	f	class:TextQuery	access:public	signature:() const
TextQuery::size	10/TextQuery.h	/^    str_size size() const { return lines_of_text.size(); }$/;"	f	class:TextQuery	access:public	signature:() const
TextQuery::skip_whitespace	10/3ed_query.cc	/^TextQuery::skip_whitespace(const string &line, str_size pos)$/;"	f	class:TextQuery	signature:(const string &line, str_size pos)
TextQuery::store_file	10/3ed_query.cc	/^void TextQuery::store_file(ifstream &is)$/;"	f	class:TextQuery	signature:(ifstream &is)
TextQuery::store_file	10/TextQuery.cc	/^void TextQuery::store_file(ifstream &is)$/;"	f	class:TextQuery	signature:(ifstream &is)
TextQuery::str_size	10/3ed_query.h	/^    typedef std::string::size_type str_size;$/;"	t	class:TextQuery	access:public
TextQuery::str_size	10/TextQuery.h	/^    typedef std::string::size_type str_size;$/;"	t	class:TextQuery	access:public
TextQuery::strip_caps	10/3ed_query.cc	/^void TextQuery::strip_caps(string &line)$/;"	f	class:TextQuery	signature:(string &line)
TextQuery::strip_punct	10/3ed_query.cc	/^void TextQuery::strip_punct(string &line)$/;"	f	class:TextQuery	signature:(string &line)
TextQuery::strip_suffixes	10/3ed_query.cc	/^void TextQuery::strip_suffixes(string &word)$/;"	f	class:TextQuery	signature:(string &word)
TextQuery::suffix_s	10/3ed_query.cc	/^void TextQuery::suffix_s(string &word)$/;"	f	class:TextQuery	signature:(string &word)
TextQuery::test_insert	10/3ed_query.cc	/^void TextQuery::test_insert(const string &line, str_size prev_pos, $/;"	f	class:TextQuery	signature:(const string &line, str_size prev_pos, str_size pos, line_no line_num)
TextQuery::text_line	10/3ed_query.h	/^    std::string text_line(line_no line) { return lines_of_text[line]; }$/;"	f	class:TextQuery	access:public	signature:(line_no line)
TextQuery::text_line	10/TextQuery.cc	/^string TextQuery::text_line(line_no line) const$/;"	f	class:TextQuery	signature:(line_no line) const
TextQuery::whitespace_chars	10/3ed_query.h	/^    static std::string whitespace_chars;     $/;"	m	class:TextQuery	access:private
TextQuery::whitespace_chars	10/TextQuery.h	/^    static std::string whitespace_chars;     $/;"	m	class:TextQuery	access:private
TextQuery::word_map	10/3ed_query.h	/^    std::map< std::string, std::vector<location> > word_map;  $/;"	m	class:TextQuery	access:private
TextQuery::word_map	10/TextQuery.h	/^    std::map< std::string, std::set<line_no> > word_map;  $/;"	m	class:TextQuery	access:private
Tokens	7/enum-match.cc	/^enum Tokens {INLINE = 128, VIRTUAL = 129};$/;"	g	file:
U_Ptr	13/smart-ptr.cc	/^	U_Ptr(int *p): ip(p), use(1) { }$/;"	f	class:U_Ptr	file:	access:private	signature:(int *p)
U_Ptr	13/smart-ptr.cc	/^class U_Ptr {$/;"	c	file:
U_Ptr::U_Ptr	13/smart-ptr.cc	/^	U_Ptr(int *p): ip(p), use(1) { }$/;"	f	class:U_Ptr	file:	access:private	signature:(int *p)
U_Ptr::ip	13/smart-ptr.cc	/^	int *ip;$/;"	m	class:U_Ptr	file:	access:private
U_Ptr::use	13/smart-ptr.cc	/^	size_t use;$/;"	m	class:U_Ptr	file:	access:private
U_Ptr::~U_Ptr	13/smart-ptr.cc	/^	~U_Ptr() { delete ip; }$/;"	f	class:U_Ptr	file:	access:private	signature:()
VIRTUAL	7/enum-match.cc	/^enum Tokens {INLINE = 128, VIRTUAL = 129};$/;"	e	enum:Tokens	file:
Vector	18/vec-opnew.cc	/^    Vector(): elements(0), first_free(0), end(0) { }$/;"	f	class:Vector	access:public	signature:()
Vector	18/vec-opnew.cc	/^template <class T> class Vector {$/;"	c	file:
Vector	18/vec.cc	/^    Vector(): elements(0), first_free(0), end(0) { }$/;"	f	class:Vector	access:public	signature:()
Vector	18/vec.cc	/^template <class T> class Vector {$/;"	c	file:
Vector::Vector	18/vec-opnew.cc	/^    Vector(): elements(0), first_free(0), end(0) { }$/;"	f	class:Vector	access:public	signature:()
Vector::Vector	18/vec.cc	/^    Vector(): elements(0), first_free(0), end(0) { }$/;"	f	class:Vector	access:public	signature:()
Vector::alloc	18/vec-opnew.cc	/^    static std::allocator<T> alloc; \/\/ object to get raw memory$/;"	m	class:Vector	file:	access:private
Vector::alloc	18/vec.cc	/^    static std::allocator<T> alloc; \/\/ member to handle allocation$/;"	m	class:Vector	file:	access:private
Vector::capacity	18/vec.cc	/^    size_t capacity() const { return end - elements; }$/;"	f	class:Vector	access:public	signature:() const
Vector::elements	18/vec-opnew.cc	/^    T* elements;       \/\/ pointer to first element in the array$/;"	m	class:Vector	file:	access:private
Vector::elements	18/vec.cc	/^    T* elements;       \/\/ pointer to first element in the array$/;"	m	class:Vector	file:	access:private
Vector::end	18/vec-opnew.cc	/^    T* end;            \/\/ pointer to one past the end of the array$/;"	m	class:Vector	file:	access:private
Vector::end	18/vec.cc	/^    T* end;            \/\/ pointer to one past the end of the array$/;"	m	class:Vector	file:	access:private
Vector::first_free	18/vec-opnew.cc	/^    T* first_free;     \/\/ pointer to first free element in the array$/;"	m	class:Vector	file:	access:private
Vector::first_free	18/vec.cc	/^    T* first_free;     \/\/ pointer to first free element in the array$/;"	m	class:Vector	file:	access:private
Vector::operator []	18/vec-opnew.cc	/^    T& operator[](size_t n) { return elements[n]; }$/;"	f	class:Vector	access:public	signature:(size_t n)
Vector::operator []	18/vec-opnew.cc	/^    const T& operator[](size_t n) const { return elements[n]; }$/;"	f	class:Vector	access:public	signature:(size_t n) const
Vector::operator []	18/vec.cc	/^    T& operator[](size_t n) { return elements[n]; }$/;"	f	class:Vector	access:public	signature:(size_t n)
Vector::operator []	18/vec.cc	/^    const T& operator[](size_t n) const { return elements[n]; }$/;"	f	class:Vector	access:public	signature:(size_t n) const
Vector::push_back	18/vec-opnew.cc	/^void Vector<T>::push_back(const T& t)$/;"	f	class:Vector	signature:(const T& t)
Vector::push_back	18/vec.cc	/^template <class T> void Vector<T>::push_back(const T& t)$/;"	f	class:Vector	signature:(const T& t)
Vector::reallocate	18/vec-opnew.cc	/^void Vector<T>::reallocate()$/;"	f	class:Vector	signature:()
Vector::reallocate	18/vec.cc	/^template <class T> void Vector<T>::reallocate()$/;"	f	class:Vector	signature:()
Vector::size	18/vec.cc	/^    size_t size() const { return first_free - elements; }$/;"	f	class:Vector	access:public	signature:() const
WordQuery	15/Query.h	/^    WordQuery(const std::string &s): query_word(s) { }$/;"	f	class:WordQuery	access:private	signature:(const std::string &s)
WordQuery	15/Query.h	/^class WordQuery: public Query_base {$/;"	c	inherits:Query_base
WordQuery	16/Query.h	/^    WordQuery(const std::string &s): query_word(s) { }$/;"	f	class:WordQuery	access:private	signature:(const std::string &s)
WordQuery	16/Query.h	/^class WordQuery: public Query_base {$/;"	c	inherits:Query_base
WordQuery::WordQuery	15/Query.h	/^    WordQuery(const std::string &s): query_word(s) { }$/;"	f	class:WordQuery	access:private	signature:(const std::string &s)
WordQuery::WordQuery	16/Query.h	/^    WordQuery(const std::string &s): query_word(s) { }$/;"	f	class:WordQuery	access:private	signature:(const std::string &s)
WordQuery::display	15/Query.h	/^    std::ostream& display (std::ostream &os) const $/;"	f	class:WordQuery	access:private	signature:(std::ostream &os) const
WordQuery::display	16/Query.h	/^    std::ostream& display (std::ostream &os) const $/;"	f	class:WordQuery	access:private	signature:(std::ostream &os) const
WordQuery::eval	15/Query.h	/^    std::set<line_no> eval(const TextQuery &t) const$/;"	f	class:WordQuery	access:private	signature:(const TextQuery &t) const
WordQuery::eval	16/Query.h	/^    std::set<line_no> eval(const TextQuery &t) const$/;"	f	class:WordQuery	access:private	signature:(const TextQuery &t) const
WordQuery::query_word	15/Query.h	/^    std::string query_word;   \/\/ word for which to search $/;"	m	class:WordQuery	access:private
WordQuery::query_word	16/Query.h	/^    std::string query_word;$/;"	m	class:WordQuery	access:private
ZooAnimal	17/Animal.h	/^    ZooAnimal(std::string animal, bool exhibit,$/;"	f	class:ZooAnimal	access:public	signature:(std::string animal, bool exhibit, std::string family)
ZooAnimal	17/Animal.h	/^class ZooAnimal {$/;"	c
ZooAnimal	17/nopandaprint.h	/^    ZooAnimal(std::string animal, bool exhibit,$/;"	f	class:ZooAnimal	access:public	signature:(std::string animal, bool exhibit, std::string family)
ZooAnimal	17/nopandaprint.h	/^class ZooAnimal {$/;"	c
ZooAnimal	17/virt.h	/^    ZooAnimal() { }$/;"	f	class:ZooAnimal	access:public	signature:()
ZooAnimal	17/virt.h	/^    ZooAnimal(std::string animal, bool exhibit,$/;"	f	class:ZooAnimal	access:public	signature:(std::string animal, bool exhibit, std::string family)
ZooAnimal	17/virt.h	/^class ZooAnimal {$/;"	c
ZooAnimal::ZooAnimal	17/Animal.h	/^    ZooAnimal(std::string animal, bool exhibit,$/;"	f	class:ZooAnimal	access:public	signature:(std::string animal, bool exhibit, std::string family)
ZooAnimal::ZooAnimal	17/nopandaprint.h	/^    ZooAnimal(std::string animal, bool exhibit,$/;"	f	class:ZooAnimal	access:public	signature:(std::string animal, bool exhibit, std::string family)
ZooAnimal::ZooAnimal	17/virt.h	/^    ZooAnimal() { }$/;"	f	class:ZooAnimal	access:public	signature:()
ZooAnimal::ZooAnimal	17/virt.h	/^    ZooAnimal(std::string animal, bool exhibit,$/;"	f	class:ZooAnimal	access:public	signature:(std::string animal, bool exhibit, std::string family)
ZooAnimal::exhibit_stat	17/Animal.h	/^    bool        exhibit_stat;$/;"	m	class:ZooAnimal	access:protected
ZooAnimal::exhibit_stat	17/nopandaprint.h	/^    bool        exhibit_stat;$/;"	m	class:ZooAnimal	access:protected
ZooAnimal::exhibit_stat	17/virt.h	/^    bool        exhibit_stat;$/;"	m	class:ZooAnimal	access:protected
ZooAnimal::fam_name	17/Animal.h	/^    std::string fam_name;$/;"	m	class:ZooAnimal	access:protected
ZooAnimal::fam_name	17/nopandaprint.h	/^    std::string fam_name;$/;"	m	class:ZooAnimal	access:protected
ZooAnimal::fam_name	17/virt.h	/^    std::string fam_name;$/;"	m	class:ZooAnimal	access:protected
ZooAnimal::family_name	17/Animal.h	/^    std::string family_name() const { return fam_name; }$/;"	f	class:ZooAnimal	access:public	signature:() const
ZooAnimal::family_name	17/nopandaprint.h	/^    std::string family_name() const { return fam_name; }$/;"	f	class:ZooAnimal	access:public	signature:() const
ZooAnimal::family_name	17/virt.h	/^    std::string family_name() const { return fam_name; }$/;"	f	class:ZooAnimal	access:public	signature:() const
ZooAnimal::name	17/Animal.h	/^    std::string name() const { return nm; }$/;"	f	class:ZooAnimal	access:public	signature:() const
ZooAnimal::name	17/nopandaprint.h	/^    std::string name() const { return nm; }$/;"	f	class:ZooAnimal	access:public	signature:() const
ZooAnimal::name	17/virt.h	/^    std::string name() const { return nm; }$/;"	f	class:ZooAnimal	access:public	signature:() const
ZooAnimal::nm	17/Animal.h	/^    std::string nm;$/;"	m	class:ZooAnimal	access:protected
ZooAnimal::nm	17/nopandaprint.h	/^    std::string nm;$/;"	m	class:ZooAnimal	access:protected
ZooAnimal::nm	17/virt.h	/^    std::string nm;$/;"	m	class:ZooAnimal	access:protected
ZooAnimal::onExhibit	17/Animal.h	/^    bool onExhibit() const { return exhibit_stat; }$/;"	f	class:ZooAnimal	access:public	signature:() const
ZooAnimal::onExhibit	17/nopandaprint.h	/^    bool onExhibit() const { return exhibit_stat; }$/;"	f	class:ZooAnimal	access:public	signature:() const
ZooAnimal::onExhibit	17/virt.h	/^    bool onExhibit() const { return exhibit_stat; }$/;"	f	class:ZooAnimal	access:public	signature:() const
a1	7/conv-enums.cc	/^enum e1 {a1, b1, c1};$/;"	e	enum:e1	file:
a2	7/conv-enums.cc	/^enum e2 {a2, b2, c2=0x80000000};$/;"	e	enum:e2	file:
absInt	14/absInt.cc	/^struct absInt {$/;"	s	file:
absInt::operator ()	14/absInt.cc	/^    int operator()(int val) {$/;"	f	struct:absInt	access:public	signature:(int val)
access_ctr	12/screen5.h	/^    mutable size_t access_ctr; \/\/ may change in a const members$/;"	m	class:Screen	access:private
accountType	12/Account.h	/^    static const std::string accountType;$/;"	m	class:Account	access:private
addFldr	13/Folder.h	/^    void addFldr(Folder *f) { folders.insert(f); }$/;"	f	class:Message	access:private	signature:(Folder *f)
addMsg	13/Folder.h	/^    void addMsg(Message *m) { msgs.insert(m); }$/;"	f	class:Folder	access:private	signature:(Message *m)
add_item	15/Basket.h	/^    void add_item(const Sales_item &item) $/;"	f	class:Basket	access:public	signature:(const Sales_item &item)
add_item	15/Basket2.h	/^    void add_item(const Sales_item &item) $/;"	f	class:Basket	access:public	signature:(const Sales_item &item)
add_item	16/Basket.h	/^    void add_item(const Sales_item &item) $/;"	f	class:Basket	access:public	signature:(const Sales_item &item)
alloc	18/vec-opnew.cc	/^    static std::allocator<T> alloc; \/\/ object to get raw memory$/;"	m	class:Vector	file:	access:private
alloc	18/vec.cc	/^    static std::allocator<T> alloc; \/\/ member to handle allocation$/;"	m	class:Vector	file:	access:private
alloc_mem	18/CachedObj.h	/^    static std::allocator<T> alloc_mem;$/;"	m	class:CachedObj	access:private
alt_word_count	10/word_count.cc	/^void alt_word_count()$/;"	f	signature:()
amount	12/Account.h	/^    double amount; $/;"	m	class:Account	access:private
animal_status	17/nopandaprint.h	/^    Status animal_status;$/;"	m	class:Endangered	access:private
animal_status	17/virt.h	/^    Status animal_status;$/;"	m	class:Endangered	access:private
append	2/print_enum.cc	/^enum open_modes {input = 1, output, append};$/;"	e	enum:open_modes	file:
append	2/print_enum2.cc	/^enum open_modes {input = 1, output, append};$/;"	e	enum:open_modes	file:
applyint	12/Account.h	/^    void applyint() { amount += amount * interestRate; }$/;"	f	class:Account	access:public	signature:()
arr1	6/copy_array.cc	/^int arr1[] = {0,1,2,3,4,5,6,7,8,9};$/;"	v
arr_size	6/copy_array.cc	/^const size_t arr_size = 7;$/;"	v
assign	16/Queue.cc	/^void Queue<T>::assign(Iter beg, Iter end)$/;"	f	class:Queue	signature:(Iter beg, Iter end)
assign	16/newQueue.h	/^    template <class Iter> void assign(Iter beg, Iter end)$/;"	f	class:Queue	access:public	signature:(Iter beg, Iter end)
assign	18/Queue.cc	/^void Queue<T>::assign(Iter beg, Iter end)$/;"	f	class:Queue	signature:(Iter beg, Iter end)
avg_price	1/Sales_item.h	/^double Sales_item::avg_price() const$/;"	f	class:Sales_item	signature:() const
avg_price	14/Sales_item.cc	/^double Sales_item::avg_price() const$/;"	f	class:Sales_item	signature:() const
avg_price	17/Sales_item.cc	/^double Sales_item::avg_price() const$/;"	f	class:Sales_item	signature:() const
b1	7/conv-enums.cc	/^enum e1 {a1, b1, c1};$/;"	e	enum:e1	file:
b2	7/conv-enums.cc	/^enum e2 {a2, b2, c2=0x80000000};$/;"	e	enum:e2	file:
balance	12/Account.h	/^    double balance() { return amount; }$/;"	f	class:Account	access:public	signature:()
beg	14/CheckedPtr.h	/^    int* beg;    \/\/ pointer to beginning of the array$/;"	m	class:CheckedPtr	access:private
book	15/Basket.h	/^    std::string book() const { return isbn; }$/;"	f	class:Item_base	access:public	signature:() const
book	15/Basket2.h	/^    std::string book() const { return isbn; }$/;"	f	class:Item_base	access:public	signature:() const
book	16/Basket.h	/^    std::string book() const { return isbn; }$/;"	f	class:Item_base	access:public	signature:() const
book	17/Sales_item.h	/^    std::string book() const { return isbn; }$/;"	f	class:Sales_item	access:public	signature:() const
bound	14/count-size.cc	/^    size_t bound;$/;"	m	class:EQ	file:	access:private
bound	14/count-size.cc	/^    std::string::size_type bound;$/;"	m	class:GT_cls	file:	access:private
build_exclusion_set	10/3ed_query.cc	/^set<string> TextQuery::build_exclusion_set()$/;"	f	class:TextQuery	signature:()
build_map	10/3ed_query.cc	/^void TextQuery::build_map()$/;"	f	class:TextQuery	signature:()
build_map	10/TextQuery.cc	/^void TextQuery::build_map()$/;"	f	class:TextQuery	signature:()
build_textfile	15/get_print.cc	/^TextQuery build_textfile(const string &filename)$/;"	f	signature:(const string &filename)
c1	7/conv-enums.cc	/^enum e1 {a1, b1, c1};$/;"	e	enum:e1	file:
c2	7/conv-enums.cc	/^enum e2 {a2, b2, c2=0x80000000};$/;"	e	enum:e2	file:
c_array	9/ctors.cc	/^char c_array[] = "World!!!!"; \/\/ null-terminated$/;"	v
c_vec	9/str_assignOps.cc	/^vector<char> c_vec;$/;"	v
capacity	18/vec.cc	/^    size_t capacity() const { return end - elements; }$/;"	f	class:Vector	access:public	signature:() const
chk_ending	10/3ed_query.cc	/^int TextQuery::chk_ending(const string &word, const char *ending)$/;"	f	class:TextQuery	signature:(const string &word, const char *ending)
chunk	18/CachedObj.h	/^    static const std::size_t chunk;$/;"	m	class:CachedObj	access:private
cleanup_str	10/TextQuery.cc	/^string TextQuery::cleanup_str(const string &word)$/;"	f	class:TextQuery	signature:(const string &word)
clone	15/Basket.h	/^    Bulk_item* clone() const $/;"	f	class:Bulk_item	access:public	signature:() const
clone	15/Basket.h	/^    Lim_item* clone() const { return new Lim_item(*this); }$/;"	f	class:Lim_item	access:public	signature:() const
clone	15/Basket.h	/^    virtual Item_base* clone() const $/;"	f	class:Item_base	access:public	signature:() const
clone	15/Basket2.h	/^    Bulk_item* clone() const $/;"	f	class:Bulk_item	access:public	signature:() const
clone	15/Basket2.h	/^    Lim_item* clone() const { return new Lim_item(*this); }$/;"	f	class:Lim_item	access:public	signature:() const
clone	15/Basket2.h	/^    virtual Item_base* clone() const $/;"	f	class:Item_base	access:public	signature:() const
clone	16/Basket.h	/^    Bulk_item* clone() const $/;"	f	class:Bulk_item	access:public	signature:() const
clone	16/Basket.h	/^    Lim_item* clone() const { return new Lim_item(*this); }$/;"	f	class:Lim_item	access:public	signature:() const
clone	16/Basket.h	/^    virtual Item_base* clone() const $/;"	f	class:Item_base	access:public	signature:() const
combine	11/innerprod.cc	/^string combine(string x, string y)$/;"	f	signature:(string x, string y)
compare	15/Basket.h	/^compare(const Sales_item &lhs, const Sales_item &rhs) $/;"	f	signature:(const Sales_item &lhs, const Sales_item &rhs)
compare	15/Basket2.h	/^compare(const Sales_item &lhs, const Sales_item &rhs) $/;"	f	signature:(const Sales_item &lhs, const Sales_item &rhs)
compare	16/compare.cc	/^int compare(const T &v1, const T &v2)$/;"	f	signature:(const T &v1, const T &v2)
compare	16/compare.cc	/^int compare(const double &v1, const double &v2)$/;"	f	signature:(const double &v1, const double &v2)
compare	16/compare.cc	/^int compare(const string &v1, const string &v2)$/;"	f	signature:(const string &v1, const string &v2)
compare	16/compare.cc	/^int compare<const char*>(const char* const &v1, $/;"	f	signature:(const char* const &v1, const char* const &v2)
compare	16/overcomp.cc	/^int compare(const char* v1, const char* v2)$/;"	f	signature:(const char* v1, const char* v2)
compare	16/overcomp.cc	/^template <class U, class V> int compare(U beg1, U end1, V beg2)$/;"	f	signature:(U beg1, U end1, V beg2)
compare	16/overcomp.cc	/^template <typename T> int compare(const T &v1, const T &v2)$/;"	f	signature:(const T &v1, const T &v2)
compare	16/overcomp2.cc	/^int compare(U beg1, U end1, V beg2)$/;"	f	signature:(U beg1, U end1, V beg2)
compare	16/overcomp2.cc	/^int compare(char* v1, char* v2)$/;"	f	signature:(char* v1, char* v2)
compare	16/overcomp2.cc	/^int compare(const T &v1, const T &v2)$/;"	f	signature:(const T &v1, const T &v2)
compare	16/overcomp2.cc	/^int compare(const char* v1, const char* v2)$/;"	f	signature:(const char* v1, const char* v2)
compare	17/Sales_item.h	/^compare(const Sales_item &lhs, const Sales_item &rhs)$/;"	f	signature:(const Sales_item &lhs, const Sales_item &rhs)
compare2	16/overcomp.cc	/^int compare2(const char* v1, const char* v2)$/;"	f	signature:(const char* v1, const char* v2)
compare2	16/overcomp.cc	/^template <typename T> int compare2(T v1, T v2)$/;"	f	signature:(T v1, T v2)
concatenate	11/innerprod.cc	/^string concatenate(string x, string y)$/;"	f	signature:(string x, string y)
const_iter	15/Basket.h	/^    typedef set_type::const_iterator const_iter;$/;"	t	class:Basket	access:public
const_iter	15/Basket2.h	/^    typedef std::multiset<Sales_item, Comp>::const_iterator const_iter;$/;"	t	class:Basket	access:public
const_iter	16/Basket.h	/^    typedef std::multiset<Sales_item>::const_iterator const_iter;$/;"	t	class:Basket	access:public
contents	12/Screen.h	/^    std::string contents;$/;"	m	class:Screen	access:private
contents	12/screen3.h	/^    std::string contents;$/;"	m	class:Screen	access:private
contents	12/screen4.h	/^    std::string contents;$/;"	m	class:Screen	access:private
contents	12/screen5.h	/^    std::string contents;$/;"	m	class:Screen	access:private
contents	13/Folder.h	/^    std::string contents;      \/\/ actual message text$/;"	m	class:Message	access:private
contents	18/Screen.h	/^    std::string contents;$/;"	m	class:Screen	access:private
copy	18/Queue.cc	/^Queue<Type>::copy(const Queue &orig)$/;"	f	class:Queue	signature:(const Queue &orig)
copy	18/Queue.cc	/^void Queue<Type>::copy(Iter beg, Iter end)$/;"	f	class:Queue	signature:(Iter beg, Iter end)
copy	18/statmem.cc	/^Queue<Type>::copy(const Queue &orig)$/;"	f	class:Queue	signature:(const Queue &orig)
copy	18/statmem.cc	/^void Queue<Type>::copy(Iter beg, Iter end)$/;"	f	class:Queue	signature:(Iter beg, Iter end)
copy_elems	16/Queue.cc	/^void Queue<Type>::copy_elems(It beg, It end)$/;"	f	class:Queue	signature:(It beg, It end)
copy_elems	16/Queue.cc	/^void Queue<Type>::copy_elems(const Queue &orig)$/;"	f	class:Queue	signature:(const Queue &orig)
copy_elems	18/MS_statmem.cc	/^    template <class Iter> void copy_elems(Iter, Iter)$/;"	f	class:Queue	file:	access:private	signature:(Iter, Iter)
copy_elems	18/MS_statmem.cc	/^Queue<Type>::copy_elems(const Queue &orig)$/;"	f	class:Queue	signature:(const Queue &orig)
copy_msgs	13/Folder.cc	/^void Folder::copy_msgs(const set<Message*> &m)$/;"	f	class:Folder	signature:(const set<Message*> &m)
count_calls	7/count-calls.cc	/^size_t count_calls()$/;"	f	signature:()
cp	9/ctors.cc	/^char *cp = "Hiya";            \/\/ null-terminated array$/;"	v
cplusplus_primer	17/cplusplus_primer.h	/^namespace cplusplus_primer {$/;"	n
cplusplus_primer::Query	17/cplusplus_primer.h	/^    class Query { $/;"	c	namespace:cplusplus_primer
cplusplus_primer::Query_base	17/cplusplus_primer.h	/^    class Query_base { \/* . . . *\/};$/;"	c	namespace:cplusplus_primer
cplusplus_primer::Sales_item	17/cplusplus_primer.h	/^    class Sales_item { \/* . . . *\/};$/;"	c	namespace:cplusplus_primer
critical	17/nopandaprint.h	/^    enum Status { critical, environment, improving };$/;"	e	enum:Endangered::Status
critical	17/virt.h	/^    enum Status { critical, environment, improving };$/;"	e	enum:Endangered::Status
curr	14/CheckedPtr.h	/^    int* curr;   \/\/ current position within the array$/;"	m	class:CheckedPtr	access:private
cursor	12/Screen.h	/^    index cursor;$/;"	m	class:Screen	access:private
cursor	12/screen3.h	/^    index cursor;$/;"	m	class:Screen	access:private
cursor	12/screen4.h	/^    index cursor;$/;"	m	class:Screen	access:private
cursor	12/screen5.h	/^    index cursor;  $/;"	m	class:Screen	access:private
cursor	18/Screen.h	/^    index cursor;$/;"	m	class:Screen	access:private
daily_tbl	12/Account.h	/^    double daily_tbl[period]; \/\/ ok: period is constant expression$/;"	m	class:Account	access:private
dance_flag	17/virt.h	/^    DanceType dance_flag;$/;"	m	class:Bear	access:private
dancetype	17/Animal.h	/^    DanceType   dancetype;$/;"	m	class:Bear	access:private
dancetype	17/nopandaprint.h	/^    DanceType   dancetype;$/;"	m	class:Bear	access:private
data	14/subscript.cc	/^    vector<int> data;$/;"	m	class:Foo	file:	access:private
debug_print	13/Folder.cc	/^void Folder::debug_print()$/;"	f	class:Folder	signature:()
debug_print	13/Folder.cc	/^void Message::debug_print()$/;"	f	class:Message	signature:()
decr_use	15/Basket.h	/^    void decr_use() $/;"	f	class:Sales_item	access:private	signature:()
decr_use	15/Basket2.h	/^    void decr_use() $/;"	f	class:Sales_item	access:private	signature:()
decr_use	15/Query.h	/^    void decr_use() $/;"	f	class:Query	access:private	signature:()
destroy	16/Queue.cc	/^template <class Type> void Queue<Type>::destroy()$/;"	f	class:Queue	signature:()
destroy	18/MS_statmem.cc	/^Queue<Type>::destroy()$/;"	f	class:Queue	signature:()
destroy	18/Queue.cc	/^Queue<Type>::destroy()$/;"	f	class:Queue	signature:()
destroy	18/statmem.cc	/^Queue<Type>::destroy()$/;"	f	class:Queue	signature:()
discount	15/Basket.h	/^    double discount;       \/\/ fractional discount to apply$/;"	m	class:Bulk_item	access:private
discount	15/Basket.h	/^    double discount;       \/\/ fractional discount to apply$/;"	m	class:Lim_item	access:private
discount	15/Basket2.h	/^    double discount;       \/\/ fractional discount to apply$/;"	m	class:Disc_item	access:protected
discount	16/Basket.h	/^    double discount;       \/\/ fractional discount to apply$/;"	m	class:Bulk_item	access:private
discount	16/Basket.h	/^    double discount;       \/\/ fractional discount to apply$/;"	m	class:Lim_item	access:private
discount_policy	15/Basket.h	/^    std::pair<size_t, double> discount_policy() const$/;"	f	class:Bulk_item	access:public	signature:() const
discount_policy	15/Basket.h	/^    std::pair<size_t, double> discount_policy() const$/;"	f	class:Lim_item	access:public	signature:() const
discount_policy	15/Basket2.h	/^    std::pair<size_t, double> discount_policy() const$/;"	f	class:Bulk_item	access:public	signature:() const
discount_policy	15/Basket2.h	/^    std::pair<size_t, double> discount_policy() const$/;"	f	class:Disc_item	access:public	signature:() const
discount_policy	15/Basket2.h	/^    std::pair<size_t, double> discount_policy() const$/;"	f	class:Lim_item	access:public	signature:() const
discount_policy	16/Basket.h	/^    std::pair<size_t, double> discount_policy() const$/;"	f	class:Bulk_item	access:public	signature:() const
discount_policy	16/Basket.h	/^    std::pair<size_t, double> discount_policy() const$/;"	f	class:Lim_item	access:public	signature:() const
display	12/screen3.h	/^    Screen& display(std::ostream &os) $/;"	f	class:Screen	access:public	signature:(std::ostream &os)
display	12/screen3.h	/^    const Screen& display(std::ostream &os) const$/;"	f	class:Screen	access:public	signature:(std::ostream &os) const
display	12/screen4.h	/^const Screen& Screen::display(std::ostream& os) const$/;"	f	class:Screen	signature:(std::ostream& os) const
display	15/Basket.cc	/^void Basket::display(ostream &os) const$/;"	f	class:Basket	signature:(ostream &os) const
display	15/Query.h	/^    std::ostream &display(std::ostream &os) const$/;"	f	class:Query	access:public	signature:(std::ostream &os) const
display	15/Query.h	/^    std::ostream& display (std::ostream &os) const $/;"	f	class:WordQuery	access:private	signature:(std::ostream &os) const
display	15/Query.h	/^    std::ostream& display(std::ostream &os) const$/;"	f	class:BinaryQuery	access:protected	signature:(std::ostream &os) const
display	15/Query.h	/^    std::ostream& display(std::ostream &os) const$/;"	f	class:NotQuery	access:private	signature:(std::ostream &os) const
display	15/V2_Basket.cc	/^void Basket::display(ostream &os) const$/;"	f	class:Basket	signature:(ostream &os) const
display	16/Basket.cc	/^void Basket::display(ostream &os) const$/;"	f	class:Basket	signature:(ostream &os) const
display	16/Query.h	/^    std::ostream &display(std::ostream &os) const$/;"	f	class:Query	access:public	signature:(std::ostream &os) const
display	16/Query.h	/^    std::ostream& display (std::ostream &os) const $/;"	f	class:WordQuery	access:private	signature:(std::ostream &os) const
display	16/Query.h	/^    std::ostream& display(std::ostream &os) const$/;"	f	class:BinaryQuery	access:protected	signature:(std::ostream &os) const
display	16/Query.h	/^    std::ostream& display(std::ostream &os) const$/;"	f	class:NotQuery	access:private	signature:(std::ostream &os) const
display_map	10/3ed_query.cc	/^void TextQuery::display_map()$/;"	f	class:TextQuery	signature:()
display_map	10/TextQuery.cc	/^void TextQuery::display_map()$/;"	f	class:TextQuery	signature:()
do_display	12/screen3.h	/^     void do_display(std::ostream &os) const$/;"	f	class:Screen	access:private	signature:(std::ostream &os) const
do_display	12/screen5.h	/^void Screen::do_display(std::ostream& os) const$/;"	f	class:Screen	signature:(std::ostream& os) const
do_display	18/screen.cc	/^void Screen::do_display(std::ostream& os) const$/;"	f	class:Screen	signature:(std::ostream& os) const
do_move	18/screen.cc	/^void Screen::do_move(index r, index c) const$/;"	f	class:Screen	signature:(index r, index c) const
e1	7/conv-enums.cc	/^enum e1 {a1, b1, c1};$/;"	g	file:
e2	7/conv-enums.cc	/^enum e2 {a2, b2, c2=0x80000000};$/;"	g	file:
elements	18/vec-opnew.cc	/^    T* elements;       \/\/ pointer to first element in the array$/;"	m	class:Vector	file:	access:private
elements	18/vec.cc	/^    T* elements;       \/\/ pointer to first element in the array$/;"	m	class:Vector	file:	access:private
empty	16/Queue.h	/^    bool empty() const {          \/\/ true if no elements in the Queue$/;"	f	class:Queue	access:public	signature:() const
empty	16/char_queue.h	/^    bool empty() const       {return real_queue.empty();}$/;"	f	class:Queue	access:public	signature:() const
empty	16/newQueue.h	/^    bool empty() const       { return items.empty(); }$/;"	f	class:Queue	access:public	signature:() const
empty	18/MS_statmem.cc	/^    bool empty() const {    \/\/ true if no elements in the Queue$/;"	f	class:Queue	access:public	signature:() const
empty	18/Queue.h	/^    bool empty() const {    \/\/ true if no elements in the Queue$/;"	f	class:Queue	access:public	signature:() const
empty	18/statmem.cc	/^    bool empty() const {    \/\/ true if no elements in the Queue$/;"	f	class:Queue	access:public	signature:() const
empty_msgs	13/Folder.cc	/^void Folder::empty_msgs()$/;"	f	class:Folder	signature:()
end	14/CheckedPtr.h	/^    int* end;    \/\/ one past the end of the array$/;"	m	class:CheckedPtr	access:private
end	18/vec-opnew.cc	/^    T* end;            \/\/ pointer to one past the end of the array$/;"	m	class:Vector	file:	access:private
end	18/vec.cc	/^    T* end;            \/\/ pointer to one past the end of the array$/;"	m	class:Vector	file:	access:private
environment	17/nopandaprint.h	/^    enum Status { critical, environment, improving };$/;"	e	enum:Endangered::Status
environment	17/virt.h	/^    enum Status { critical, environment, improving };$/;"	e	enum:Endangered::Status
eval	15/Query.cc	/^AndQuery::eval(const TextQuery& file) const$/;"	f	class:AndQuery	signature:(const TextQuery& file) const
eval	15/Query.cc	/^NotQuery::eval(const TextQuery& file) const$/;"	f	class:NotQuery	signature:(const TextQuery& file) const
eval	15/Query.cc	/^OrQuery::eval(const TextQuery& file) const$/;"	f	class:OrQuery	signature:(const TextQuery& file) const
eval	15/Query.h	/^      eval(const TextQuery &t) const { return q->eval(t); }$/;"	f	class:Query	access:public	signature:(const TextQuery &t) const
eval	15/Query.h	/^    std::set<line_no> eval(const TextQuery &t) const$/;"	f	class:WordQuery	access:private	signature:(const TextQuery &t) const
eval	16/Query.cc	/^AndQuery::eval(const TextQuery& file) const$/;"	f	class:AndQuery	signature:(const TextQuery& file) const
eval	16/Query.cc	/^NotQuery::eval(const TextQuery& file) const$/;"	f	class:NotQuery	signature:(const TextQuery& file) const
eval	16/Query.cc	/^OrQuery::eval(const TextQuery& file) const$/;"	f	class:OrQuery	signature:(const TextQuery& file) const
eval	16/Query.h	/^      eval(const TextQuery &t) const {return h->eval(t);}$/;"	f	class:Query	access:public	signature:(const TextQuery &t) const
eval	16/Query.h	/^    std::set<line_no> eval(const TextQuery &t) const$/;"	f	class:WordQuery	access:private	signature:(const TextQuery &t) const
exclude_word	10/3ed_query.cc	/^bool TextQuery::exclude_word(const string &word)$/;"	f	class:TextQuery	signature:(const string &word)
exclusion_set	10/3ed_query.cc	/^set<string> TextQuery::exclusion_set = build_exclusion_set();$/;"	m	class:TextQuery	file:
exclusion_set	10/3ed_query.h	/^    static std::set<std::string> exclusion_set;$/;"	m	class:TextQuery	access:private
exercises	18/dyn_cast.cc	/^void exercises() {$/;"	f	signature:()
exhibit_stat	17/Animal.h	/^    bool        exhibit_stat;$/;"	m	class:ZooAnimal	access:protected
exhibit_stat	17/nopandaprint.h	/^    bool        exhibit_stat;$/;"	m	class:ZooAnimal	access:protected
exhibit_stat	17/virt.h	/^    bool        exhibit_stat;$/;"	m	class:ZooAnimal	access:protected
f	16/compare.cc	/^int f(int v1, int v2)$/;"	f	signature:(int v1, int v2)
f	16/nontype.cc	/^void f() {$/;"	f	signature:()
f	18/dyn_cast.cc	/^   virtual void f() {};$/;"	f	struct:Base	access:public	signature:()
f	18/dyn_cast.cc	/^void f(const Base &b)$/;"	f	signature:(const Base &b)
f2	8/sstream.cc	/^void f2()$/;"	f	signature:()
f3	8/sstream.cc	/^void f3()$/;"	f	signature:()
fact	7/fact.cc	/^int fact(int val)$/;"	f	signature:(int val)
factorial	7/fact.cc	/^int factorial(int val) $/;"	f	signature:(int val)
fam_name	17/Animal.h	/^    std::string fam_name;$/;"	m	class:ZooAnimal	access:protected
fam_name	17/nopandaprint.h	/^    std::string fam_name;$/;"	m	class:ZooAnimal	access:protected
fam_name	17/virt.h	/^    std::string fam_name;$/;"	m	class:ZooAnimal	access:protected
family_name	17/Animal.h	/^    std::string family_name() const { return fam_name; }$/;"	f	class:ZooAnimal	access:public	signature:() const
family_name	17/nopandaprint.h	/^    std::string family_name() const { return fam_name; }$/;"	f	class:ZooAnimal	access:public	signature:() const
family_name	17/virt.h	/^    std::string family_name() const { return fam_name; }$/;"	f	class:ZooAnimal	access:public	signature:() const
fandango	17/Animal.h	/^enum DanceType { two_left_feet, macarena, fandango, waltz };$/;"	e	enum:Bear::DanceType
fandango	17/nopandaprint.h	/^enum DanceType { two_left_feet, macarena, fandango, waltz };$/;"	e	enum:Bear::DanceType
fandango	17/virt.h	/^    enum DanceType { two_left_feet, macarena, fandango };$/;"	e	enum:Bear::DanceType
ff	7/conv-enums.cc	/^void ff(Stat) { cout << "ff(Stat)" << endl; }$/;"	f	signature:(Stat)
ff	7/conv-enums.cc	/^void ff(char) { cout << "ff(char)" << endl; }$/;"	f	signature:(char)
ff	7/conv-enums.cc	/^void ff(int) { cout << "ff(int)" << endl; }$/;"	f	signature:(int)
ff	7/enum-match.cc	/^void ff(Tokens) { cout << "ff(Tokens)" << endl; }$/;"	f	signature:(Tokens)
ff	7/enum-match.cc	/^void ff(int) { cout << "ff(int)" << endl; }$/;"	f	signature:(int)
first_free	18/vec-opnew.cc	/^    T* first_free;     \/\/ pointer to first free element in the array$/;"	m	class:Vector	file:	access:private
first_free	18/vec.cc	/^    T* first_free;     \/\/ pointer to first free element in the array$/;"	m	class:Vector	file:	access:private
folders	13/Folder.h	/^    std::set<Folder*> folders; \/\/ Folders that have this Message$/;"	m	class:Message	access:private
format	7/conv-enums.cc	/^string format(int) { cout << "format(int)" << endl; return ""; }$/;"	f	signature:(int)
format	7/conv-enums.cc	/^string format(unsigned int) { cout << "format(unsigned int)" << endl; $/;"	f	signature:(unsigned int)
freeStore	18/CachedObj.h	/^    static T *freeStore;$/;"	m	class:CachedObj	access:private
front	16/Queue.h	/^    Type& front()             { return head->item; }$/;"	f	class:Queue	access:public	signature:()
front	16/Queue.h	/^    const Type &front() const { return head->item; }$/;"	f	class:Queue	access:public	signature:() const
front	16/char_queue.h	/^    const std::string &front() const $/;"	f	class:Queue	access:public	signature:() const
front	16/char_queue.h	/^    std::string front()     {return real_queue.front();}$/;"	f	class:Queue	access:public	signature:()
front	16/newQueue.h	/^    Type& front()             { return items.front(); }$/;"	f	class:Queue	access:public	signature:()
front	16/newQueue.h	/^    const Type &front() const { return items.front(); }$/;"	f	class:Queue	access:public	signature:() const
front	18/MS_statmem.cc	/^    Type& front()            { return head->item; }$/;"	f	class:Queue	access:public	signature:()
front	18/MS_statmem.cc	/^    const Type front() const { return head->item; }$/;"	f	class:Queue	access:public	signature:() const
front	18/Queue.h	/^    Type& front()            { return head->item; }$/;"	f	class:Queue	access:public	signature:()
front	18/Queue.h	/^    const Type front() const { return head->item; }$/;"	f	class:Queue	access:public	signature:() const
front	18/statmem.cc	/^    Type& front()            { return head->item; }$/;"	f	class:Queue	access:public	signature:()
front	18/statmem.cc	/^    const Type front() const { return head->item; }$/;"	f	class:Queue	access:public	signature:() const
gcd	7/mathstuff.cc	/^int gcd(int v1, int v2)$/;"	f	signature:(int v1, int v2)
get	12/Screen.h	/^    char get() const { return contents[cursor]; }$/;"	f	class:Screen	access:public	signature:() const
get	12/screen3.h	/^    char get() const { return contents[cursor]; }$/;"	f	class:Screen	access:public	signature:() const
get	12/screen3.h	/^char Screen::get(index r, index c) const$/;"	f	class:Screen	signature:(index r, index c) const
get	12/screen4.h	/^    char get() const { return contents[cursor]; }$/;"	f	class:Screen	access:public	signature:() const
get	12/screen4.h	/^char Screen::get(index r, index c) const$/;"	f	class:Screen	signature:(index r, index c) const
get	12/screen5.h	/^    char get() const { return contents[cursor]; }$/;"	f	class:Screen	access:public	signature:() const
get	12/screen5.h	/^char Screen::get(index r, index c) const$/;"	f	class:Screen	signature:(index r, index c) const
get	7/refret-ex.cc	/^int &get(int *arry, int index) { return arry[index]; }$/;"	f	signature:(int *arry, int index)
get_base_mem	15/scope.cc	/^    int get_base_mem() { return Base::mem; }$/;"	f	struct:Derived	access:public	signature:()
get_books	11/vocab.cc	/^vector<string> get_books()$/;"	f	signature:()
get_folders	13/Folder.cc	/^vector<Folder*> Message::get_folders()$/;"	f	class:Message	signature:()
get_int	13/plain-ptr.cc	/^    int get_int() const { return val; }$/;"	f	class:HasPtr	access:public	signature:() const
get_int	13/smart-ptr.cc	/^    int get_int() const { return val; }$/;"	f	class:HasPtr	access:public	signature:() const
get_int	13/value-ptr.cc	/^    int get_int() const { return val; }$/;"	f	class:HasPtr	access:public	signature:() const
get_mem	15/scope.cc	/^    int get_mem() { return mem; }  \/\/ returns Derived::mem$/;"	f	struct:Derived	access:public	signature:()
get_ptr	13/plain-ptr.cc	/^    int *get_ptr() const { return ptr; }     $/;"	f	class:HasPtr	access:public	signature:() const
get_ptr	13/smart-ptr.cc	/^    int *get_ptr() const { return ptr->ip; } $/;"	f	class:HasPtr	access:public	signature:() const
get_ptr	13/value-ptr.cc	/^    int *get_ptr() const { return ptr; } $/;"	f	class:HasPtr	access:public	signature:() const
get_ptr_val	13/plain-ptr.cc	/^    int get_ptr_val() const { return *ptr; } $/;"	f	class:HasPtr	access:public	signature:() const
get_ptr_val	13/smart-ptr.cc	/^    int get_ptr_val() const { return *ptr->ip; } $/;"	f	class:HasPtr	access:public	signature:() const
get_ptr_val	13/value-ptr.cc	/^    int get_ptr_val() const { return *ptr; } $/;"	f	class:HasPtr	access:public	signature:() const
get_val	7/ref-fcn.cc	/^char &get_val(string &str, string::size_type ix) $/;"	f	signature:(string &str, string::size_type ix)
get_word	15/get_print.cc	/^bool get_word(string &s1)$/;"	f	signature:(string &s1)
get_words	15/get_print.cc	/^bool get_words(string &s1, string &s2)$/;"	f	signature:(string &s1, string &s2)
h	16/Basket.h	/^    Handle<Item_base> h;   \/\/ use-counted handle$/;"	m	class:Sales_item	access:private
h	16/Query.h	/^    Handle<Query_base> h;           \/\/ use-counted handle$/;"	m	class:Query	access:private
handle_out_of_memory	17/Handle.h	/^void handle_out_of_memory(const std::bad_alloc&) { }$/;"	f	signature:(const std::bad_alloc&)
handle_out_of_memory	17/MS_Handle.h	/^void handle_out_of_memory(const std::bad_alloc&) { }$/;"	f	signature:(const std::bad_alloc&)
head	16/Queue.h	/^    QueueItem<Type> *head;         \/\/ pointer to first element in Queue$/;"	m	class:Queue	access:private
head	16/int-Queue.h	/^    QueueItem<int> *head;     \/\/ use QueueItem of int$/;"	m	class:Queue	access:private
head	18/MS_statmem.cc	/^    QueueItem *head;   \/\/ pointer to first element in Queue$/;"	m	class:Queue	file:	access:private
head	18/Queue.h	/^    QueueItem *head;   \/\/ pointer to first element in Queue$/;"	m	class:Queue	access:private
head	18/statmem.cc	/^    QueueItem *head;   \/\/ pointer to first element in Queue$/;"	m	class:Queue	file:	access:private
height	12/Screen.h	/^    index height, width;$/;"	m	class:Screen	access:private
height	12/screen3.h	/^    index height, width;$/;"	m	class:Screen	access:private
height	12/screen4.h	/^    int height, width;$/;"	m	class:Screen	access:private
height	12/screen5.h	/^    index height, width;$/;"	m	class:Screen	access:private
height	18/Screen.h	/^    index height, width;$/;"	m	class:Screen	access:private
ia	4/multidim.cc	/^    int ia[3][4];      \/\/ array of size 3, each element is an array of ints of size 4 $/;"	v
ia	5/arraysizeof.cc	/^int ia[] = {0,1,2,3,4,5,6,7,8,9};$/;"	v
improving	17/nopandaprint.h	/^    enum Status { critical, environment, improving };$/;"	e	enum:Endangered::Status
improving	17/virt.h	/^    enum Status { critical, environment, improving };$/;"	e	enum:Endangered::Status
index	12/Screen.h	/^    typedef std::string::size_type index;$/;"	t	class:Screen	access:public
index	12/screen3.h	/^    typedef std::string::size_type index;$/;"	t	class:Screen	access:public
index	12/screen4.h	/^    typedef std::string::size_type index;$/;"	t	class:Screen	access:public
index	12/screen5.h	/^    typedef std::string::size_type index;$/;"	t	class:Screen	access:public
index	18/Screen.h	/^    typedef std::string::size_type index;$/;"	t	class:Screen	access:public
input	2/print_enum.cc	/^enum open_modes {input = 1, output, append};$/;"	e	enum:open_modes	file:
input	2/print_enum2.cc	/^enum open_modes {input = 1, output, append};$/;"	e	enum:open_modes	file:
interestRate	12/Account.h	/^    static double interestRate;$/;"	m	class:Account	access:private
ip	13/smart-ptr.cc	/^	int *ip;$/;"	m	class:U_Ptr	file:	access:private
isShorter	11/count-size.cc	/^bool isShorter(const string &s1, const string &s2)$/;"	f	signature:(const string &s1, const string &s2)
isShorter	11/vocab.cc	/^bool isShorter(const string &s1, const string &s2)$/;"	f	signature:(const string &s1, const string &s2)
isShorter	14/count-size.cc	/^bool isShorter(const string &s1, const string &s2)$/;"	f	signature:(const string &s1, const string &s2)
is_pos	7/fact.cc	/^bool is_pos(int i)$/;"	f	signature:(int i)
isbn	1/Sales_item.h	/^    std::string isbn;$/;"	m	class:Sales_item	access:private
isbn	14/Sales_item.h	/^    std::string isbn;$/;"	m	class:Sales_item	access:private
isbn	15/Basket.h	/^    std::string isbn;   \/\/ identifier for the item$/;"	m	class:Item_base	access:private
isbn	15/Basket2.h	/^    std::string isbn;   \/\/ identifier for the item$/;"	m	class:Item_base	access:private
isbn	16/Basket.h	/^    std::string isbn;   \/\/ identifier for the item$/;"	m	class:Item_base	access:private
isbn	17/Sales_item.h	/^    std::string isbn;$/;"	m	class:Sales_item	access:private
isbn_mismatch	17/bookexcept.h	/^    explicit isbn_mismatch(const std::string &s): $/;"	f	class:isbn_mismatch	access:public	signature:(const std::string &s)
isbn_mismatch	17/bookexcept.h	/^    isbn_mismatch(const std::string &s,$/;"	f	class:isbn_mismatch	access:public	signature:(const std::string &s, const std::string &lhs, const std::string &rhs)
isbn_mismatch	17/bookexcept.h	/^class isbn_mismatch: public std::logic_error {$/;"	c	inherits:std::logic_error
isbn_mismatch::isbn_mismatch	17/bookexcept.h	/^    explicit isbn_mismatch(const std::string &s): $/;"	f	class:isbn_mismatch	access:public	signature:(const std::string &s)
isbn_mismatch::isbn_mismatch	17/bookexcept.h	/^    isbn_mismatch(const std::string &s,$/;"	f	class:isbn_mismatch	access:public	signature:(const std::string &s, const std::string &lhs, const std::string &rhs)
isbn_mismatch::left	17/bookexcept.h	/^    const std::string left, right;$/;"	m	class:isbn_mismatch	access:public
isbn_mismatch::right	17/bookexcept.h	/^    const std::string left, right;$/;"	m	class:isbn_mismatch	access:public
isbn_mismatch::~isbn_mismatch	17/bookexcept.h	/^    virtual ~isbn_mismatch() throw() { }$/;"	f	class:isbn_mismatch	access:public	signature:()
item	16/Queue.h	/^    Type item;           \/\/ value stored in this element$/;"	m	class:QueueItem	access:private
item	18/MS_statmem.cc	/^        Type item;           \/\/ value stored in this element$/;"	m	struct:Queue::QueueItem	file:	access:public
item	18/Queue.h	/^        Type item;           \/\/ value stored in this element$/;"	m	struct:Queue::QueueItem	access:public
item	18/statmem.cc	/^    Type item;           \/\/ value stored in this element$/;"	m	struct:Queue::QueueItem	file:	access:public
item_count	16/Basket.h	/^    size_type item_count(const Sales_item &i) const$/;"	f	class:Basket	access:public	signature:(const Sales_item &i) const
items	15/Basket.h	/^    std::multiset<Sales_item, Comp> items;$/;"	m	class:Basket	access:private
items	15/Basket2.h	/^    std::multiset<Sales_item, Comp> items;$/;"	m	class:Basket	access:private
items	16/Basket.h	/^    std::multiset<Sales_item> items;$/;"	m	class:Basket	access:private
items	16/newQueue.h	/^    std::list<Type> items;$/;"	m	class:Queue	access:private
ival	17/Animal.h	/^    int         ival;$/;"	m	class:Bear	access:private
ival	17/nopandaprint.h	/^    int         ival;$/;"	m	class:Bear	access:private
ival	17/virt.h	/^    int    ival;$/;"	m	class:Bear	access:private
left	17/bookexcept.h	/^    const std::string left, right;$/;"	m	class:isbn_mismatch	access:public
lhs	15/Query.h	/^    const Query lhs, rhs;   \/\/ right- and left-hand operands$/;"	m	class:BinaryQuery	access:protected
lhs	16/Query.h	/^    Query lhs, rhs;   \/\/ right and left hand operands$/;"	m	class:BinaryQuery	access:protected
line_no	10/3ed_query.h	/^    typedef std::vector<std::string>::size_type line_no;$/;"	t	class:TextQuery	access:public
line_no	10/TextQuery.h	/^    typedef std::vector<std::string>::size_type line_no;$/;"	t	class:TextQuery	access:public
line_no	15/Query.h	/^    typedef TextQuery::line_no line_no;$/;"	t	class:Query_base	access:protected
line_no	16/Query.h	/^    typedef TextQuery::line_no line_no;$/;"	t	class:Query_base	access:protected
lines_of_text	10/3ed_query.h	/^    std::vector<std::string> lines_of_text; $/;"	m	class:TextQuery	access:private
lines_of_text	10/TextQuery.h	/^    std::vector<std::string> lines_of_text; $/;"	m	class:TextQuery	access:private
location	10/3ed_query.h	/^    typedef std::pair<line_no,str_size> location;$/;"	t	class:TextQuery	access:public
macarena	17/Animal.h	/^enum DanceType { two_left_feet, macarena, fandango, waltz };$/;"	e	enum:Bear::DanceType
macarena	17/nopandaprint.h	/^enum DanceType { two_left_feet, macarena, fandango, waltz };$/;"	e	enum:Bear::DanceType
macarena	17/virt.h	/^    enum DanceType { two_left_feet, macarena, fandango };$/;"	e	enum:Bear::DanceType
main	1/add.cc	/^int main()$/;"	f	signature:()
main	1/add_item.cc	/^int main() $/;"	f	signature:()
main	1/add_item2.cc	/^int main() $/;"	f	signature:()
main	1/avg_price.cc	/^int main() $/;"	f	signature:()
main	1/count.cc	/^int main()$/;"	f	signature:()
main	1/for_ex.cc	/^int main()$/;"	f	signature:()
main	1/forcount.cc	/^int main()$/;"	f	signature:()
main	1/item_io.cc	/^int main() $/;"	f	signature:()
main	1/main_only.cc	/^int main() $/;"	f	signature:()
main	1/mysum.cc	/^int main() $/;"	f	signature:()
main	1/userforcount.cc	/^int main()$/;"	f	signature:()
main	1/whilecount.cc	/^int main()$/;"	f	signature:()
main	10/3ed_querymain.cc	/^int main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	10/erasemap.cc	/^int main() $/;"	f	signature:()
main	10/multimap.cc	/^int main()$/;"	f	signature:()
main	10/querymain.cc	/^int main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	10/setexclusion.cc	/^int main(int argc, char **argv) $/;"	f	signature:(int argc, char **argv)
main	10/word_count.cc	/^int main() $/;"	f	signature:()
main	10/word_transform.cc	/^int main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	11/arrow.cc	/^int main() $/;"	f	signature:()
main	11/count-size.cc	/^int main()$/;"	f	signature:()
main	11/elim-dups.cc	/^int main()$/;"	f	signature:()
main	11/equiv-istream-iter.cc	/^int main() {$/;"	f	signature:()
main	11/innerprod.cc	/^int main()$/;"	f	signature:()
main	11/inserters.cc	/^int main() $/;"	f	signature:()
main	11/iostream_iter.cc	/^int main()$/;"	f	signature:()
main	11/parms.cc	/^int main()$/;"	f	signature:()
main	11/rev-iters.cc	/^int main()$/;"	f	signature:()
main	11/reverse-iter.cc	/^int main()$/;"	f	signature:()
main	11/scores.cc	/^int main() {$/;"	f	signature:()
main	11/use-istream-iter.cc	/^int main() {$/;"	f	signature:()
main	11/use-ostream-iter.cc	/^int main() $/;"	f	signature:()
main	11/use_equalrange.cc	/^int main() $/;"	f	signature:()
main	11/use_find.cc	/^int main()$/;"	f	signature:()
main	11/vocab.cc	/^int main()$/;"	f	signature:()
main	12/screen3.cc	/^int main()$/;"	f	signature:()
main	13/Foldermain.cc	/^int main()$/;"	f	signature:()
main	13/plain-ptr.cc	/^int main()$/;"	f	signature:()
main	13/smart-ptr.cc	/^int main()$/;"	f	signature:()
main	13/value-ptr.cc	/^int main()$/;"	f	signature:()
main	14/absInt.cc	/^int main() {$/;"	f	signature:()
main	14/count-size.cc	/^int main()$/;"	f	signature:()
main	14/directcall.cc	/^int main()$/;"	f	signature:()
main	14/fcnobj.cc	/^int main() {$/;"	f	signature:()
main	14/subscript.cc	/^int main() {$/;"	f	signature:()
main	14/use_chckPtr.cc	/^int main()$/;"	f	signature:()
main	15/Basket_main.cc	/^int main()$/;"	f	signature:()
main	15/V2_Basket_main.cc	/^int main()$/;"	f	signature:()
main	15/bsk2.cc	/^int main()$/;"	f	signature:()
main	15/main1.cc	/^int main(int, char **argv)$/;"	f	signature:(int, char **argv)
main	15/main2.cc	/^int main(int, char **argv)$/;"	f	signature:(int, char **argv)
main	15/main3.cc	/^int main(int, char **argv)$/;"	f	signature:(int, char **argv)
main	15/main4.cc	/^int main(int, char **argv)$/;"	f	signature:(int, char **argv)
main	15/main5.cc	/^int main(int, char **argv)$/;"	f	signature:(int, char **argv)
main	15/querymain.cc	/^int main(int, char **argv)$/;"	f	signature:(int, char **argv)
main	15/scope.cc	/^int main()$/;"	f	signature:()
main	16/Basket_main.cc	/^int main()$/;"	f	signature:()
main	16/Queue-assign.cc	/^int main()$/;"	f	signature:()
main	16/QueueMain.cc	/^int main() $/;"	f	signature:()
main	16/QueueMain2.cc	/^int main()$/;"	f	signature:()
main	16/QueueMain3.cc	/^int main() {$/;"	f	signature:()
main	16/char_main.cc	/^int main()$/;"	f	signature:()
main	16/char_main_push.cc	/^int main()$/;"	f	signature:()
main	16/compare.cc	/^int main()$/;"	f	signature:()
main	16/newQueueMain.cc	/^int main() $/;"	f	signature:()
main	16/newQueueMain2.cc	/^int main()$/;"	f	signature:()
main	16/newQueueMain3.cc	/^int main() {$/;"	f	signature:()
main	16/nontype.cc	/^int main()$/;"	f	signature:()
main	16/overcomp.cc	/^int main()$/;"	f	signature:()
main	16/overcomp2.cc	/^int main()$/;"	f	signature:()
main	16/spcl-max.cc	/^int main()$/;"	f	signature:()
main	16/swap.cc	/^int main()$/;"	f	signature:()
main	16/use-handle.cc	/^int main()$/;"	f	signature:()
main	16/use-query-handle.cc	/^int main(int, char **argv)$/;"	f	signature:(int, char **argv)
main	17/book.cc	/^int main()$/;"	f	signature:()
main	17/use-handle.cc	/^int main()$/;"	f	signature:()
main	18/MS_statmem.cc	/^int main() $/;"	f	signature:()
main	18/QueueMain.cc	/^int main() $/;"	f	signature:()
main	18/QueueMain2.cc	/^int main()$/;"	f	signature:()
main	18/QueueMain3.cc	/^int main() {$/;"	f	signature:()
main	18/dyn_cast.cc	/^int main()$/;"	f	signature:()
main	18/screenTest.cc	/^int main()$/;"	f	signature:()
main	18/statmem.cc	/^int main() $/;"	f	signature:()
main	18/typeid.cc	/^int main()$/;"	f	signature:()
main	18/vec-opnew.cc	/^int main()$/;"	f	signature:()
main	18/vec.cc	/^int main()$/;"	f	signature:()
main	2/pow2.cc	/^int main()$/;"	f	signature:()
main	2/pow2_try2.cc	/^int main()$/;"	f	signature:()
main	2/pow_tbl.cc	/^int main()$/;"	f	signature:()
main	2/print_enum.cc	/^int main() $/;"	f	signature:()
main	2/print_enum2.cc	/^int main() $/;"	f	signature:()
main	2/ref-ex.cc	/^int main()$/;"	f	signature:()
main	2/scope_levels.cc	/^int main()$/;"	f	signature:()
main	2/scope_levels2.cc	/^int main()$/;"	f	signature:()
main	2/twosome.cc	/^int main() $/;"	f	signature:()
main	3/add_using.cc	/^int main()$/;"	f	signature:()
main	3/bits.cc	/^int main() $/;"	f	signature:()
main	3/cctype.cc	/^int main()$/;"	f	signature:()
main	3/char_repl.cc	/^int main()$/;"	f	signature:()
main	3/getline.cc	/^int main() $/;"	f	signature:()
main	3/init_vec.cc	/^int main()$/;"	f	signature:()
main	3/str_vers2.cc	/^int main()$/;"	f	signature:()
main	3/str_vers3.cc	/^int main()$/;"	f	signature:()
main	3/strcompare.cc	/^int main()$/;"	f	signature:()
main	3/string_add.cc	/^int main() $/;"	f	signature:()
main	3/string_io.cc	/^int main()$/;"	f	signature:()
main	3/string_io2.cc	/^int main()$/;"	f	signature:()
main	3/string_size.cc	/^int main()$/;"	f	signature:()
main	3/vec_assign.cc	/^int main()$/;"	f	signature:()
main	3/word_echo.cc	/^int main() $/;"	f	signature:()
main	4/arr_init.cc	/^int main()$/;"	f	signature:()
main	4/copy_array.cc	/^int main()$/;"	f	signature:()
main	4/cstring_exercise.cc	/^int main()$/;"	f	signature:()
main	4/cstring_hdr.cc	/^int main() {$/;"	f	signature:()
main	4/dbl_ptr.cc	/^int main()$/;"	f	signature:()
main	4/multidim.cc	/^int main()$/;"	f	signature:()
main	4/ptr_traversal.cc	/^int main()$/;"	f	signature:()
main	4/string_exercise.cc	/^int main()$/;"	f	signature:()
main	5/andtest.cc	/^int main() $/;"	f	signature:()
main	5/arraysizeof.cc	/^int main()$/;"	f	signature:()
main	5/assignment.cc	/^int main() {$/;"	f	signature:()
main	5/cnt_found.cc	/^int main()$/;"	f	signature:()
main	5/cond.cc	/^int main()$/;"	f	signature:()
main	5/cond2.cc	/^int main()$/;"	f	signature:()
main	5/find_word.cc	/^int main()$/;"	f	signature:()
main	5/incr.cc	/^int main() $/;"	f	signature:()
main	5/int-div.cc	/^int main() $/;"	f	signature:()
main	5/oknew.cc	/^int main() $/;"	f	signature:()
main	5/overflow.cc	/^int main() $/;"	f	signature:()
main	5/prec.cc	/^int main() $/;"	f	signature:()
main	5/shift-prec.cc	/^int main()$/;"	f	signature:()
main	5/sizeof_arr.cc	/^int main()$/;"	f	signature:()
main	5/sizeof_pgm.cc	/^int main() $/;"	f	signature:()
main	5/vec_init.cc	/^int main()$/;"	f	signature:()
main	5/warn_dbltoint.cc	/^int main()$/;"	f	signature:()
main	6/copy_array.cc	/^int main()$/;"	f	signature:()
main	6/doWhile.cc	/^int main()$/;"	f	signature:()
main	6/exception_example.cc	/^int main() $/;"	f	signature:()
main	6/forcount.cc	/^int main()$/;"	f	signature:()
main	6/othercnt.cc	/^int main()$/;"	f	signature:()
main	6/vowels.cc	/^int main()$/;"	f	signature:()
main	6/wdebug.cc	/^int main() $/;"	f	signature:()
main	7/cfcn_ex.c	/^int main()$/;"	f
main	7/conv-enums.cc	/^int main() {$/;"	f	signature:()
main	7/count-calls.cc	/^int main() $/;"	f	signature:()
main	7/enum-match.cc	/^int main() {$/;"	f	signature:()
main	7/fact.cc	/^int main()$/;"	f	signature:()
main	7/good_printmain.cc	/^int main() $/;"	f	signature:()
main	7/inline_shorter.cc	/^int main()$/;"	f	signature:()
main	7/mainmath.cc	/^int main()$/;"	f	signature:()
main	7/mainret.cc	/^int main()$/;"	f	signature:()
main	7/mk_plural.cc	/^int main()$/;"	f	signature:()
main	7/pow_main.cc	/^int main()$/;"	f	signature:()
main	7/ref-fcn.cc	/^int main() $/;"	f	signature:()
main	7/refret-ex.cc	/^int main() {$/;"	f	signature:()
main	7/rgcd.cc	/^int main()$/;"	f	signature:()
main	7/stl-arr-fcns.cc	/^int main() $/;"	f	signature:()
main	7/usefcnptr.cc	/^int main() $/;"	f	signature:()
main	7/useptrparms.cc	/^int main() $/;"	f	signature:()
main	7/useptrswap.cc	/^int main() $/;"	f	signature:()
main	7/vec-parms.cc	/^int main()$/;"	f	signature:()
main	7/vecprintmain.cc	/^int main() $/;"	f	signature:()
main	8/badgetc.cc	/^int main()$/;"	f	signature:()
main	8/buf.cc	/^int main()$/;"	f	signature:()
main	8/getc.cc	/^int main()$/;"	f	signature:()
main	8/getput.cc	/^int main()$/;"	f	signature:()
main	8/main-proto.cc	/^int main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	8/manips.cc	/^int main()$/;"	f	signature:()
main	8/no-skipws.cc	/^int main()$/;"	f	signature:()
main	8/point.cc	/^int main()$/;"	f	signature:()
main	8/prec.cc	/^int main()$/;"	f	signature:()
main	8/sci_dec.cc	/^int main() $/;"	f	signature:()
main	8/seek.cc	/^int main()$/;"	f	signature:()
main	8/setw.cc	/^int main()$/;"	f	signature:()
main	8/skipws.cc	/^int main()$/;"	f	signature:()
main	8/sstream.cc	/^int main()$/;"	f	signature:()
main	8/use-getopen.cc	/^int main()$/;"	f	signature:()
main	9/array_init.cc	/^int main()$/;"	f	signature:()
main	9/capacity.cc	/^int main()$/;"	f	signature:()
main	9/ctors.cc	/^int main()$/;"	f	signature:()
main	9/find-str.cc	/^int main() $/;"	f	signature:()
main	9/find_ops.cc	/^int main() $/;"	f	signature:()
main	9/stack.cc	/^int main()$/;"	f	signature:()
main	9/str_assignOps.cc	/^int main() $/;"	f	signature:()
main	9/str_print.cc	/^int main() $/;"	f	signature:()
main	9/substr.cc	/^int main()$/;"	f	signature:()
make_plural	7/mk_plural.cc	/^string make_plural(size_t ctr, const string &word, $/;"	f	signature:(size_t ctr, const string &word, const string &ending)
make_plural	7/mk_plural2.cc	/^string make_plural(size_t ctr, const string &word, $/;"	f	signature:(size_t ctr, const string &word, const string &ending)
max	16/spcl-max.cc	/^T max(T t1, T t2)$/;"	f	signature:(T t1, T t2)
max	16/spcl-max.cc	/^char* max<char*>(char* s1, char* s2)$/;"	f	signature:(char* s1, char* s2)
max_qty	15/Basket.h	/^    std::size_t max_qty;   \/\/ maximum number sold at discount$/;"	m	class:Lim_item	access:private
max_qty	16/Basket.h	/^    std::size_t max_qty;   \/\/ maximum number sold at discount$/;"	m	class:Lim_item	access:private
mem	15/scope.cc	/^    int mem;   \/\/ hides mem in the base$/;"	m	struct:Derived	file:	access:protected
mem	15/scope.cc	/^    int mem;$/;"	m	struct:Base	file:	access:protected
messages	13/Folder.cc	/^vector<Message*> Folder::messages()$/;"	f	class:Folder	signature:()
min	16/swap.cc	/^template <class T> T min(T a, T b) $/;"	f	signature:(T a, T b)
min_element	7/usefcnptr.cc	/^int min_element(vector<int>::iterator beg, $/;"	f	signature:(vector<int>::iterator beg, vector<int>::iterator end)
min_qty	15/Basket.h	/^    std::size_t min_qty;   \/\/ minimum purchase for discount to apply$/;"	m	class:Bulk_item	access:private
min_qty	16/Basket.h	/^    std::size_t min_qty;   \/\/ minimum purchase for discount to apply$/;"	m	class:Bulk_item	access:private
move	12/screen3.h	/^Screen& Screen::move(index r, index c)$/;"	f	class:Screen	signature:(index r, index c)
move	12/screen4.h	/^Screen& Screen::move(index r, index c)$/;"	f	class:Screen	signature:(index r, index c)
move	12/screen5.h	/^    Screen& move(index r, index c) $/;"	f	class:Screen	access:public	signature:(index r, index c)
move	12/screen5.h	/^    const Screen& move(index r, index c) const $/;"	f	class:Screen	access:public	signature:(index r, index c) const
msgs	13/Folder.h	/^    std::set<Message*> msgs;  \/\/ messages in this folder$/;"	m	class:Folder	access:private
name	17/Animal.h	/^    std::string name() const { return nm; }$/;"	f	class:ZooAnimal	access:public	signature:() const
name	17/nopandaprint.h	/^    std::string name() const { return nm; }$/;"	f	class:ZooAnimal	access:public	signature:() const
name	17/virt.h	/^    std::string name() const { return nm; }$/;"	f	class:ZooAnimal	access:public	signature:() const
name	17/virt.h	/^    std::string name;$/;"	m	class:Bear	access:private
net_price	15/Basket.cc	/^double Bulk_item::net_price(size_t cnt) const$/;"	f	class:Bulk_item	signature:(size_t cnt) const
net_price	15/Basket.cc	/^double Lim_item::net_price(size_t cnt) const$/;"	f	class:Lim_item	signature:(size_t cnt) const
net_price	15/Basket.h	/^    virtual double net_price(std::size_t n) const $/;"	f	class:Item_base	access:public	signature:(std::size_t n) const
net_price	15/Basket2.h	/^    virtual double net_price(std::size_t n) const $/;"	f	class:Item_base	access:public	signature:(std::size_t n) const
net_price	15/V2_Basket.cc	/^double Bulk_item::net_price(size_t cnt) const$/;"	f	class:Bulk_item	signature:(size_t cnt) const
net_price	15/V2_Basket.cc	/^double Lim_item::net_price(size_t cnt) const$/;"	f	class:Lim_item	signature:(size_t cnt) const
net_price	16/Basket.cc	/^double Bulk_item::net_price(size_t cnt) const$/;"	f	class:Bulk_item	signature:(size_t cnt) const
net_price	16/Basket.cc	/^double Lim_item::net_price(size_t cnt) const$/;"	f	class:Lim_item	signature:(size_t cnt) const
net_price	16/Basket.h	/^    virtual double net_price(std::size_t n) const $/;"	f	class:Item_base	access:public	signature:(std::size_t n) const
newf	7/enum-match.cc	/^void newf(int) { cout << "newf(int)" << endl; }$/;"	f	signature:(int)
newf	7/enum-match.cc	/^void newf(unsigned char) { cout << "newf(unsigned char)" << endl; }$/;"	f	signature:(unsigned char)
next	16/Queue.h	/^    QueueItem *next;     \/\/ pointer to next element in the Queue$/;"	m	class:QueueItem	access:private
next	18/CachedObj.h	/^    T *next;$/;"	m	class:CachedObj	access:protected
next	18/MS_statmem.cc	/^        QueueItem *next;     \/\/ pointer to next element in the Queue$/;"	m	struct:Queue::QueueItem	file:	access:public
next	18/Queue.h	/^        QueueItem *next;     \/\/ pointer to next element in the Queue$/;"	m	struct:Queue::QueueItem	access:public
next	18/statmem.cc	/^    QueueItem *next;     \/\/ pointer to next element in the Queue$/;"	m	struct:Queue::QueueItem	file:	access:public
nm	17/Animal.h	/^    std::string nm;$/;"	m	class:ZooAnimal	access:protected
nm	17/nopandaprint.h	/^    std::string nm;$/;"	m	class:ZooAnimal	access:protected
nm	17/virt.h	/^    std::string nm;$/;"	m	class:ZooAnimal	access:protected
no_null	9/ctors.cc	/^char no_null[] = {'H', 'i'};  \/\/ not null-terminated$/;"	v
onExhibit	17/Animal.h	/^    bool onExhibit() const { return exhibit_stat; }$/;"	f	class:ZooAnimal	access:public	signature:() const
onExhibit	17/nopandaprint.h	/^    bool onExhibit() const { return exhibit_stat; }$/;"	f	class:ZooAnimal	access:public	signature:() const
onExhibit	17/virt.h	/^    bool onExhibit() const { return exhibit_stat; }$/;"	f	class:ZooAnimal	access:public	signature:() const
open_file	8/get_openfile.cc	/^ifstream& open_file(ifstream &in, const string &file)$/;"	f	signature:(ifstream &in, const string &file)
open_modes	2/print_enum.cc	/^enum open_modes {input = 1, output, append};$/;"	g	file:
open_modes	2/print_enum2.cc	/^enum open_modes {input = 1, output, append};$/;"	g	file:
oper	15/Query.h	/^    const std::string oper; \/\/ name of the operator$/;"	m	class:BinaryQuery	access:protected
oper	16/Query.h	/^    std::string oper; \/\/ name of the operator$/;"	m	class:BinaryQuery	access:protected
operator !=	1/Sales_item.h	/^operator!=(const Sales_item &lhs, const Sales_item &rhs)$/;"	f	signature:(const Sales_item &lhs, const Sales_item &rhs)
operator !=	14/Sales_item.h	/^operator!=(const Sales_item &lhs, const Sales_item &rhs)$/;"	f	signature:(const Sales_item &lhs, const Sales_item &rhs)
operator !=	17/Sales_item.h	/^operator!=(const Sales_item &lhs, const Sales_item &rhs)$/;"	f	signature:(const Sales_item &lhs, const Sales_item &rhs)
operator &	15/Query.h	/^inline Query operator&(const Query &lhs, const Query &rhs)$/;"	f	signature:(const Query &lhs, const Query &rhs)
operator &	16/Query.h	/^inline Query operator&(const Query &lhs, const Query &rhs)$/;"	f	signature:(const Query &lhs, const Query &rhs)
operator ()	14/absInt.cc	/^    int operator()(int val) {$/;"	f	struct:absInt	access:public	signature:(int val)
operator ()	14/count-size.cc	/^    bool operator()(const string &s) $/;"	f	class:GT_cls	access:public	signature:(const string &s)
operator ()	14/count-size.cc	/^    bool operator()(const string &s) { return s.size() == bound; }$/;"	f	class:EQ	access:public	signature:(const string &s)
operator *	14/CheckedPtr.cc	/^const int& CheckedPtr::operator*() const$/;"	f	class:CheckedPtr	signature:() const
operator *	14/CheckedPtr.cc	/^int& CheckedPtr::operator*() $/;"	f	class:CheckedPtr	signature:()
operator *	14/ScrPtr.h	/^    Screen &operator*() { return *ptr->sp; }$/;"	f	class:ScreenPtr	access:public	signature:()
operator *	14/ScrPtr.h	/^    const Screen &operator*() const { return *ptr->sp; }$/;"	f	class:ScreenPtr	access:public	signature:() const
operator *	15/Basket.h	/^    const Item_base &operator*() const { if (p) return *p; $/;"	f	class:Sales_item	access:public	signature:() const
operator *	15/Basket2.h	/^    const Item_base &operator*() const { return *p; }$/;"	f	class:Sales_item	access:public	signature:() const
operator *	16/Basket.h	/^    const Item_base& operator*() const { return *h; }$/;"	f	class:Sales_item	access:public	signature:() const
operator *	16/Handle.h	/^const T& Handle<T>::operator*() const$/;"	f	class:Handle	signature:() const
operator *	16/Handle.h	/^template <class T> inline T& Handle<T>::operator*() $/;"	f	class:Handle	signature:()
operator *	17/Handle.h	/^const T& Handle<T>::operator*() const$/;"	f	class:Handle	signature:() const
operator *	17/Handle.h	/^template <class T> inline T& Handle<T>::operator*() $/;"	f	class:Handle	signature:()
operator *	17/MS_Handle.h	/^const T& Handle<T>::operator*() const$/;"	f	class:Handle	signature:() const
operator *	17/MS_Handle.h	/^template <class T> inline T& Handle<T>::operator*() $/;"	f	class:Handle	signature:()
operator +	1/Sales_item.h	/^operator+(const Sales_item& lhs, const Sales_item& rhs) $/;"	f	signature:(const Sales_item& lhs, const Sales_item& rhs)
operator +	14/Sales_item.cc	/^operator+(const Sales_item& lhs, const Sales_item& rhs) $/;"	f	signature:(const Sales_item& lhs, const Sales_item& rhs)
operator +	17/Sales_item.cc	/^operator+(const Sales_item& lhs, const Sales_item& rhs) $/;"	f	signature:(const Sales_item& lhs, const Sales_item& rhs)
operator ++	14/CheckedPtr.cc	/^CheckedPtr CheckedPtr::operator++(int)$/;"	f	class:CheckedPtr	signature:(int)
operator ++	14/CheckedPtr.cc	/^CheckedPtr& CheckedPtr::operator++()$/;"	f	class:CheckedPtr	signature:()
operator +=	1/Sales_item.h	/^Sales_item& Sales_item::operator+=(const Sales_item& rhs) $/;"	f	class:Sales_item	signature:(const Sales_item& rhs)
operator +=	14/Sales_item.cc	/^Sales_item& Sales_item::operator+=(const Sales_item& rhs) $/;"	f	class:Sales_item	signature:(const Sales_item& rhs)
operator +=	17/Sales_item.cc	/^Sales_item::operator+=(const Sales_item& rhs) $/;"	f	class:Sales_item	signature:(const Sales_item& rhs)
operator --	14/CheckedPtr.cc	/^CheckedPtr CheckedPtr::operator--(int)$/;"	f	class:CheckedPtr	signature:(int)
operator --	14/CheckedPtr.cc	/^CheckedPtr& CheckedPtr::operator--()$/;"	f	class:CheckedPtr	signature:()
operator ->	14/ScrPtr.h	/^    Screen *operator->() { return ptr->sp; }$/;"	f	class:ScreenPtr	access:public	signature:()
operator ->	14/ScrPtr.h	/^    const Screen *operator->() const { return ptr->sp; }$/;"	f	class:ScreenPtr	access:public	signature:() const
operator ->	15/Basket.h	/^    const Item_base *operator->() const { if (p) return p; $/;"	f	class:Sales_item	access:public	signature:() const
operator ->	15/Basket2.h	/^    const Item_base *operator->() const { return p; }$/;"	f	class:Sales_item	access:public	signature:() const
operator ->	16/Basket.h	/^    const Item_base* operator->() const $/;"	f	class:Sales_item	access:public	signature:() const
operator ->	16/Handle.h	/^const T* Handle<T>::operator->() const$/;"	f	class:Handle	signature:() const
operator ->	16/Handle.h	/^template <class T> inline T* Handle<T>::operator->() $/;"	f	class:Handle	signature:()
operator ->	17/Handle.h	/^const T* Handle<T>::operator->() const$/;"	f	class:Handle	signature:() const
operator ->	17/Handle.h	/^template <class T> inline T* Handle<T>::operator->() $/;"	f	class:Handle	signature:()
operator ->	17/MS_Handle.h	/^const T* Handle<T>::operator->() const$/;"	f	class:Handle	signature:() const
operator ->	17/MS_Handle.h	/^template <class T> inline T* Handle<T>::operator->() $/;"	f	class:Handle	signature:()
operator <	16/Basket.h	/^operator<(const Item_base &lhs, const Item_base &rhs) $/;"	f	signature:(const Item_base &lhs, const Item_base &rhs)
operator <	16/Basket.h	/^operator<(const Sales_item &lhs, const Sales_item &rhs) $/;"	f	signature:(const Sales_item &lhs, const Sales_item &rhs)
operator <<	1/Sales_item.h	/^operator<<(ostream& out, const Sales_item& s)$/;"	f	signature:(ostream& out, const Sales_item& s)
operator <<	13/plain-ptr.cc	/^ostream& operator<<(ostream &os, const HasPtr &hp)$/;"	f	signature:(ostream &os, const HasPtr &hp)
operator <<	13/smart-ptr.cc	/^ostream& operator<<(ostream &os, const HasPtr &hp)$/;"	f	signature:(ostream &os, const HasPtr &hp)
operator <<	13/value-ptr.cc	/^ostream& operator<<(ostream &os, const HasPtr &hp)$/;"	f	signature:(ostream &os, const HasPtr &hp)
operator <<	14/Sales_item.cc	/^operator<<(ostream& out, const Sales_item& s)$/;"	f	signature:(ostream& out, const Sales_item& s)
operator <<	15/Query.h	/^operator<<(std::ostream &os, const Query &q)$/;"	f	signature:(std::ostream &os, const Query &q)
operator <<	16/Query.h	/^operator<<(std::ostream &os, const Query &q)$/;"	f	signature:(std::ostream &os, const Query &q)
operator <<	16/Queue.cc	/^ostream& operator<<(ostream &os, const Queue<Type> &q)$/;"	f	signature:(ostream &os, const Queue<Type> &q)
operator <<	16/char_queue.cc	/^ostream& operator<<(ostream &os, const Queue<const char*> &q)$/;"	f	signature:(ostream &os, const Queue<const char*> &q)
operator <<	16/newQueue.h	/^std::ostream& operator<<(std::ostream &os, const Queue<Type> &q)$/;"	f	signature:(std::ostream &os, const Queue<Type> &q)
operator <<	17/Sales_item.cc	/^operator<<(ostream& out, const Sales_item& s)$/;"	f	signature:(ostream& out, const Sales_item& s)
operator <<	18/Queue.cc	/^ostream& operator<<(ostream &os, const Queue<Type> &q)$/;"	f	signature:(ostream &os, const Queue<Type> &q)
operator =	13/Folder.cc	/^Folder& Folder::operator=(const Folder &f)$/;"	f	class:Folder	signature:(const Folder &f)
operator =	13/Folder.cc	/^Message& Message::operator=(const Message &rhs)$/;"	f	class:Message	signature:(const Message &rhs)
operator =	13/smart-ptr.cc	/^HasPtr& HasPtr::operator=(const HasPtr &rhs)$/;"	f	class:HasPtr	signature:(const HasPtr &rhs)
operator =	13/value-ptr.cc	/^HasPtr& HasPtr::operator=(const HasPtr &rhs)$/;"	f	class:HasPtr	signature:(const HasPtr &rhs)
operator =	14/ScrPtr.h	/^ScreenPtr& ScreenPtr::operator=(const ScreenPtr &rhs)$/;"	f	class:ScreenPtr	signature:(const ScreenPtr &rhs)
operator =	15/Basket.cc	/^Sales_item::operator=(const Sales_item &rhs)$/;"	f	class:Sales_item	signature:(const Sales_item &rhs)
operator =	15/Query.h	/^inline Query& Query::operator=(const Query &rhs)$/;"	f	class:Query	signature:(const Query &rhs)
operator =	15/V2_Basket.cc	/^Sales_item::operator=(const Sales_item &rhs)$/;"	f	class:Sales_item	signature:(const Sales_item &rhs)
operator =	16/Handle.h	/^inline Handle<T>& Handle<T>::operator=(const Handle &rhs)$/;"	f	class:Handle	signature:(const Handle &rhs)
operator =	16/Queue.cc	/^Queue<Type>& Queue<Type>::operator=(const Queue &rhs)$/;"	f	class:Queue	signature:(const Queue &rhs)
operator =	17/Handle.h	/^Handle<T>& Handle<T>::operator=(const Handle &rhs)$/;"	f	class:Handle	signature:(const Handle &rhs)
operator =	17/MS_Handle.h	/^Handle<T>& Handle<T>::operator=(const Handle &rhs)$/;"	f	class:Handle	signature:(const Handle &rhs)
operator =	18/MS_statmem.cc	/^Queue<Type>& Queue<Type>::operator=(const Queue &rhs)$/;"	f	class:Queue	signature:(const Queue &rhs)
operator =	18/Queue.cc	/^Queue<Type>& Queue<Type>::operator=(const Queue &rhs)$/;"	f	class:Queue	signature:(const Queue &rhs)
operator =	18/statmem.cc	/^Queue<Type>& Queue<Type>::operator=(const Queue &rhs)$/;"	f	class:Queue	signature:(const Queue &rhs)
operator ==	1/Sales_item.h	/^operator==(const Sales_item &lhs, const Sales_item &rhs)$/;"	f	signature:(const Sales_item &lhs, const Sales_item &rhs)
operator ==	14/Sales_item.h	/^operator==(const Sales_item &lhs, const Sales_item &rhs)$/;"	f	signature:(const Sales_item &lhs, const Sales_item &rhs)
operator ==	17/Sales_item.h	/^operator==(const Sales_item &lhs, const Sales_item &rhs)$/;"	f	signature:(const Sales_item &lhs, const Sales_item &rhs)
operator >>	1/Sales_item.h	/^operator>>(istream& in, Sales_item& s)$/;"	f	signature:(istream& in, Sales_item& s)
operator >>	14/Sales_item.cc	/^operator>>(istream& in, Sales_item& s)$/;"	f	signature:(istream& in, Sales_item& s)
operator >>	17/Sales_item.cc	/^operator>>(istream& in, Sales_item& s)$/;"	f	signature:(istream& in, Sales_item& s)
operator []	14/subscript.cc	/^const int& Foo::operator[](const size_t index) const$/;"	f	class:Foo	signature:(const size_t index) const
operator []	14/subscript.cc	/^int& Foo::operator[](const size_t index)$/;"	f	class:Foo	signature:(const size_t index)
operator []	18/vec-opnew.cc	/^    T& operator[](size_t n) { return elements[n]; }$/;"	f	class:Vector	access:public	signature:(size_t n)
operator []	18/vec-opnew.cc	/^    const T& operator[](size_t n) const { return elements[n]; }$/;"	f	class:Vector	access:public	signature:(size_t n) const
operator []	18/vec.cc	/^    T& operator[](size_t n) { return elements[n]; }$/;"	f	class:Vector	access:public	signature:(size_t n)
operator []	18/vec.cc	/^    const T& operator[](size_t n) const { return elements[n]; }$/;"	f	class:Vector	access:public	signature:(size_t n) const
operator int	16/Queue-assign.cc	/^    operator int() { return val; }$/;"	f	class:SmallInt	access:public	signature:()
operator |	15/Query.h	/^inline Query operator|(const Query &lhs, const Query &rhs)$/;"	f	signature:(const Query &lhs, const Query &rhs)
operator |	16/Query.h	/^inline Query operator|(const Query &lhs, const Query &rhs)$/;"	f	signature:(const Query &lhs, const Query &rhs)
operator ~	15/Query.h	/^inline Query operator~(const Query &oper)$/;"	f	signature:(const Query &oper)
operator ~	16/Query.h	/^inline Query operator~(const Query &oper)$/;"	f	signature:(const Query &oper)
out_of_stock	17/bookexcept.h	/^    explicit out_of_stock(const std::string &s):$/;"	f	class:out_of_stock	access:public	signature:(const std::string &s)
out_of_stock	17/bookexcept.h	/^class out_of_stock: public std::runtime_error {$/;"	c	inherits:std::runtime_error
out_of_stock::out_of_stock	17/bookexcept.h	/^    explicit out_of_stock(const std::string &s):$/;"	f	class:out_of_stock	access:public	signature:(const std::string &s)
output	2/print_enum.cc	/^enum open_modes {input = 1, output, append};$/;"	e	enum:open_modes	file:
output	2/print_enum2.cc	/^enum open_modes {input = 1, output, append};$/;"	e	enum:open_modes	file:
owner	12/Account.h	/^    std::string owner;$/;"	m	class:Account	access:private
p	15/Basket.h	/^    Item_base *p;         \/\/ pointer to shared item$/;"	m	class:Sales_item	access:private
p	15/Basket2.h	/^    Item_base *p;         \/\/ pointer to shared item$/;"	m	class:Sales_item	access:private
percent	11/vocab.cc	/^percent(double numerator, double denominator)$/;"	f	signature:(double numerator, double denominator)
period	12/Account.h	/^    static const int period = 30;  \/\/ interest posted every 30 days$/;"	m	class:Account	access:private
pettable	17/virt.h	/^    bool pettable() const {return pettable_flag;  }$/;"	f	class:Raccoon	access:public	signature:() const
pettable	17/virt.h	/^    void pettable(bool petval) {pettable_flag = petval;}$/;"	f	class:Raccoon	access:public	signature:(bool petval)
pettable_flag	17/virt.h	/^    bool pettable_flag;$/;"	m	class:Raccoon	access:protected
pf	7/usefcnptr.cc	/^int (*pf)(vector<int>::iterator, vector<int>::iterator) $/;"	v
pop	16/Queue.cc	/^template <class Type> void Queue<Type>::pop()$/;"	f	class:Queue	signature:()
pop	16/char_queue.h	/^    void pop()               {real_queue.pop();}$/;"	f	class:Queue	access:public	signature:()
pop	16/newQueue.h	/^    void pop()               { items.erase(items.begin()); }$/;"	f	class:Queue	access:public	signature:()
pop	16/queue_push_char.cc	/^void Queue<const char*>::pop()$/;"	f	class:Queue	signature:()
pop	18/MS_statmem.cc	/^void Queue<Type>::pop()$/;"	f	class:Queue	signature:()
pop	18/Queue.cc	/^void Queue<Type>::pop()$/;"	f	class:Queue	signature:()
pop	18/statmem.cc	/^void Queue<Type>::pop()$/;"	f	class:Queue	signature:()
pow	2/pow_fcn.cc	/^pow( int val, int exp )$/;"	f	signature:( int val, int exp )
power	7/pow_fcn.cc	/^power(int value, int pow)$/;"	f	signature:(int value, int pow)
price	15/Basket.h	/^    double price;       \/\/ normal, undiscounted price$/;"	m	class:Item_base	access:protected
price	15/Basket2.h	/^    double price;       \/\/ normal, undiscounted price$/;"	m	class:Item_base	access:protected
price	16/Basket.h	/^    double price;       \/\/ normal, undiscounted price$/;"	m	class:Item_base	access:protected
print	17/Animal.h	/^std::ostream& Panda::print(std::ostream &os) const$/;"	f	class:Panda	signature:(std::ostream &os) const
print	7/vec-parms.cc	/^void print(const vector<int> &vec)$/;"	f	signature:(const vector<int> &vec)
print	7/vec-parms.cc	/^void print(vector<int>::const_iterator beg,$/;"	f	signature:(vector<int>::const_iterator beg, vector<int>::const_iterator end)
printValues	7/good_printmain.cc	/^void printValues(const int ia[], size_t size) $/;"	f	signature:(const int ia[], size_t size)
printValues	7/stl-arr-fcns.cc	/^void printValues(const int *beg, const int *end) $/;"	f	signature:(const int *beg, const int *end)
printValues	7/vecprint.cc	/^void printValues(const vector<int>& vec)$/;"	f	signature:(const vector<int>& vec)
print_message	13/Folder.h	/^    std::string print_message() { return contents; }$/;"	f	class:Message	access:public	signature:()
print_results	10/querymain.cc	/^void print_results(const set<TextQuery::line_no>& locs, $/;"	f	signature:(const set<TextQuery::line_no>& locs, const string& sought, const TextQuery &file)
print_results	15/get_print.cc	/^void print_results(const set<TextQuery::line_no>& locs, const TextQuery &file)$/;"	f	signature:(const set<TextQuery::line_no>& locs, const TextQuery &file)
print_total	15/Basket.cc	/^void print_total(ostream &os, $/;"	f	signature:(ostream &os, const Item_base &item, size_t n)
print_total	15/V2_Basket.cc	/^void print_total(ostream &os, $/;"	f	signature:(ostream &os, const Item_base &item, size_t n)
print_total	16/Basket.cc	/^void print_total(ostream &os, $/;"	f	signature:(ostream &os, const Item_base &item, size_t n)
process	17/book.cc	/^void process(double) { }$/;"	f	signature:(double)
prompt_user	11/vocab.cc	/^ifstream &prompt_user(ifstream &stream)$/;"	f	signature:(ifstream &stream)
ptr	13/plain-ptr.cc	/^    int *ptr;$/;"	m	class:HasPtr	file:	access:private
ptr	13/smart-ptr.cc	/^    U_Ptr *ptr;        \/\/ points to use-counted U_Ptr class$/;"	m	class:HasPtr	file:	access:private
ptr	13/value-ptr.cc	/^    int *ptr;        \/\/ points to an int$/;"	m	class:HasPtr	file:	access:private
ptr	14/ScrPtr.h	/^    ScrPtr *ptr;        \/\/ points to use-counted ScrPtr class$/;"	m	class:ScreenPtr	access:private
ptr	16/Handle.h	/^    T* ptr;          \/\/ shared object$/;"	m	class:Handle	access:private
ptr	17/Handle.h	/^    T* ptr;$/;"	m	class:Handle	access:private
ptr	17/MS_Handle.h	/^    T* ptr;$/;"	m	class:Handle	access:private
ptrswap	7/useptrswap.cc	/^void ptrswap(int *&v1, int *&v2) $/;"	f	signature:(int *&v1, int *&v2)
push	16/Queue.cc	/^template <class Type> void Queue<Type>::push(const Type &val)$/;"	f	class:Queue	signature:(const Type &val)
push	16/char_queue.h	/^void Queue<const char*>::push(const char* val)$/;"	f	class:Queue	signature:(const char* val)
push	16/newQueue.h	/^    void push(const Type &t) { items.push_back(t); }$/;"	f	class:Queue	access:public	signature:(const Type &t)
push	16/queue_push_char.cc	/^void Queue<const char*>::push(const char *const &val)$/;"	f	class:Queue	signature:(const char *const &val)
push	18/MS_statmem.cc	/^void Queue<Type>::push(const Type &val)$/;"	f	class:Queue	signature:(const Type &val)
push	18/Queue.cc	/^void Queue<Type>::push(const Type &val)$/;"	f	class:Queue	signature:(const Type &val)
push	18/statmem.cc	/^void Queue<Type>::push(const Type &val)$/;"	f	class:Queue	signature:(const Type &val)
push_back	18/vec-opnew.cc	/^void Vector<T>::push_back(const T& t)$/;"	f	class:Vector	signature:(const T& t)
push_back	18/vec.cc	/^template <class T> void Vector<T>::push_back(const T& t)$/;"	f	class:Vector	signature:(const T& t)
put_Msg_in_Folders	13/Folder.cc	/^void Message::put_Msg_in_Folders(const set<Folder*> &rhs)$/;"	f	class:Message	signature:(const set<Folder*> &rhs)
q	15/Query.h	/^    Query_base *q;$/;"	m	class:Query	access:private
quantity	15/Basket2.h	/^    std::size_t quantity;  \/\/ purchase size for discount to apply$/;"	m	class:Disc_item	access:protected
query	15/Query.h	/^    const Query query;$/;"	m	class:NotQuery	access:private
query	16/Query.h	/^    Query query;$/;"	m	class:NotQuery	access:private
query_word	15/Query.h	/^    std::string query_word;   \/\/ word for which to search $/;"	m	class:WordQuery	access:private
query_word	16/Query.h	/^    std::string query_word;$/;"	m	class:WordQuery	access:private
rate	12/Account.h	/^    static double rate() { return interestRate; }$/;"	f	class:Account	access:public	signature:()
rate	12/Account.h	/^void Account::rate(double newRate) $/;"	f	class:Account	signature:(double newRate)
read_file	10/3ed_query.h	/^    void read_file(std::ifstream &is) $/;"	f	class:TextQuery	access:public	signature:(std::ifstream &is)
read_file	10/TextQuery.h	/^    void read_file(std::ifstream &is) $/;"	f	class:TextQuery	access:public	signature:(std::ifstream &is)
read_write	11/iostream_iter.cc	/^void read_write() {$/;"	f	signature:()
real_queue	16/char_queue.h	/^    Queue<std::string> real_queue; \/\/ forward calls to real_queue$/;"	m	class:Queue	access:private
reallocate	18/vec-opnew.cc	/^void Vector<T>::reallocate()$/;"	f	class:Vector	signature:()
reallocate	18/vec.cc	/^template <class T> void Vector<T>::reallocate()$/;"	f	class:Vector	signature:()
remFldr	13/Folder.h	/^    void remFldr(Folder *f) { folders.erase(f); }$/;"	f	class:Message	access:private	signature:(Folder *f)
remMsg	13/Folder.h	/^    void remMsg(Message *m) { msgs.erase(m); }$/;"	f	class:Folder	access:private	signature:(Message *m)
rem_ref	16/Handle.h	/^    void rem_ref() $/;"	f	class:Handle	access:private	signature:()
rem_ref	17/Handle.h	/^    void rem_ref() { if (--*use == 0) {delete ptr; delete use;} }$/;"	f	class:Handle	access:private	signature:()
rem_ref	17/MS_Handle.h	/^    void rem_ref() { if (--*use == 0) {delete ptr; delete use;} }$/;"	f	class:Handle	access:private	signature:()
remove	13/Folder.cc	/^void Folder::remove(Message &m)$/;"	f	class:Folder	signature:(Message &m)
remove	13/Folder.cc	/^void Message::remove(Folder &f)$/;"	f	class:Message	signature:(Folder &f)
remove_Msg_from_Folders	13/Folder.cc	/^void Message::remove_Msg_from_Folders()$/;"	f	class:Message	signature:()
report_complexity	11/vocab.cc	/^void report_complexity(vector<string>::iterator beg,$/;"	f	signature:(vector<string>::iterator beg, vector<string>::iterator end, ostream &output = cout)
reset	7/useptrparms.cc	/^void reset(int *ip)$/;"	f	signature:(int *ip)
restricted_wc	10/setexclusion.cc	/^void restricted_wc(ifstream &remove_file,$/;"	f	signature:(ifstream &remove_file, map<string, int> &word_count)
revenue	1/Sales_item.h	/^    double revenue;$/;"	m	class:Sales_item	access:private
revenue	14/Sales_item.h	/^    double revenue;$/;"	m	class:Sales_item	access:private
revenue	17/Sales_item.h	/^    double revenue;$/;"	m	class:Sales_item	access:private
rgcd	7/rgcd.cc	/^int rgcd(int v1, int v2)$/;"	f	signature:(int v1, int v2)
rhs	15/Query.h	/^    const Query lhs, rhs;   \/\/ right- and left-hand operands$/;"	m	class:BinaryQuery	access:protected
rhs	16/Query.h	/^    Query lhs, rhs;   \/\/ right and left hand operands$/;"	m	class:BinaryQuery	access:protected
right	17/bookexcept.h	/^    const std::string left, right;$/;"	m	class:isbn_mismatch	access:public
run_query	10/3ed_query.cc	/^vector<TextQuery::location> TextQuery::run_query(const string &s)$/;"	f	class:TextQuery	signature:(const string &s)
run_query	10/TextQuery.cc	/^TextQuery::run_query(const string &query_word) const$/;"	f	class:TextQuery	signature:(const string &query_word) const
s	9/str_assignOps.cc	/^string s, s2;$/;"	v
s1	2/scope_levels.cc	/^std::string s1 = "hello";  \/\/ s1 has global scope$/;"	v
s2	9/str_assignOps.cc	/^string s, s2;$/;"	v
same_isbn	1/Sales_item.h	/^    bool same_isbn(const Sales_item &rhs) const$/;"	f	class:Sales_item	access:public	signature:(const Sales_item &rhs) const
same_isbn	14/Sales_item.h	/^    bool same_isbn(const Sales_item &rhs) const$/;"	f	class:Sales_item	access:public	signature:(const Sales_item &rhs) const
same_isbn	17/Sales_item.h	/^    bool same_isbn(const Sales_item &rhs) const$/;"	f	class:Sales_item	access:public	signature:(const Sales_item &rhs) const
save	13/Folder.cc	/^void Folder::save(Message &m)$/;"	f	class:Folder	signature:(Message &m)
save	13/Folder.cc	/^void Message::save(Folder &f)$/;"	f	class:Message	signature:(Folder &f)
set	12/screen3.h	/^Screen& Screen::set(char c) $/;"	f	class:Screen	signature:(char c)
set	12/screen3.h	/^Screen& Screen::set(index r, index c, char ch)$/;"	f	class:Screen	signature:(index r, index c, char ch)
set	12/screen4.h	/^Screen& Screen::set(char c) $/;"	f	class:Screen	signature:(char c)
set	12/screen4.h	/^Screen& Screen::set(index r, index c, char ch)$/;"	f	class:Screen	signature:(index r, index c, char ch)
set	12/screen5.h	/^Screen& Screen::set(char c) $/;"	f	class:Screen	signature:(char c)
set	12/screen5.h	/^Screen& Screen::set(index r, index c, char ch)$/;"	f	class:Screen	signature:(index r, index c, char ch)
set	18/screen.cc	/^Screen& Screen::set(char c)$/;"	f	class:Screen	signature:(char c)
set	18/screen.cc	/^Screen& Screen::set(index r, index c, char ch)$/;"	f	class:Screen	signature:(index r, index c, char ch)
set_int	13/plain-ptr.cc	/^    void set_int(int i) { val = i; }$/;"	f	class:HasPtr	access:public	signature:(int i)
set_int	13/smart-ptr.cc	/^    void set_int(int i) { val = i; }$/;"	f	class:HasPtr	access:public	signature:(int i)
set_int	13/value-ptr.cc	/^    void set_int(int i)  { val = i; }$/;"	f	class:HasPtr	access:public	signature:(int i)
set_ptr	13/plain-ptr.cc	/^    void set_ptr(int *p) { ptr = p; }$/;"	f	class:HasPtr	access:public	signature:(int *p)
set_ptr	13/smart-ptr.cc	/^    void set_ptr(int *p) { ptr->ip = p; }$/;"	f	class:HasPtr	access:public	signature:(int *p)
set_ptr	13/value-ptr.cc	/^    void set_ptr(int *p) { ptr = p; }$/;"	f	class:HasPtr	access:public	signature:(int *p)
set_ptr_val	13/plain-ptr.cc	/^    void set_ptr_val(int val) const { *ptr = val; }$/;"	f	class:HasPtr	access:public	signature:(int val) const
set_ptr_val	13/smart-ptr.cc	/^    void set_ptr_val(int i) { *ptr->ip = i; }$/;"	f	class:HasPtr	access:public	signature:(int i)
set_ptr_val	13/value-ptr.cc	/^    void set_ptr_val(int p) const { *ptr = p; }$/;"	f	class:HasPtr	access:public	signature:(int p) const
set_type	15/Basket.h	/^    typedef std::multiset<Sales_item, Comp> set_type;$/;"	t	class:Basket	access:public
shorterString	7/inline_shorter.cc	/^shorterString(const string &s1, const string &s2)$/;"	f	signature:(const string &s1, const string &s2)
show_copy_control	13/plain-ptr.cc	/^void show_copy_control()$/;"	f	signature:()
size	10/3ed_query.h	/^    str_size size() const { return lines_of_text.size(); }$/;"	f	class:TextQuery	access:public	signature:() const
size	10/TextQuery.h	/^    str_size size() const { return lines_of_text.size(); }$/;"	f	class:TextQuery	access:public	signature:() const
size	15/Basket.h	/^    size_type size(const Sales_item &i) const$/;"	f	class:Basket	access:public	signature:(const Sales_item &i) const
size	15/Basket2.h	/^    size_type size(const Sales_item &i) const$/;"	f	class:Basket	access:public	signature:(const Sales_item &i) const
size	18/vec.cc	/^    size_t size() const { return first_free - elements; }$/;"	f	class:Vector	access:public	signature:() const
size_compare	14/fcnobj.cc	/^bool size_compare(string s, string::size_type sz)$/;"	f	signature:(string s, string::size_type sz)
size_type	15/Basket.h	/^    typedef set_type::size_type size_type;$/;"	t	class:Basket	access:public
size_type	15/Basket2.h	/^    typedef std::multiset<Sales_item, Comp>::size_type size_type;$/;"	t	class:Basket	access:public
size_type	16/Basket.h	/^    typedef std::multiset<Sales_item>::size_type size_type;$/;"	t	class:Basket	access:public
skip_whitespace	10/3ed_query.cc	/^TextQuery::skip_whitespace(const string &line, str_size pos)$/;"	f	class:TextQuery	signature:(const string &line, str_size pos)
sleeping	17/virt.h	/^    bool sleeping() const {return sleeping_flag;}$/;"	f	class:Panda	access:public	signature:() const
sleeping	17/virt.h	/^    void sleeping(bool newval) {sleeping_flag = newval;}$/;"	f	class:Panda	access:public	signature:(bool newval)
sleeping_flag	17/virt.h	/^    bool sleeping_flag;$/;"	m	class:Panda	access:protected
sp	14/ScrPtr.h	/^    Screen *sp;$/;"	m	class:ScrPtr	access:private
st	3/str_vers3.cc	/^const char *st = "The expense of spirit\\n";$/;"	v
static_mem	18/statmem.cc	/^    static int static_mem;$/;"	m	struct:Queue::QueueItem	file:	access:public
static_mem	18/statmem.cc	/^int Queue<Type>::QueueItem::static_mem = 1024;$/;"	m	class:Queue::QueueItem	file:
store_file	10/3ed_query.cc	/^void TextQuery::store_file(ifstream &is)$/;"	f	class:TextQuery	signature:(ifstream &is)
store_file	10/TextQuery.cc	/^void TextQuery::store_file(ifstream &is)$/;"	f	class:TextQuery	signature:(ifstream &is)
str	7/cfcn_ex.c	/^const char *str = "hello";$/;"	v
str_size	10/3ed_query.h	/^    typedef std::string::size_type str_size;$/;"	t	class:TextQuery	access:public
str_size	10/TextQuery.h	/^    typedef std::string::size_type str_size;$/;"	t	class:TextQuery	access:public
strip_caps	10/3ed_query.cc	/^void TextQuery::strip_caps(string &line)$/;"	f	class:TextQuery	signature:(string &line)
strip_punct	10/3ed_query.cc	/^void TextQuery::strip_punct(string &line)$/;"	f	class:TextQuery	signature:(string &line)
strip_suffixes	10/3ed_query.cc	/^void TextQuery::strip_suffixes(string &word)$/;"	f	class:TextQuery	signature:(string &word)
suffix_s	10/3ed_query.cc	/^void TextQuery::suffix_s(string &word)$/;"	f	class:TextQuery	signature:(string &word)
swap	16/swap.cc	/^void swap(T& val1, T& val2)$/;"	f	signature:(T& val1, T& val2)
swap	7/badswap.cc	/^void swap(int v1, int v2) $/;"	f	signature:(int v1, int v2)
swap	7/swap.cc	/^void swap(int &v1, int &v2) $/;"	f	signature:(int &v1, int &v2)
tail	16/Queue.h	/^    QueueItem<Type> *tail;         \/\/ pointer to last element in Queue$/;"	m	class:Queue	access:private
tail	16/int-Queue.h	/^    QueueItem<int> *tail;   $/;"	m	class:Queue	access:private
tail	18/MS_statmem.cc	/^    QueueItem *tail;   \/\/ pointer to last element in Queue$/;"	m	class:Queue	file:	access:private
tail	18/Queue.h	/^    QueueItem *tail;   \/\/ pointer to last element in Queue$/;"	m	class:Queue	access:private
tail	18/statmem.cc	/^    QueueItem *tail;   \/\/ pointer to last element in Queue$/;"	m	class:Queue	file:	access:private
test_insert	10/3ed_query.cc	/^void TextQuery::test_insert(const string &line, str_size prev_pos, $/;"	f	class:TextQuery	signature:(const string &line, str_size prev_pos, str_size pos, line_no line_num)
text_line	10/3ed_query.h	/^    std::string text_line(line_no line) { return lines_of_text[line]; }$/;"	f	class:TextQuery	access:public	signature:(line_no line)
text_line	10/TextQuery.cc	/^string TextQuery::text_line(line_no line) const$/;"	f	class:TextQuery	signature:(line_no line) const
total	15/Basket.cc	/^double Basket::total() const$/;"	f	class:Basket	signature:() const
total	15/V2_Basket.cc	/^double Basket::total() const$/;"	f	class:Basket	signature:() const
total	16/Basket.cc	/^double Basket::total() const$/;"	f	class:Basket	signature:() const
two_left_feet	17/Animal.h	/^enum DanceType { two_left_feet, macarena, fandango, waltz };$/;"	e	enum:Bear::DanceType
two_left_feet	17/nopandaprint.h	/^enum DanceType { two_left_feet, macarena, fandango, waltz };$/;"	e	enum:Bear::DanceType
two_left_feet	17/virt.h	/^    enum DanceType { two_left_feet, macarena, fandango };$/;"	e	enum:Bear::DanceType
units_sold	1/Sales_item.h	/^    unsigned units_sold;$/;"	m	class:Sales_item	access:private
units_sold	14/Sales_item.h	/^    unsigned units_sold;$/;"	m	class:Sales_item	access:private
units_sold	17/Sales_item.h	/^    unsigned units_sold;$/;"	m	class:Sales_item	access:private
use	13/smart-ptr.cc	/^	size_t use;$/;"	m	class:U_Ptr	file:	access:private
use	14/ScrPtr.h	/^    size_t use;$/;"	m	class:ScrPtr	access:private
use	15/Basket.h	/^    std::size_t *use;     \/\/ pointer to shared use count$/;"	m	class:Sales_item	access:private
use	15/Basket2.h	/^    std::size_t *use;     \/\/ pointer to shared use count$/;"	m	class:Sales_item	access:private
use	15/Query.h	/^    std::size_t *use;$/;"	m	class:Query	access:private
use	16/Handle.h	/^    size_t *use;     \/\/ count of how many Handles point to *ptr$/;"	m	class:Handle	access:private
use	17/Handle.h	/^    size_t *use;$/;"	m	class:Handle	access:private
use	17/MS_Handle.h	/^    size_t *use;$/;"	m	class:Handle	access:private
val	13/plain-ptr.cc	/^    int val;$/;"	m	class:HasPtr	file:	access:private
val	13/smart-ptr.cc	/^    int val;$/;"	m	class:HasPtr	file:	access:private
val	13/value-ptr.cc	/^    int val;$/;"	m	class:HasPtr	file:	access:private
val	16/Queue-assign.cc	/^    std::size_t val;$/;"	m	class:SmallInt	file:	access:private
waltz	17/Animal.h	/^enum DanceType { two_left_feet, macarena, fandango, waltz };$/;"	e	enum:Bear::DanceType
waltz	17/nopandaprint.h	/^enum DanceType { two_left_feet, macarena, fandango, waltz };$/;"	e	enum:Bear::DanceType
whitespace_chars	10/3ed_query.h	/^    static std::string whitespace_chars;     $/;"	m	class:TextQuery	access:private
whitespace_chars	10/TextQuery.h	/^    static std::string whitespace_chars;     $/;"	m	class:TextQuery	access:private
width	12/Screen.h	/^    index height, width;$/;"	m	class:Screen	access:private
width	12/screen3.h	/^    index height, width;$/;"	m	class:Screen	access:private
width	12/screen4.h	/^    int height, width;$/;"	m	class:Screen	access:private
width	12/screen5.h	/^    index height, width;$/;"	m	class:Screen	access:private
width	18/Screen.h	/^    index height, width;$/;"	m	class:Screen	access:private
word_map	10/3ed_query.h	/^    std::map< std::string, std::vector<location> > word_map;  $/;"	m	class:TextQuery	access:private
word_map	10/TextQuery.h	/^    std::map< std::string, std::set<line_no> > word_map;  $/;"	m	class:TextQuery	access:private
~Base	18/dyn_cast.cc	/^   virtual ~Base() {};$/;"	f	struct:Base	access:public	signature:()
~Base	18/typeid.cc	/^    virtual ~Base() { }$/;"	f	struct:Base	access:public	signature:()
~CachedObj	18/CachedObj.h	/^    virtual ~CachedObj() { }$/;"	f	class:CachedObj	access:public	signature:()
~Folder	13/Folder.cc	/^Folder::~Folder()$/;"	f	class:Folder	signature:()
~Handle	16/Handle.h	/^    ~Handle() { rem_ref(); }$/;"	f	class:Handle	access:public	signature:()
~Handle	17/Handle.h	/^    ~Handle() { rem_ref(); }$/;"	f	class:Handle	access:public	signature:()
~Handle	17/MS_Handle.h	/^    ~Handle() { rem_ref(); }$/;"	f	class:Handle	access:public	signature:()
~HasPtr	13/smart-ptr.cc	/^    ~HasPtr() { if (--ptr->use == 0) delete ptr; } $/;"	f	class:HasPtr	access:public	signature:()
~HasPtr	13/value-ptr.cc	/^    ~HasPtr() { delete ptr; } $/;"	f	class:HasPtr	access:public	signature:()
~Item_base	15/Basket.h	/^    virtual ~Item_base() { } $/;"	f	class:Item_base	access:public	signature:()
~Item_base	15/Basket2.h	/^    virtual ~Item_base() { } $/;"	f	class:Item_base	access:public	signature:()
~Item_base	16/Basket.h	/^    virtual ~Item_base() { } $/;"	f	class:Item_base	access:public	signature:()
~Message	13/Folder.cc	/^Message::~Message()$/;"	f	class:Message	signature:()
~Query	15/Query.h	/^    ~Query() { decr_use(); }$/;"	f	class:Query	access:public	signature:()
~Query_base	15/Query.h	/^    virtual ~Query_base() { }$/;"	f	class:Query_base	access:protected	signature:()
~Query_base	16/Query.h	/^    virtual ~Query_base() { }$/;"	f	class:Query_base	access:protected	signature:()
~Queue	16/Queue.h	/^    ~Queue() { destroy(); }$/;"	f	class:Queue	access:public	signature:()
~Queue	18/MS_statmem.cc	/^    ~Queue() { destroy(); }$/;"	f	class:Queue	access:public	signature:()
~Queue	18/Queue.h	/^    ~Queue() { destroy(); }$/;"	f	class:Queue	access:public	signature:()
~Queue	18/statmem.cc	/^    ~Queue() { destroy(); }$/;"	f	class:Queue	access:public	signature:()
~Sales_item	15/Basket.h	/^    ~Sales_item() { decr_use(); }$/;"	f	class:Sales_item	access:public	signature:()
~Sales_item	15/Basket2.h	/^    ~Sales_item() { decr_use(); }$/;"	f	class:Sales_item	access:public	signature:()
~ScrPtr	14/ScrPtr.h	/^    ~ScrPtr() { delete sp; }$/;"	f	class:ScrPtr	access:private	signature:()
~ScreenPtr	14/ScrPtr.h	/^    ~ScreenPtr() { if (--ptr->use == 0) delete ptr; } $/;"	f	class:ScreenPtr	access:public	signature:()
~U_Ptr	13/smart-ptr.cc	/^	~U_Ptr() { delete ip; }$/;"	f	class:U_Ptr	file:	access:private	signature:()
~isbn_mismatch	17/bookexcept.h	/^    virtual ~isbn_mismatch() throw() { }$/;"	f	class:isbn_mismatch	access:public	signature:()
