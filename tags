!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
Account	12/Account.h	/^class Account {$/;"	c
AndQuery	15/Query.h	/^    AndQuery(Query left, Query right): $/;"	f	class:AndQuery
AndQuery	15/Query.h	/^class AndQuery: public BinaryQuery {$/;"	c
AndQuery	16/Query.h	/^    AndQuery(Query left, Query right): $/;"	f	class:AndQuery
AndQuery	16/Query.h	/^class AndQuery: public BinaryQuery {$/;"	c
BASKET_H	15/Basket.h	31;"	d
BASKET_H	15/Basket2.h	31;"	d
BASKET_H	16/Basket.h	31;"	d
BOOK_EXCEPT	17/bookexcept.h	31;"	d
Base	15/scope.cc	/^    Base(): mem(0) { }$/;"	f	struct:Base
Base	15/scope.cc	/^struct Base {$/;"	s	file:
Base	18/dyn_cast.cc	/^struct Base {$/;"	s	file:
Base	18/typeid.cc	/^struct Base {$/;"	s	file:
Basket	15/Basket.h	/^    Basket(): items(compare) { }  \/\/ initialze the comparator $/;"	f	class:Basket
Basket	15/Basket.h	/^class Basket {$/;"	c
Basket	15/Basket2.h	/^    Basket(): items(compare) { }  \/\/ initialze the comparator$/;"	f	class:Basket
Basket	15/Basket2.h	/^class Basket {$/;"	c
Basket	16/Basket.h	/^class Basket {$/;"	c
Bear	17/Animal.h	/^    Bear(std::string name, bool onExhibit=true, $/;"	f	class:Bear
Bear	17/Animal.h	/^class Bear : public ZooAnimal {$/;"	c
Bear	17/nopandaprint.h	/^    Bear(std::string name, bool onExhibit=true, $/;"	f	class:Bear
Bear	17/nopandaprint.h	/^class Bear : public ZooAnimal {$/;"	c
Bear	17/virt.h	/^    Bear() : dance_flag(two_left_feet) { }$/;"	f	class:Bear
Bear	17/virt.h	/^Bear::Bear(std::string name, bool onExhibit):$/;"	f	class:Bear
Bear	17/virt.h	/^class Bear : virtual public ZooAnimal {$/;"	c
BinaryQuery	15/Query.h	/^    BinaryQuery(Query left, Query right, std::string op): $/;"	f	class:BinaryQuery
BinaryQuery	15/Query.h	/^class BinaryQuery: public Query_base {$/;"	c
BinaryQuery	16/Query.h	/^    BinaryQuery(Query left, Query right, std::string op): $/;"	f	class:BinaryQuery
BinaryQuery	16/Query.h	/^class BinaryQuery: public Query_base {$/;"	c
Bulk_item	15/Basket.h	/^    Bulk_item(): min_qty(0), discount(0.0) { }$/;"	f	class:Bulk_item
Bulk_item	15/Basket.h	/^    Bulk_item(const std::string& book, double sales_price, $/;"	f	class:Bulk_item
Bulk_item	15/Basket.h	/^class Bulk_item : public Item_base {$/;"	c
Bulk_item	15/Basket2.h	/^    Bulk_item(const std::string& book = "", $/;"	f	class:Bulk_item
Bulk_item	15/Basket2.h	/^class Bulk_item : public Disc_item {$/;"	c
Bulk_item	16/Basket.h	/^    Bulk_item(): min_qty(0), discount(0.0) { }$/;"	f	class:Bulk_item
Bulk_item	16/Basket.h	/^    Bulk_item(const std::string& book, double sales_price, $/;"	f	class:Bulk_item
Bulk_item	16/Basket.h	/^class Bulk_item : public Item_base {$/;"	c
CACHED_OBJ_H	18/CachedObj.h	31;"	d
CachedObj	18/CachedObj.h	/^template <class T> class CachedObj {$/;"	c
CheckedPtr	14/CheckedPtr.h	/^    CheckedPtr(int *b, int *e): beg(b), end(e), curr(b) { }$/;"	f	class:CheckedPtr
CheckedPtr	14/CheckedPtr.h	/^class CheckedPtr {$/;"	c
Comp	15/Basket.h	/^    typedef bool (*Comp)(const Sales_item&, const Sales_item&);$/;"	t	class:Basket
Comp	15/Basket2.h	/^    typedef bool (*Comp)(const Sales_item&, const Sales_item&);$/;"	t	class:Basket
DIRS	makefile	/^DIRS = 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18$/;"	m
DanceType	17/Animal.h	/^enum DanceType { two_left_feet, macarena, fandango, waltz };$/;"	g	class:Bear
DanceType	17/nopandaprint.h	/^enum DanceType { two_left_feet, macarena, fandango, waltz };$/;"	g	class:Bear
DanceType	17/virt.h	/^    enum DanceType { two_left_feet, macarena, fandango };$/;"	g	class:Bear
Derived	15/scope.cc	/^    Derived(int i): mem(i) { }     \/\/ initializes Derived::mem$/;"	f	struct:Derived
Derived	15/scope.cc	/^struct Derived : Base {$/;"	s	file:
Derived	18/dyn_cast.cc	/^struct Derived: public Base { };$/;"	s	file:
Derived	18/typeid.cc	/^struct Derived : Base { };$/;"	s	file:
Disc_item	15/Basket2.h	/^    Disc_item(const std::string& book = "", $/;"	f	class:Disc_item
Disc_item	15/Basket2.h	/^class Disc_item : public Item_base {$/;"	c
EQ	14/count-size.cc	/^    EQ(size_t val = 0): bound(val) { }$/;"	f	class:EQ
EQ	14/count-size.cc	/^class EQ {$/;"	c	file:
Endangered	17/Animal.h	/^class Endangered {$/;"	c
Endangered	17/nopandaprint.h	/^    Endangered(Status stat): animal_status(stat) { }$/;"	f	class:Endangered
Endangered	17/nopandaprint.h	/^class Endangered {$/;"	c
Endangered	17/virt.h	/^    Endangered(Status stat): animal_status(stat) { }$/;"	f	class:Endangered
Endangered	17/virt.h	/^class Endangered {$/;"	c
Fail	7/conv-enums.cc	/^enum Stat {Fail, Pass};$/;"	e	enum:Stat	file:
Folder	13/Folder.cc	/^Folder::Folder(const Folder &f)$/;"	f	class:Folder
Folder	13/Folder.h	/^    Folder() { } \/\/ defaults ok$/;"	f	class:Folder
Folder	13/Folder.h	/^class Folder {$/;"	c
Foo	14/subscript.cc	/^Foo(): data(100) { for (int i = 0; i != 100; ++i) data[i] = i; }$/;"	f	class:Foo
Foo	14/subscript.cc	/^class Foo {$/;"	c	file:
GT6	11/count-size.cc	/^bool GT6(const string &s) $/;"	f
GT6	11/vocab.cc	/^bool GT6(const string &s)$/;"	f
GT_cls	14/count-size.cc	/^    GT_cls(size_t val = 0): bound(val) { }$/;"	f	class:GT_cls
GT_cls	14/count-size.cc	/^class GT_cls {$/;"	c	file:
Handle	16/Handle.h	/^    Handle(T *p = 0): ptr(p), use(new size_t(1)) { }$/;"	f	class:Handle
Handle	16/Handle.h	/^    Handle(const Handle& h): ptr(h.ptr), use(h.use) $/;"	f	class:Handle
Handle	16/Handle.h	/^template <class T> class Handle {$/;"	c
Handle	17/Handle.h	/^    Handle(const Handle& h): ptr(h.ptr), use(h.use) { ++*use; }$/;"	f	class:Handle
Handle	17/Handle.h	/^template <class T> Handle<T>::Handle(T *p)$/;"	f	class:Handle
Handle	17/Handle.h	/^template <class T> class Handle {$/;"	c
Handle	17/MS_Handle.h	/^    Handle(T *p = 0) try : ptr(p), use(new size_t(1)) { $/;"	f	class:Handle
Handle	17/MS_Handle.h	/^    Handle(const Handle& h): ptr(h.ptr), use(h.use) { ++*use; }$/;"	f	class:Handle
Handle	17/MS_Handle.h	/^template <class T> class Handle {$/;"	c
HasPtr	13/plain-ptr.cc	/^    HasPtr(int *p, int i): ptr(p), val(i) { }$/;"	f	class:HasPtr
HasPtr	13/plain-ptr.cc	/^class HasPtr {$/;"	c	file:
HasPtr	13/smart-ptr.cc	/^    HasPtr(const HasPtr &orig):$/;"	f	class:HasPtr
HasPtr	13/smart-ptr.cc	/^    HasPtr(int *p, int i): ptr(new U_Ptr(p)), val(i) { }$/;"	f	class:HasPtr
HasPtr	13/smart-ptr.cc	/^class HasPtr {$/;"	c	file:
HasPtr	13/value-ptr.cc	/^    HasPtr(const HasPtr &orig):$/;"	f	class:HasPtr
HasPtr	13/value-ptr.cc	/^    HasPtr(const int &p, int i): ptr(new int(p)), val(i) {}$/;"	f	class:HasPtr
HasPtr	13/value-ptr.cc	/^class HasPtr {$/;"	c	file:
INLINE	7/enum-match.cc	/^enum Tokens {INLINE = 128, VIRTUAL = 129};$/;"	e	enum:Tokens	file:
Item_base	15/Basket.h	/^    Item_base(const std::string &book = "", $/;"	f	class:Item_base
Item_base	15/Basket.h	/^class Item_base {$/;"	c
Item_base	15/Basket2.h	/^    Item_base(const std::string &book = "", $/;"	f	class:Item_base
Item_base	15/Basket2.h	/^class Item_base {$/;"	c
Item_base	16/Basket.h	/^    Item_base(const std::string &book = "", $/;"	f	class:Item_base
Item_base	16/Basket.h	/^class Item_base {$/;"	c
LOCALMATH_H	7/localMath.h	31;"	d
LOCFILE	9/makefile	/^LOCFILE = -I..\/9$/;"	m
LOCFLAGS	10/makefile	/^LOCFLAGS=-I ..\/9$/;"	m
LOCFLAGS	11/makefile	/^LOCFLAGS=-I ..\/1$/;"	m
LOCFLAGS	14/makefile	/^LOCFLAGS = -I..\/11 -I..\/12$/;"	m
LOCFLAGS	15/makefile	/^LOCFLAGS = -I..\/10$/;"	m
LOCFLAGS	16/makefile	/^LOCFLAGS = -I. -I..\/1 -I..\/10$/;"	m
LOCFLAGS	5/makefile	/^LOCFLAGS = -I..\/1$/;"	m
LOCFLAGS	6/makefile	/^LOCFLAGS = -I..\/1$/;"	m
Lim_item	15/Basket.h	/^    Lim_item(const std::string& book = "", $/;"	f	class:Lim_item
Lim_item	15/Basket.h	/^class Lim_item : public Item_base {$/;"	c
Lim_item	15/Basket2.h	/^    Lim_item(const std::string& book = "", $/;"	f	class:Lim_item
Lim_item	15/Basket2.h	/^class Lim_item : public Disc_item {$/;"	c
Lim_item	16/Basket.h	/^    Lim_item(const std::string& book = "", $/;"	f	class:Lim_item
Lim_item	16/Basket.h	/^class Lim_item : public Item_base {$/;"	c
Message	13/Folder.cc	/^Message::Message(const Message &m): $/;"	f	class:Message
Message	13/Folder.h	/^    Message(const std::string &str = ""): $/;"	f	class:Message
Message	13/Folder.h	/^class Message {$/;"	c
Msg_iter	13/Folder.h	/^    typedef std::set<Message*>::const_iterator Msg_iter;$/;"	t	class:Folder
NotQuery	15/Query.h	/^    NotQuery(Query q): query(q) { }$/;"	f	class:NotQuery
NotQuery	15/Query.h	/^class NotQuery: public Query_base {$/;"	c
NotQuery	16/Query.h	/^    NotQuery(Query q): query(q) { }$/;"	f	class:NotQuery
NotQuery	16/Query.h	/^class NotQuery: public Query_base {$/;"	c
OBJECTS	1/makefile	/^OBJECTS = main_only.exe forcount.exe for_ex.exe whilecount.exe \\$/;"	m
OBJECTS	10/makefile	/^OBJECTS = word_transform.exe multimap.exe \\$/;"	m
OBJECTS	11/makefile	/^OBJECTS = inserters.exe use-istream-iter.exe \\$/;"	m
OBJECTS	12/makefile	/^OBJECTS = screen3.exe$/;"	m
OBJECTS	13/makefile	/^OBJECTS = Foldermain.exe smart-ptr.exe value-ptr.exe \\$/;"	m
OBJECTS	14/makefile	/^OBJECTS = subscript.exe absInt.exe fcnobj.exe directcall.exe \\$/;"	m
OBJECTS	15/makefile	/^OBJECTS = Basket_main.exe scope.exe V2_Basket_main.exe \\$/;"	m
OBJECTS	16/makefile	/^OBJECTS = QueueMain.exe QueueMain2.exe QueueMain3.exe \\$/;"	m
OBJECTS	17/makefile	/^OBJECTS = use-handle.exe book.exe$/;"	m
OBJECTS	18/makefile	/^OBJECTS = statmem.exe QueueMain.exe QueueMain2.exe QueueMain3.exe \\$/;"	m
OBJECTS	2/makefile	/^OBJECTS = pow2.exe pow2_try2.exe pow_tbl.exe twosome.exe \\$/;"	m
OBJECTS	3/makefile	/^OBJECTS = string_size.exe char_repl.exe init_vec.exe \\$/;"	m
OBJECTS	4/makefile	/^OBJECTS = arr_init.exe  ptr_traversal.exe \\$/;"	m
OBJECTS	5/makefile	/^OBJECTS = overflow.exe vec_init.exe incr.exe \\$/;"	m
OBJECTS	6/makefile	/^OBJECTS = forcount.exe copy_array.exe wdebug.exe nodebug.exe \\$/;"	m
OBJECTS	7/makefile	/^OBJECTS = swapmain1.exe swapmain2.exe enum-match.exe conv-enums.exe \\$/;"	m
OBJECTS	8/makefile	/^OBJECTS = manips.exe prec.exe point.exe sci_dec.exe \\$/;"	m
OBJECTS	9/makefile	/^OBJECTS = capacity.exe str_print.exe str_assignOps.exe \\$/;"	m
OrQuery	15/Query.h	/^    OrQuery(Query left, Query right): $/;"	f	class:OrQuery
OrQuery	15/Query.h	/^class OrQuery: public BinaryQuery {$/;"	c
OrQuery	16/Query.h	/^    OrQuery(Query left, Query right): $/;"	f	class:OrQuery
OrQuery	16/Query.h	/^class OrQuery: public BinaryQuery {$/;"	c
Panda	17/Animal.h	/^Panda::Panda(std::string name, bool onExhibit)$/;"	f	class:Panda
Panda	17/Animal.h	/^class Panda : public Bear, public Endangered {$/;"	c
Panda	17/nopandaprint.h	/^Panda::Panda()$/;"	f	class:Panda
Panda	17/nopandaprint.h	/^Panda::Panda(std::string name, bool onExhibit)$/;"	f	class:Panda
Panda	17/nopandaprint.h	/^class Panda : public Bear, public Endangered {$/;"	c
Panda	17/virt.h	/^Panda::Panda(std::string name, bool onExhibit)$/;"	f	class:Panda
Panda	17/virt.h	/^class Panda : public Bear,$/;"	c
Pass	7/conv-enums.cc	/^enum Stat {Fail, Pass};$/;"	e	enum:Stat	file:
PolarBear	17/Animal.h	/^class PolarBear : public Bear { \/* . . . *\/ };$/;"	c
QUERY_H	15/Query.h	31;"	d
QUERY_H	16/Query.h	31;"	d
QUEUE_H	16/Queue.h	31;"	d
QUEUE_H	16/newQueue.h	31;"	d
QUEUE_H	18/Queue.h	31;"	d
QUQUE_CHAR_H	16/char_queue.h	31;"	d
Query	15/Query.h	/^    Query(Query_base *query): q(query), $/;"	f	class:Query
Query	15/Query.h	/^    Query(const Query &c): q(c.q), use(c.use) { ++*use; }$/;"	f	class:Query
Query	15/Query.h	/^Query::Query(const std::string &s): q(new WordQuery(s)),$/;"	f	class:Query
Query	15/Query.h	/^class Query {$/;"	c
Query	16/Query.h	/^    Query(Query_base *p): h(p) { }  \/\/ bind Handle to the given pointer$/;"	f	class:Query
Query	16/Query.h	/^Query::Query(const std::string &s): h(new WordQuery(s)) { }$/;"	f	class:Query
Query	16/Query.h	/^class Query {$/;"	c
Query	17/cplusplus_primer.h	/^    class Query { $/;"	c	namespace:cplusplus_primer
Query_base	15/Query.h	/^class Query_base {$/;"	c
Query_base	16/Query.h	/^class Query_base {$/;"	c
Query_base	17/cplusplus_primer.h	/^    class Query_base { \/* . . . *\/};$/;"	c	namespace:cplusplus_primer
Queue	16/Queue.h	/^    Queue(): head(0), tail(0) { }$/;"	f	class:Queue
Queue	16/Queue.h	/^    Queue(It beg, It end): $/;"	f	class:Queue
Queue	16/Queue.h	/^    Queue(const Queue &Q): head(0), tail(0) $/;"	f	class:Queue
Queue	16/Queue.h	/^template <class Type> class Queue {$/;"	c
Queue	16/Queue_interface.h	/^template <class Type> class Queue {$/;"	c
Queue	16/char_queue.h	/^template<> class Queue<const char*> {$/;"	c
Queue	16/int-Queue.h	/^template <class Type> class Queue<int> {$/;"	c
Queue	16/newQueue.h	/^    Queue() { }$/;"	f	class:Queue
Queue	16/newQueue.h	/^    template <class It> Queue(It beg, It end): items(beg, end) { }$/;"	f	class:Queue
Queue	16/newQueue.h	/^template <class Type> class Queue {$/;"	c
Queue	18/MS_statmem.cc	/^    Queue(): head(0), tail(0) { }$/;"	f	class:Queue
Queue	18/MS_statmem.cc	/^    Queue(const Queue &Q): head(0), tail(0) {copy_elems(Q);}$/;"	f	class:Queue
Queue	18/MS_statmem.cc	/^template <class Type> class Queue {$/;"	c	file:
Queue	18/Queue.h	/^    Queue(): head(0), tail(0) { }$/;"	f	class:Queue
Queue	18/Queue.h	/^    Queue(const Queue &Q): head(0), tail(0) {copy(Q);}$/;"	f	class:Queue
Queue	18/Queue.h	/^    template <class It> Queue(It, It): head(0), tail(0)$/;"	f	class:Queue
Queue	18/Queue.h	/^template <class Type> class Queue {$/;"	c
Queue	18/statmem.cc	/^    Queue(): head(0), tail(0) { }$/;"	f	class:Queue
Queue	18/statmem.cc	/^    Queue(const Queue &Q): head(0), tail(0) {copy(Q);}$/;"	f	class:Queue
Queue	18/statmem.cc	/^template <class Type> class Queue {$/;"	c	file:
QueueItem	16/Queue.h	/^    QueueItem(const Type &t): item(t), next(0) { }$/;"	f	class:QueueItem
QueueItem	16/Queue.h	/^template <class Type> class QueueItem {$/;"	c
QueueItem	18/MS_statmem.cc	/^        QueueItem(const Type &t): item(t), next(0) { }$/;"	f	struct:Queue::QueueItem
QueueItem	18/MS_statmem.cc	/^    struct QueueItem {$/;"	s	class:Queue	file:
QueueItem	18/Queue.cc	/^Queue<Type>::QueueItem::QueueItem(const Type &t): $/;"	f	class:Queue::QueueItem
QueueItem	18/Queue.h	/^    struct QueueItem {$/;"	s	class:Queue
QueueItem	18/statmem.cc	/^    QueueItem(const Type &t): item(t), next(0) { }$/;"	f	struct:Queue::QueueItem
QueueItem	18/statmem.cc	/^struct Queue<Type>::QueueItem {$/;"	s	class:Queue	file:
Raccoon	17/virt.h	/^Raccoon::Raccoon(std::string name, bool onExhibit)$/;"	f	class:Raccoon
Raccoon	17/virt.h	/^class Raccoon : public virtual ZooAnimal {$/;"	c
SALESITEM_H	1/Sales_item.h	31;"	d
SALESITEM_H	14/Sales_item.h	31;"	d
SCREEN5_H	12/screen5.h	31;"	d
Sales_item	1/Sales_item.h	/^    Sales_item(): units_sold(0), revenue(0.0) { }$/;"	f	class:Sales_item
Sales_item	1/Sales_item.h	/^    Sales_item(const std::string &book):$/;"	f	class:Sales_item
Sales_item	1/Sales_item.h	/^    Sales_item(std::istream &is) { is >> *this; }$/;"	f	class:Sales_item
Sales_item	1/Sales_item.h	/^class Sales_item {$/;"	c
Sales_item	14/Sales_item.h	/^    Sales_item(): units_sold(0), revenue(0.0) { }$/;"	f	class:Sales_item
Sales_item	14/Sales_item.h	/^    Sales_item(const std::string &book):$/;"	f	class:Sales_item
Sales_item	14/Sales_item.h	/^    Sales_item(std::istream &is) { is >> *this; }$/;"	f	class:Sales_item
Sales_item	14/Sales_item.h	/^class Sales_item {$/;"	c
Sales_item	15/Basket.h	/^    Sales_item(): p(0), use(new std::size_t(1)) { }$/;"	f	class:Sales_item
Sales_item	15/Basket.h	/^    Sales_item(const Sales_item &i): $/;"	f	class:Sales_item
Sales_item	15/Basket.h	/^Sales_item::Sales_item(const Item_base &item):$/;"	f	class:Sales_item
Sales_item	15/Basket.h	/^class Sales_item {$/;"	c
Sales_item	15/Basket2.h	/^    Sales_item(): p(0), use(new std::size_t(1)) { }$/;"	f	class:Sales_item
Sales_item	15/Basket2.h	/^    Sales_item(const Sales_item &i): p(i.p), use(i.use) $/;"	f	class:Sales_item
Sales_item	15/Basket2.h	/^Sales_item::Sales_item(const Item_base &item):$/;"	f	class:Sales_item
Sales_item	15/Basket2.h	/^class Sales_item {$/;"	c
Sales_item	16/Basket.h	/^    Sales_item(): h() { }$/;"	f	class:Sales_item
Sales_item	16/Basket.h	/^    Sales_item(const Item_base &item): h(item.clone()) { }$/;"	f	class:Sales_item
Sales_item	16/Basket.h	/^class Sales_item {$/;"	c
Sales_item	17/Sales_item.h	/^    Sales_item(): units_sold(0), revenue(0.0) { }$/;"	f	class:Sales_item
Sales_item	17/Sales_item.h	/^    Sales_item(const std::string &book):$/;"	f	class:Sales_item
Sales_item	17/Sales_item.h	/^    Sales_item(std::istream &is) { is >> *this; }$/;"	f	class:Sales_item
Sales_item	17/Sales_item.h	/^class Sales_item {$/;"	c
Sales_item	17/cplusplus_primer.h	/^    class Sales_item { \/* . . . *\/};$/;"	c	namespace:cplusplus_primer
ScrPtr	14/ScrPtr.h	/^    ScrPtr(Screen *p): sp(p), use(1) { }$/;"	f	class:ScrPtr
ScrPtr	14/ScrPtr.h	/^class ScrPtr {$/;"	c
Screen	12/Screen.h	/^    Screen(index ht = 0, index wd = 0): $/;"	f	class:Screen
Screen	12/Screen.h	/^class Screen {$/;"	c
Screen	12/screen3.h	/^    Screen(index ht = 0, index wd = 0): $/;"	f	class:Screen
Screen	12/screen3.h	/^class Screen {$/;"	c
Screen	12/screen4.h	/^    Screen(index ht = 0, index wd = 0): $/;"	f	class:Screen
Screen	12/screen4.h	/^class Screen {$/;"	c
Screen	12/screen5.h	/^    Screen(index ht = 0, index wd = 0): $/;"	f	class:Screen
Screen	12/screen5.h	/^class Screen {$/;"	c
Screen	18/Screen.h	/^    Screen(index ht = 0, index wd = 0):$/;"	f	class:Screen
Screen	18/Screen.h	/^class Screen {$/;"	c
ScreenPtr	14/ScrPtr.h	/^    ScreenPtr(Screen *p): ptr(new ScrPtr(p)) { }$/;"	f	class:ScreenPtr
ScreenPtr	14/ScrPtr.h	/^    ScreenPtr(const ScreenPtr &orig):$/;"	f	class:ScreenPtr
ScreenPtr	14/ScrPtr.h	/^class ScreenPtr {$/;"	c
SmallInt	16/Queue-assign.cc	/^    SmallInt(int i = 0): val(i)$/;"	f	class:SmallInt
SmallInt	16/Queue-assign.cc	/^class SmallInt {$/;"	c	file:
Stat	7/conv-enums.cc	/^enum Stat {Fail, Pass};$/;"	g	file:
Status	17/nopandaprint.h	/^    enum Status { critical, environment, improving };$/;"	g	class:Endangered
Status	17/virt.h	/^    enum Status { critical, environment, improving };$/;"	g	class:Endangered
TEXTQUERY_H	10/3ed_query.h	31;"	d
TEXTQUERY_H	10/TextQuery.h	31;"	d
TextQuery	10/3ed_query.h	/^class TextQuery {$/;"	c
TextQuery	10/TextQuery.h	/^class TextQuery {$/;"	c
Tokens	7/enum-match.cc	/^enum Tokens {INLINE = 128, VIRTUAL = 129};$/;"	g	file:
U_Ptr	13/smart-ptr.cc	/^	U_Ptr(int *p): ip(p), use(1) { }$/;"	f	class:U_Ptr	file:
U_Ptr	13/smart-ptr.cc	/^class U_Ptr {$/;"	c	file:
VIRTUAL	7/enum-match.cc	/^enum Tokens {INLINE = 128, VIRTUAL = 129};$/;"	e	enum:Tokens	file:
Vector	18/vec-opnew.cc	/^    Vector(): elements(0), first_free(0), end(0) { }$/;"	f	class:Vector
Vector	18/vec-opnew.cc	/^template <class T> class Vector {$/;"	c	file:
Vector	18/vec.cc	/^    Vector(): elements(0), first_free(0), end(0) { }$/;"	f	class:Vector
Vector	18/vec.cc	/^template <class T> class Vector {$/;"	c	file:
WordQuery	15/Query.h	/^    WordQuery(const std::string &s): query_word(s) { }$/;"	f	class:WordQuery
WordQuery	15/Query.h	/^class WordQuery: public Query_base {$/;"	c
WordQuery	16/Query.h	/^    WordQuery(const std::string &s): query_word(s) { }$/;"	f	class:WordQuery
WordQuery	16/Query.h	/^class WordQuery: public Query_base {$/;"	c
ZooAnimal	17/Animal.h	/^    ZooAnimal(std::string animal, bool exhibit,$/;"	f	class:ZooAnimal
ZooAnimal	17/Animal.h	/^class ZooAnimal {$/;"	c
ZooAnimal	17/nopandaprint.h	/^    ZooAnimal(std::string animal, bool exhibit,$/;"	f	class:ZooAnimal
ZooAnimal	17/nopandaprint.h	/^class ZooAnimal {$/;"	c
ZooAnimal	17/virt.h	/^    ZooAnimal() { }$/;"	f	class:ZooAnimal
ZooAnimal	17/virt.h	/^    ZooAnimal(std::string animal, bool exhibit,$/;"	f	class:ZooAnimal
ZooAnimal	17/virt.h	/^class ZooAnimal {$/;"	c
a1	7/conv-enums.cc	/^enum e1 {a1, b1, c1};$/;"	e	enum:e1	file:
a2	7/conv-enums.cc	/^enum e2 {a2, b2, c2=0x80000000};$/;"	e	enum:e2	file:
absInt	14/absInt.cc	/^struct absInt {$/;"	s	file:
access_ctr	12/screen5.h	/^    mutable size_t access_ctr; \/\/ may change in a const members$/;"	m	class:Screen
accountType	12/Account.h	/^    static const std::string accountType;$/;"	m	class:Account
addFldr	13/Folder.h	/^    void addFldr(Folder *f) { folders.insert(f); }$/;"	f	class:Message
addMsg	13/Folder.h	/^    void addMsg(Message *m) { msgs.insert(m); }$/;"	f	class:Folder
add_item	15/Basket.h	/^    void add_item(const Sales_item &item) $/;"	f	class:Basket
add_item	15/Basket2.h	/^    void add_item(const Sales_item &item) $/;"	f	class:Basket
add_item	16/Basket.h	/^    void add_item(const Sales_item &item) $/;"	f	class:Basket
alloc	18/vec-opnew.cc	/^    static std::allocator<T> alloc; \/\/ object to get raw memory$/;"	m	class:Vector	file:
alloc	18/vec.cc	/^    static std::allocator<T> alloc; \/\/ member to handle allocation$/;"	m	class:Vector	file:
alloc_mem	18/CachedObj.h	/^    static std::allocator<T> alloc_mem;$/;"	m	class:CachedObj
alt_word_count	10/word_count.cc	/^void alt_word_count()$/;"	f
amount	12/Account.h	/^    double amount; $/;"	m	class:Account
animal_status	17/nopandaprint.h	/^    Status animal_status;$/;"	m	class:Endangered
animal_status	17/virt.h	/^    Status animal_status;$/;"	m	class:Endangered
append	2/print_enum.cc	/^enum open_modes {input = 1, output, append};$/;"	e	enum:open_modes	file:
append	2/print_enum2.cc	/^enum open_modes {input = 1, output, append};$/;"	e	enum:open_modes	file:
applyint	12/Account.h	/^    void applyint() { amount += amount * interestRate; }$/;"	f	class:Account
arr1	6/copy_array.cc	/^int arr1[] = {0,1,2,3,4,5,6,7,8,9};$/;"	v
arr_size	6/copy_array.cc	/^const size_t arr_size = 7;$/;"	v
assign	16/Queue.cc	/^void Queue<T>::assign(Iter beg, Iter end)$/;"	f	class:Queue
assign	16/newQueue.h	/^    template <class Iter> void assign(Iter beg, Iter end)$/;"	f	class:Queue
assign	18/Queue.cc	/^void Queue<T>::assign(Iter beg, Iter end)$/;"	f	class:Queue
avg_price	1/Sales_item.h	/^double Sales_item::avg_price() const$/;"	f	class:Sales_item
avg_price	14/Sales_item.cc	/^double Sales_item::avg_price() const$/;"	f	class:Sales_item
avg_price	17/Sales_item.cc	/^double Sales_item::avg_price() const$/;"	f	class:Sales_item
b1	7/conv-enums.cc	/^enum e1 {a1, b1, c1};$/;"	e	enum:e1	file:
b2	7/conv-enums.cc	/^enum e2 {a2, b2, c2=0x80000000};$/;"	e	enum:e2	file:
balance	12/Account.h	/^    double balance() { return amount; }$/;"	f	class:Account
beg	14/CheckedPtr.h	/^    int* beg;    \/\/ pointer to beginning of the array$/;"	m	class:CheckedPtr
book	15/Basket.h	/^    std::string book() const { return isbn; }$/;"	f	class:Item_base
book	15/Basket2.h	/^    std::string book() const { return isbn; }$/;"	f	class:Item_base
book	16/Basket.h	/^    std::string book() const { return isbn; }$/;"	f	class:Item_base
book	17/Sales_item.h	/^    std::string book() const { return isbn; }$/;"	f	class:Sales_item
bound	14/count-size.cc	/^    size_t bound;$/;"	m	class:EQ	file:
bound	14/count-size.cc	/^    std::string::size_type bound;$/;"	m	class:GT_cls	file:
build_exclusion_set	10/3ed_query.cc	/^set<string> TextQuery::build_exclusion_set()$/;"	f	class:TextQuery
build_map	10/3ed_query.cc	/^void TextQuery::build_map()$/;"	f	class:TextQuery
build_map	10/TextQuery.cc	/^void TextQuery::build_map()$/;"	f	class:TextQuery
build_textfile	15/get_print.cc	/^TextQuery build_textfile(const string &filename)$/;"	f
c1	7/conv-enums.cc	/^enum e1 {a1, b1, c1};$/;"	e	enum:e1	file:
c2	7/conv-enums.cc	/^enum e2 {a2, b2, c2=0x80000000};$/;"	e	enum:e2	file:
c_array	9/ctors.cc	/^char c_array[] = "World!!!!"; \/\/ null-terminated$/;"	v
c_vec	9/str_assignOps.cc	/^vector<char> c_vec;$/;"	v
capacity	18/vec.cc	/^    size_t capacity() const { return end - elements; }$/;"	f	class:Vector
chk_ending	10/3ed_query.cc	/^int TextQuery::chk_ending(const string &word, const char *ending)$/;"	f	class:TextQuery
chunk	18/CachedObj.h	/^    static const std::size_t chunk;$/;"	m	class:CachedObj
cleanup_str	10/TextQuery.cc	/^string TextQuery::cleanup_str(const string &word)$/;"	f	class:TextQuery
clone	15/Basket.h	/^    Bulk_item* clone() const $/;"	f	class:Bulk_item
clone	15/Basket.h	/^    Lim_item* clone() const { return new Lim_item(*this); }$/;"	f	class:Lim_item
clone	15/Basket.h	/^    virtual Item_base* clone() const $/;"	f	class:Item_base
clone	15/Basket2.h	/^    Bulk_item* clone() const $/;"	f	class:Bulk_item
clone	15/Basket2.h	/^    Lim_item* clone() const { return new Lim_item(*this); }$/;"	f	class:Lim_item
clone	15/Basket2.h	/^    virtual Item_base* clone() const $/;"	f	class:Item_base
clone	16/Basket.h	/^    Bulk_item* clone() const $/;"	f	class:Bulk_item
clone	16/Basket.h	/^    Lim_item* clone() const { return new Lim_item(*this); }$/;"	f	class:Lim_item
clone	16/Basket.h	/^    virtual Item_base* clone() const $/;"	f	class:Item_base
combine	11/innerprod.cc	/^string combine(string x, string y)$/;"	f
compare	15/Basket.h	/^compare(const Sales_item &lhs, const Sales_item &rhs) $/;"	f
compare	15/Basket2.h	/^compare(const Sales_item &lhs, const Sales_item &rhs) $/;"	f
compare	16/compare.cc	/^int compare(const T &v1, const T &v2)$/;"	f
compare	16/compare.cc	/^int compare(const double &v1, const double &v2)$/;"	f
compare	16/compare.cc	/^int compare(const string &v1, const string &v2)$/;"	f
compare	16/compare.cc	/^int compare<const char*>(const char* const &v1, $/;"	f
compare	16/overcomp.cc	/^int compare(const char* v1, const char* v2)$/;"	f
compare	16/overcomp.cc	/^template <class U, class V> int compare(U beg1, U end1, V beg2)$/;"	f
compare	16/overcomp.cc	/^template <typename T> int compare(const T &v1, const T &v2)$/;"	f
compare	16/overcomp2.cc	/^int compare(U beg1, U end1, V beg2)$/;"	f
compare	16/overcomp2.cc	/^int compare(char* v1, char* v2)$/;"	f
compare	16/overcomp2.cc	/^int compare(const T &v1, const T &v2)$/;"	f
compare	16/overcomp2.cc	/^int compare(const char* v1, const char* v2)$/;"	f
compare	17/Sales_item.h	/^compare(const Sales_item &lhs, const Sales_item &rhs)$/;"	f
compare2	16/overcomp.cc	/^int compare2(const char* v1, const char* v2)$/;"	f
compare2	16/overcomp.cc	/^template <typename T> int compare2(T v1, T v2)$/;"	f
concatenate	11/innerprod.cc	/^string concatenate(string x, string y)$/;"	f
const_iter	15/Basket.h	/^    typedef set_type::const_iterator const_iter;$/;"	t	class:Basket
const_iter	15/Basket2.h	/^    typedef std::multiset<Sales_item, Comp>::const_iterator const_iter;$/;"	t	class:Basket
const_iter	16/Basket.h	/^    typedef std::multiset<Sales_item>::const_iterator const_iter;$/;"	t	class:Basket
contents	12/Screen.h	/^    std::string contents;$/;"	m	class:Screen
contents	12/screen3.h	/^    std::string contents;$/;"	m	class:Screen
contents	12/screen4.h	/^    std::string contents;$/;"	m	class:Screen
contents	12/screen5.h	/^    std::string contents;$/;"	m	class:Screen
contents	13/Folder.h	/^    std::string contents;      \/\/ actual message text$/;"	m	class:Message
contents	18/Screen.h	/^    std::string contents;$/;"	m	class:Screen
copy	18/Queue.cc	/^Queue<Type>::copy(const Queue &orig)$/;"	f	class:Queue
copy	18/Queue.cc	/^void Queue<Type>::copy(Iter beg, Iter end)$/;"	f	class:Queue
copy	18/statmem.cc	/^Queue<Type>::copy(const Queue &orig)$/;"	f	class:Queue
copy	18/statmem.cc	/^void Queue<Type>::copy(Iter beg, Iter end)$/;"	f	class:Queue
copy_elems	16/Queue.cc	/^void Queue<Type>::copy_elems(It beg, It end)$/;"	f	class:Queue
copy_elems	16/Queue.cc	/^void Queue<Type>::copy_elems(const Queue &orig)$/;"	f	class:Queue
copy_elems	18/MS_statmem.cc	/^    template <class Iter> void copy_elems(Iter, Iter)$/;"	f	class:Queue	file:
copy_elems	18/MS_statmem.cc	/^Queue<Type>::copy_elems(const Queue &orig)$/;"	f	class:Queue
copy_msgs	13/Folder.cc	/^void Folder::copy_msgs(const set<Message*> &m)$/;"	f	class:Folder
count_calls	7/count-calls.cc	/^size_t count_calls()$/;"	f
cp	9/ctors.cc	/^char *cp = "Hiya";            \/\/ null-terminated array$/;"	v
cplusplus_primer	17/cplusplus_primer.h	/^namespace cplusplus_primer {$/;"	n
critical	17/nopandaprint.h	/^    enum Status { critical, environment, improving };$/;"	e	enum:Endangered::Status
critical	17/virt.h	/^    enum Status { critical, environment, improving };$/;"	e	enum:Endangered::Status
curr	14/CheckedPtr.h	/^    int* curr;   \/\/ current position within the array$/;"	m	class:CheckedPtr
cursor	12/Screen.h	/^    index cursor;$/;"	m	class:Screen
cursor	12/screen3.h	/^    index cursor;$/;"	m	class:Screen
cursor	12/screen4.h	/^    index cursor;$/;"	m	class:Screen
cursor	12/screen5.h	/^    index cursor;  $/;"	m	class:Screen
cursor	18/Screen.h	/^    index cursor;$/;"	m	class:Screen
daily_tbl	12/Account.h	/^    double daily_tbl[period]; \/\/ ok: period is constant expression$/;"	m	class:Account
dance_flag	17/virt.h	/^    DanceType dance_flag;$/;"	m	class:Bear
dancetype	17/Animal.h	/^    DanceType   dancetype;$/;"	m	class:Bear
dancetype	17/nopandaprint.h	/^    DanceType   dancetype;$/;"	m	class:Bear
data	14/subscript.cc	/^    vector<int> data;$/;"	m	class:Foo	file:
debug_print	13/Folder.cc	/^void Folder::debug_print()$/;"	f	class:Folder
debug_print	13/Folder.cc	/^void Message::debug_print()$/;"	f	class:Message
decr_use	15/Basket.h	/^    void decr_use() $/;"	f	class:Sales_item
decr_use	15/Basket2.h	/^    void decr_use() $/;"	f	class:Sales_item
decr_use	15/Query.h	/^    void decr_use() $/;"	f	class:Query
destroy	16/Queue.cc	/^template <class Type> void Queue<Type>::destroy()$/;"	f	class:Queue
destroy	18/MS_statmem.cc	/^Queue<Type>::destroy()$/;"	f	class:Queue
destroy	18/Queue.cc	/^Queue<Type>::destroy()$/;"	f	class:Queue
destroy	18/statmem.cc	/^Queue<Type>::destroy()$/;"	f	class:Queue
discount	15/Basket.h	/^    double discount;       \/\/ fractional discount to apply$/;"	m	class:Bulk_item
discount	15/Basket.h	/^    double discount;       \/\/ fractional discount to apply$/;"	m	class:Lim_item
discount	15/Basket2.h	/^    double discount;       \/\/ fractional discount to apply$/;"	m	class:Disc_item
discount	16/Basket.h	/^    double discount;       \/\/ fractional discount to apply$/;"	m	class:Bulk_item
discount	16/Basket.h	/^    double discount;       \/\/ fractional discount to apply$/;"	m	class:Lim_item
discount_policy	15/Basket.h	/^    std::pair<size_t, double> discount_policy() const$/;"	f	class:Bulk_item
discount_policy	15/Basket.h	/^    std::pair<size_t, double> discount_policy() const$/;"	f	class:Lim_item
discount_policy	15/Basket2.h	/^    std::pair<size_t, double> discount_policy() const$/;"	f	class:Bulk_item
discount_policy	15/Basket2.h	/^    std::pair<size_t, double> discount_policy() const$/;"	f	class:Disc_item
discount_policy	15/Basket2.h	/^    std::pair<size_t, double> discount_policy() const$/;"	f	class:Lim_item
discount_policy	16/Basket.h	/^    std::pair<size_t, double> discount_policy() const$/;"	f	class:Bulk_item
discount_policy	16/Basket.h	/^    std::pair<size_t, double> discount_policy() const$/;"	f	class:Lim_item
display	12/screen3.h	/^    Screen& display(std::ostream &os) $/;"	f	class:Screen
display	12/screen3.h	/^    const Screen& display(std::ostream &os) const$/;"	f	class:Screen
display	12/screen4.h	/^const Screen& Screen::display(std::ostream& os) const$/;"	f	class:Screen
display	15/Basket.cc	/^void Basket::display(ostream &os) const$/;"	f	class:Basket
display	15/Query.h	/^    std::ostream &display(std::ostream &os) const$/;"	f	class:Query
display	15/Query.h	/^    std::ostream& display (std::ostream &os) const $/;"	f	class:WordQuery
display	15/Query.h	/^    std::ostream& display(std::ostream &os) const$/;"	f	class:BinaryQuery
display	15/Query.h	/^    std::ostream& display(std::ostream &os) const$/;"	f	class:NotQuery
display	15/V2_Basket.cc	/^void Basket::display(ostream &os) const$/;"	f	class:Basket
display	16/Basket.cc	/^void Basket::display(ostream &os) const$/;"	f	class:Basket
display	16/Query.h	/^    std::ostream &display(std::ostream &os) const$/;"	f	class:Query
display	16/Query.h	/^    std::ostream& display (std::ostream &os) const $/;"	f	class:WordQuery
display	16/Query.h	/^    std::ostream& display(std::ostream &os) const$/;"	f	class:BinaryQuery
display	16/Query.h	/^    std::ostream& display(std::ostream &os) const$/;"	f	class:NotQuery
display_map	10/3ed_query.cc	/^void TextQuery::display_map()$/;"	f	class:TextQuery
display_map	10/TextQuery.cc	/^void TextQuery::display_map()$/;"	f	class:TextQuery
do_display	12/screen3.h	/^     void do_display(std::ostream &os) const$/;"	f	class:Screen
do_display	12/screen5.h	/^void Screen::do_display(std::ostream& os) const$/;"	f	class:Screen
do_display	18/screen.cc	/^void Screen::do_display(std::ostream& os) const$/;"	f	class:Screen
do_move	18/screen.cc	/^void Screen::do_move(index r, index c) const$/;"	f	class:Screen
e1	7/conv-enums.cc	/^enum e1 {a1, b1, c1};$/;"	g	file:
e2	7/conv-enums.cc	/^enum e2 {a2, b2, c2=0x80000000};$/;"	g	file:
elements	18/vec-opnew.cc	/^    T* elements;       \/\/ pointer to first element in the array$/;"	m	class:Vector	file:
elements	18/vec.cc	/^    T* elements;       \/\/ pointer to first element in the array$/;"	m	class:Vector	file:
empty	16/Queue.h	/^    bool empty() const {          \/\/ true if no elements in the Queue$/;"	f	class:Queue
empty	16/char_queue.h	/^    bool empty() const       {return real_queue.empty();}$/;"	f	class:Queue
empty	16/newQueue.h	/^    bool empty() const       { return items.empty(); }$/;"	f	class:Queue
empty	18/MS_statmem.cc	/^    bool empty() const {    \/\/ true if no elements in the Queue$/;"	f	class:Queue
empty	18/Queue.h	/^    bool empty() const {    \/\/ true if no elements in the Queue$/;"	f	class:Queue
empty	18/statmem.cc	/^    bool empty() const {    \/\/ true if no elements in the Queue$/;"	f	class:Queue
empty_msgs	13/Folder.cc	/^void Folder::empty_msgs()$/;"	f	class:Folder
end	14/CheckedPtr.h	/^    int* end;    \/\/ one past the end of the array$/;"	m	class:CheckedPtr
end	18/vec-opnew.cc	/^    T* end;            \/\/ pointer to one past the end of the array$/;"	m	class:Vector	file:
end	18/vec.cc	/^    T* end;            \/\/ pointer to one past the end of the array$/;"	m	class:Vector	file:
environment	17/nopandaprint.h	/^    enum Status { critical, environment, improving };$/;"	e	enum:Endangered::Status
environment	17/virt.h	/^    enum Status { critical, environment, improving };$/;"	e	enum:Endangered::Status
eval	15/Query.cc	/^AndQuery::eval(const TextQuery& file) const$/;"	f	class:AndQuery
eval	15/Query.cc	/^NotQuery::eval(const TextQuery& file) const$/;"	f	class:NotQuery
eval	15/Query.cc	/^OrQuery::eval(const TextQuery& file) const$/;"	f	class:OrQuery
eval	15/Query.h	/^      eval(const TextQuery &t) const { return q->eval(t); }$/;"	f	class:Query
eval	15/Query.h	/^    std::set<line_no> eval(const TextQuery &t) const$/;"	f	class:WordQuery
eval	16/Query.cc	/^AndQuery::eval(const TextQuery& file) const$/;"	f	class:AndQuery
eval	16/Query.cc	/^NotQuery::eval(const TextQuery& file) const$/;"	f	class:NotQuery
eval	16/Query.cc	/^OrQuery::eval(const TextQuery& file) const$/;"	f	class:OrQuery
eval	16/Query.h	/^      eval(const TextQuery &t) const {return h->eval(t);}$/;"	f	class:Query
eval	16/Query.h	/^    std::set<line_no> eval(const TextQuery &t) const$/;"	f	class:WordQuery
exclude_word	10/3ed_query.cc	/^bool TextQuery::exclude_word(const string &word)$/;"	f	class:TextQuery
exclusion_set	10/3ed_query.cc	/^set<string> TextQuery::exclusion_set = build_exclusion_set();$/;"	m	class:TextQuery	file:
exclusion_set	10/3ed_query.h	/^    static std::set<std::string> exclusion_set;$/;"	m	class:TextQuery
exercises	18/dyn_cast.cc	/^void exercises() {$/;"	f
exhibit_stat	17/Animal.h	/^    bool        exhibit_stat;$/;"	m	class:ZooAnimal
exhibit_stat	17/nopandaprint.h	/^    bool        exhibit_stat;$/;"	m	class:ZooAnimal
exhibit_stat	17/virt.h	/^    bool        exhibit_stat;$/;"	m	class:ZooAnimal
f	16/compare.cc	/^int f(int v1, int v2)$/;"	f
f	16/nontype.cc	/^void f() {$/;"	f
f	18/dyn_cast.cc	/^   virtual void f() {};$/;"	f	struct:Base
f	18/dyn_cast.cc	/^void f(const Base &b)$/;"	f
f2	8/sstream.cc	/^void f2()$/;"	f
f3	8/sstream.cc	/^void f3()$/;"	f
fact	7/fact.cc	/^int fact(int val)$/;"	f
factorial	7/fact.cc	/^int factorial(int val) $/;"	f
fam_name	17/Animal.h	/^    std::string fam_name;$/;"	m	class:ZooAnimal
fam_name	17/nopandaprint.h	/^    std::string fam_name;$/;"	m	class:ZooAnimal
fam_name	17/virt.h	/^    std::string fam_name;$/;"	m	class:ZooAnimal
family_name	17/Animal.h	/^    std::string family_name() const { return fam_name; }$/;"	f	class:ZooAnimal
family_name	17/nopandaprint.h	/^    std::string family_name() const { return fam_name; }$/;"	f	class:ZooAnimal
family_name	17/virt.h	/^    std::string family_name() const { return fam_name; }$/;"	f	class:ZooAnimal
fandango	17/Animal.h	/^enum DanceType { two_left_feet, macarena, fandango, waltz };$/;"	e	enum:Bear::DanceType
fandango	17/nopandaprint.h	/^enum DanceType { two_left_feet, macarena, fandango, waltz };$/;"	e	enum:Bear::DanceType
fandango	17/virt.h	/^    enum DanceType { two_left_feet, macarena, fandango };$/;"	e	enum:Bear::DanceType
ff	7/conv-enums.cc	/^void ff(Stat) { cout << "ff(Stat)" << endl; }$/;"	f
ff	7/conv-enums.cc	/^void ff(char) { cout << "ff(char)" << endl; }$/;"	f
ff	7/conv-enums.cc	/^void ff(int) { cout << "ff(int)" << endl; }$/;"	f
ff	7/enum-match.cc	/^void ff(Tokens) { cout << "ff(Tokens)" << endl; }$/;"	f
ff	7/enum-match.cc	/^void ff(int) { cout << "ff(int)" << endl; }$/;"	f
first_free	18/vec-opnew.cc	/^    T* first_free;     \/\/ pointer to first free element in the array$/;"	m	class:Vector	file:
first_free	18/vec.cc	/^    T* first_free;     \/\/ pointer to first free element in the array$/;"	m	class:Vector	file:
folders	13/Folder.h	/^    std::set<Folder*> folders; \/\/ Folders that have this Message$/;"	m	class:Message
format	7/conv-enums.cc	/^string format(int) { cout << "format(int)" << endl; return ""; }$/;"	f
format	7/conv-enums.cc	/^string format(unsigned int) { cout << "format(unsigned int)" << endl; $/;"	f
freeStore	18/CachedObj.h	/^    static T *freeStore;$/;"	m	class:CachedObj
front	16/Queue.h	/^    Type& front()             { return head->item; }$/;"	f	class:Queue
front	16/Queue.h	/^    const Type &front() const { return head->item; }$/;"	f	class:Queue
front	16/char_queue.h	/^    const std::string &front() const $/;"	f	class:Queue
front	16/char_queue.h	/^    std::string front()     {return real_queue.front();}$/;"	f	class:Queue
front	16/newQueue.h	/^    Type& front()             { return items.front(); }$/;"	f	class:Queue
front	16/newQueue.h	/^    const Type &front() const { return items.front(); }$/;"	f	class:Queue
front	18/MS_statmem.cc	/^    Type& front()            { return head->item; }$/;"	f	class:Queue
front	18/MS_statmem.cc	/^    const Type front() const { return head->item; }$/;"	f	class:Queue
front	18/Queue.h	/^    Type& front()            { return head->item; }$/;"	f	class:Queue
front	18/Queue.h	/^    const Type front() const { return head->item; }$/;"	f	class:Queue
front	18/statmem.cc	/^    Type& front()            { return head->item; }$/;"	f	class:Queue
front	18/statmem.cc	/^    const Type front() const { return head->item; }$/;"	f	class:Queue
gcd	7/mathstuff.cc	/^int gcd(int v1, int v2)$/;"	f
get	12/Screen.h	/^    char get() const { return contents[cursor]; }$/;"	f	class:Screen
get	12/screen3.h	/^    char get() const { return contents[cursor]; }$/;"	f	class:Screen
get	12/screen3.h	/^char Screen::get(index r, index c) const$/;"	f	class:Screen
get	12/screen4.h	/^    char get() const { return contents[cursor]; }$/;"	f	class:Screen
get	12/screen4.h	/^char Screen::get(index r, index c) const$/;"	f	class:Screen
get	12/screen5.h	/^    char get() const { return contents[cursor]; }$/;"	f	class:Screen
get	12/screen5.h	/^char Screen::get(index r, index c) const$/;"	f	class:Screen
get	7/refret-ex.cc	/^int &get(int *arry, int index) { return arry[index]; }$/;"	f
get_base_mem	15/scope.cc	/^    int get_base_mem() { return Base::mem; }$/;"	f	struct:Derived
get_books	11/vocab.cc	/^vector<string> get_books()$/;"	f
get_folders	13/Folder.cc	/^vector<Folder*> Message::get_folders()$/;"	f	class:Message
get_int	13/plain-ptr.cc	/^    int get_int() const { return val; }$/;"	f	class:HasPtr
get_int	13/smart-ptr.cc	/^    int get_int() const { return val; }$/;"	f	class:HasPtr
get_int	13/value-ptr.cc	/^    int get_int() const { return val; }$/;"	f	class:HasPtr
get_mem	15/scope.cc	/^    int get_mem() { return mem; }  \/\/ returns Derived::mem$/;"	f	struct:Derived
get_ptr	13/plain-ptr.cc	/^    int *get_ptr() const { return ptr; }     $/;"	f	class:HasPtr
get_ptr	13/smart-ptr.cc	/^    int *get_ptr() const { return ptr->ip; } $/;"	f	class:HasPtr
get_ptr	13/value-ptr.cc	/^    int *get_ptr() const { return ptr; } $/;"	f	class:HasPtr
get_ptr_val	13/plain-ptr.cc	/^    int get_ptr_val() const { return *ptr; } $/;"	f	class:HasPtr
get_ptr_val	13/smart-ptr.cc	/^    int get_ptr_val() const { return *ptr->ip; } $/;"	f	class:HasPtr
get_ptr_val	13/value-ptr.cc	/^    int get_ptr_val() const { return *ptr; } $/;"	f	class:HasPtr
get_val	7/ref-fcn.cc	/^char &get_val(string &str, string::size_type ix) $/;"	f
get_word	15/get_print.cc	/^bool get_word(string &s1)$/;"	f
get_words	15/get_print.cc	/^bool get_words(string &s1, string &s2)$/;"	f
h	16/Basket.h	/^    Handle<Item_base> h;   \/\/ use-counted handle$/;"	m	class:Sales_item
h	16/Query.h	/^    Handle<Query_base> h;           \/\/ use-counted handle$/;"	m	class:Query
handle_out_of_memory	17/Handle.h	/^void handle_out_of_memory(const std::bad_alloc&) { }$/;"	f
handle_out_of_memory	17/MS_Handle.h	/^void handle_out_of_memory(const std::bad_alloc&) { }$/;"	f
head	16/Queue.h	/^    QueueItem<Type> *head;         \/\/ pointer to first element in Queue$/;"	m	class:Queue
head	16/int-Queue.h	/^    QueueItem<int> *head;     \/\/ use QueueItem of int$/;"	m	class:Queue
head	18/MS_statmem.cc	/^    QueueItem *head;   \/\/ pointer to first element in Queue$/;"	m	class:Queue	file:
head	18/Queue.h	/^    QueueItem *head;   \/\/ pointer to first element in Queue$/;"	m	class:Queue
head	18/statmem.cc	/^    QueueItem *head;   \/\/ pointer to first element in Queue$/;"	m	class:Queue	file:
height	12/Screen.h	/^    index height, width;$/;"	m	class:Screen
height	12/screen3.h	/^    index height, width;$/;"	m	class:Screen
height	12/screen4.h	/^    int height, width;$/;"	m	class:Screen
height	12/screen5.h	/^    index height, width;$/;"	m	class:Screen
height	18/Screen.h	/^    index height, width;$/;"	m	class:Screen
ia	4/multidim.cc	/^    int ia[3][4];      \/\/ array of size 3, each element is an array of ints of size 4 $/;"	v
ia	5/arraysizeof.cc	/^int ia[] = {0,1,2,3,4,5,6,7,8,9};$/;"	v
improving	17/nopandaprint.h	/^    enum Status { critical, environment, improving };$/;"	e	enum:Endangered::Status
improving	17/virt.h	/^    enum Status { critical, environment, improving };$/;"	e	enum:Endangered::Status
index	12/Screen.h	/^    typedef std::string::size_type index;$/;"	t	class:Screen
index	12/screen3.h	/^    typedef std::string::size_type index;$/;"	t	class:Screen
index	12/screen4.h	/^    typedef std::string::size_type index;$/;"	t	class:Screen
index	12/screen5.h	/^    typedef std::string::size_type index;$/;"	t	class:Screen
index	18/Screen.h	/^    typedef std::string::size_type index;$/;"	t	class:Screen
input	2/print_enum.cc	/^enum open_modes {input = 1, output, append};$/;"	e	enum:open_modes	file:
input	2/print_enum2.cc	/^enum open_modes {input = 1, output, append};$/;"	e	enum:open_modes	file:
interestRate	12/Account.h	/^    static double interestRate;$/;"	m	class:Account
ip	13/smart-ptr.cc	/^	int *ip;$/;"	m	class:U_Ptr	file:
isShorter	11/count-size.cc	/^bool isShorter(const string &s1, const string &s2)$/;"	f
isShorter	11/vocab.cc	/^bool isShorter(const string &s1, const string &s2)$/;"	f
isShorter	14/count-size.cc	/^bool isShorter(const string &s1, const string &s2)$/;"	f
is_pos	7/fact.cc	/^bool is_pos(int i)$/;"	f
isbn	1/Sales_item.h	/^    std::string isbn;$/;"	m	class:Sales_item
isbn	14/Sales_item.h	/^    std::string isbn;$/;"	m	class:Sales_item
isbn	15/Basket.h	/^    std::string isbn;   \/\/ identifier for the item$/;"	m	class:Item_base
isbn	15/Basket2.h	/^    std::string isbn;   \/\/ identifier for the item$/;"	m	class:Item_base
isbn	16/Basket.h	/^    std::string isbn;   \/\/ identifier for the item$/;"	m	class:Item_base
isbn	17/Sales_item.h	/^    std::string isbn;$/;"	m	class:Sales_item
isbn_mismatch	17/bookexcept.h	/^    explicit isbn_mismatch(const std::string &s): $/;"	f	class:isbn_mismatch
isbn_mismatch	17/bookexcept.h	/^    isbn_mismatch(const std::string &s,$/;"	f	class:isbn_mismatch
isbn_mismatch	17/bookexcept.h	/^class isbn_mismatch: public std::logic_error {$/;"	c
item	16/Queue.h	/^    Type item;           \/\/ value stored in this element$/;"	m	class:QueueItem
item	18/MS_statmem.cc	/^        Type item;           \/\/ value stored in this element$/;"	m	struct:Queue::QueueItem	file:
item	18/Queue.h	/^        Type item;           \/\/ value stored in this element$/;"	m	struct:Queue::QueueItem
item	18/statmem.cc	/^    Type item;           \/\/ value stored in this element$/;"	m	struct:Queue::QueueItem	file:
item_count	16/Basket.h	/^    size_type item_count(const Sales_item &i) const$/;"	f	class:Basket
items	15/Basket.h	/^    std::multiset<Sales_item, Comp> items;$/;"	m	class:Basket
items	15/Basket2.h	/^    std::multiset<Sales_item, Comp> items;$/;"	m	class:Basket
items	16/Basket.h	/^    std::multiset<Sales_item> items;$/;"	m	class:Basket
items	16/newQueue.h	/^    std::list<Type> items;$/;"	m	class:Queue
ival	17/Animal.h	/^    int         ival;$/;"	m	class:Bear
ival	17/nopandaprint.h	/^    int         ival;$/;"	m	class:Bear
ival	17/virt.h	/^    int    ival;$/;"	m	class:Bear
left	17/bookexcept.h	/^    const std::string left, right;$/;"	m	class:isbn_mismatch
lhs	15/Query.h	/^    const Query lhs, rhs;   \/\/ right- and left-hand operands$/;"	m	class:BinaryQuery
lhs	16/Query.h	/^    Query lhs, rhs;   \/\/ right and left hand operands$/;"	m	class:BinaryQuery
line_no	10/3ed_query.h	/^    typedef std::vector<std::string>::size_type line_no;$/;"	t	class:TextQuery
line_no	10/TextQuery.h	/^    typedef std::vector<std::string>::size_type line_no;$/;"	t	class:TextQuery
line_no	15/Query.h	/^    typedef TextQuery::line_no line_no;$/;"	t	class:Query_base
line_no	16/Query.h	/^    typedef TextQuery::line_no line_no;$/;"	t	class:Query_base
lines_of_text	10/3ed_query.h	/^    std::vector<std::string> lines_of_text; $/;"	m	class:TextQuery
lines_of_text	10/TextQuery.h	/^    std::vector<std::string> lines_of_text; $/;"	m	class:TextQuery
location	10/3ed_query.h	/^    typedef std::pair<line_no,str_size> location;$/;"	t	class:TextQuery
macarena	17/Animal.h	/^enum DanceType { two_left_feet, macarena, fandango, waltz };$/;"	e	enum:Bear::DanceType
macarena	17/nopandaprint.h	/^enum DanceType { two_left_feet, macarena, fandango, waltz };$/;"	e	enum:Bear::DanceType
macarena	17/virt.h	/^    enum DanceType { two_left_feet, macarena, fandango };$/;"	e	enum:Bear::DanceType
main	1/add.cc	/^int main()$/;"	f
main	1/add_item.cc	/^int main() $/;"	f
main	1/add_item2.cc	/^int main() $/;"	f
main	1/avg_price.cc	/^int main() $/;"	f
main	1/count.cc	/^int main()$/;"	f
main	1/for_ex.cc	/^int main()$/;"	f
main	1/forcount.cc	/^int main()$/;"	f
main	1/item_io.cc	/^int main() $/;"	f
main	1/main_only.cc	/^int main() $/;"	f
main	1/mysum.cc	/^int main() $/;"	f
main	1/userforcount.cc	/^int main()$/;"	f
main	1/whilecount.cc	/^int main()$/;"	f
main	10/3ed_querymain.cc	/^int main(int argc, char **argv)$/;"	f
main	10/erasemap.cc	/^int main() $/;"	f
main	10/multimap.cc	/^int main()$/;"	f
main	10/querymain.cc	/^int main(int argc, char **argv)$/;"	f
main	10/setexclusion.cc	/^int main(int argc, char **argv) $/;"	f
main	10/word_count.cc	/^int main() $/;"	f
main	10/word_transform.cc	/^int main(int argc, char **argv)$/;"	f
main	11/arrow.cc	/^int main() $/;"	f
main	11/count-size.cc	/^int main()$/;"	f
main	11/elim-dups.cc	/^int main()$/;"	f
main	11/equiv-istream-iter.cc	/^int main() {$/;"	f
main	11/innerprod.cc	/^int main()$/;"	f
main	11/inserters.cc	/^int main() $/;"	f
main	11/iostream_iter.cc	/^int main()$/;"	f
main	11/parms.cc	/^int main()$/;"	f
main	11/rev-iters.cc	/^int main()$/;"	f
main	11/reverse-iter.cc	/^int main()$/;"	f
main	11/scores.cc	/^int main() {$/;"	f
main	11/use-istream-iter.cc	/^int main() {$/;"	f
main	11/use-ostream-iter.cc	/^int main() $/;"	f
main	11/use_equalrange.cc	/^int main() $/;"	f
main	11/use_find.cc	/^int main()$/;"	f
main	11/vocab.cc	/^int main()$/;"	f
main	12/screen3.cc	/^int main()$/;"	f
main	13/Foldermain.cc	/^int main()$/;"	f
main	13/plain-ptr.cc	/^int main()$/;"	f
main	13/smart-ptr.cc	/^int main()$/;"	f
main	13/value-ptr.cc	/^int main()$/;"	f
main	14/absInt.cc	/^int main() {$/;"	f
main	14/count-size.cc	/^int main()$/;"	f
main	14/directcall.cc	/^int main()$/;"	f
main	14/fcnobj.cc	/^int main() {$/;"	f
main	14/subscript.cc	/^int main() {$/;"	f
main	14/use_chckPtr.cc	/^int main()$/;"	f
main	15/Basket_main.cc	/^int main()$/;"	f
main	15/V2_Basket_main.cc	/^int main()$/;"	f
main	15/bsk2.cc	/^int main()$/;"	f
main	15/main1.cc	/^int main(int, char **argv)$/;"	f
main	15/main2.cc	/^int main(int, char **argv)$/;"	f
main	15/main3.cc	/^int main(int, char **argv)$/;"	f
main	15/main4.cc	/^int main(int, char **argv)$/;"	f
main	15/main5.cc	/^int main(int, char **argv)$/;"	f
main	15/querymain.cc	/^int main(int, char **argv)$/;"	f
main	15/scope.cc	/^int main()$/;"	f
main	16/Basket_main.cc	/^int main()$/;"	f
main	16/Queue-assign.cc	/^int main()$/;"	f
main	16/QueueMain.cc	/^int main() $/;"	f
main	16/QueueMain2.cc	/^int main()$/;"	f
main	16/QueueMain3.cc	/^int main() {$/;"	f
main	16/char_main.cc	/^int main()$/;"	f
main	16/char_main_push.cc	/^int main()$/;"	f
main	16/compare.cc	/^int main()$/;"	f
main	16/newQueueMain.cc	/^int main() $/;"	f
main	16/newQueueMain2.cc	/^int main()$/;"	f
main	16/newQueueMain3.cc	/^int main() {$/;"	f
main	16/nontype.cc	/^int main()$/;"	f
main	16/overcomp.cc	/^int main()$/;"	f
main	16/overcomp2.cc	/^int main()$/;"	f
main	16/spcl-max.cc	/^int main()$/;"	f
main	16/swap.cc	/^int main()$/;"	f
main	16/use-handle.cc	/^int main()$/;"	f
main	16/use-query-handle.cc	/^int main(int, char **argv)$/;"	f
main	17/book.cc	/^int main()$/;"	f
main	17/use-handle.cc	/^int main()$/;"	f
main	18/MS_statmem.cc	/^int main() $/;"	f
main	18/QueueMain.cc	/^int main() $/;"	f
main	18/QueueMain2.cc	/^int main()$/;"	f
main	18/QueueMain3.cc	/^int main() {$/;"	f
main	18/dyn_cast.cc	/^int main()$/;"	f
main	18/screenTest.cc	/^int main()$/;"	f
main	18/statmem.cc	/^int main() $/;"	f
main	18/typeid.cc	/^int main()$/;"	f
main	18/vec-opnew.cc	/^int main()$/;"	f
main	18/vec.cc	/^int main()$/;"	f
main	2/pow2.cc	/^int main()$/;"	f
main	2/pow2_try2.cc	/^int main()$/;"	f
main	2/pow_tbl.cc	/^int main()$/;"	f
main	2/print_enum.cc	/^int main() $/;"	f
main	2/print_enum2.cc	/^int main() $/;"	f
main	2/ref-ex.cc	/^int main()$/;"	f
main	2/scope_levels.cc	/^int main()$/;"	f
main	2/scope_levels2.cc	/^int main()$/;"	f
main	2/twosome.cc	/^int main() $/;"	f
main	3/add_using.cc	/^int main()$/;"	f
main	3/bits.cc	/^int main() $/;"	f
main	3/cctype.cc	/^int main()$/;"	f
main	3/char_repl.cc	/^int main()$/;"	f
main	3/getline.cc	/^int main() $/;"	f
main	3/init_vec.cc	/^int main()$/;"	f
main	3/str_vers2.cc	/^int main()$/;"	f
main	3/str_vers3.cc	/^int main()$/;"	f
main	3/strcompare.cc	/^int main()$/;"	f
main	3/string_add.cc	/^int main() $/;"	f
main	3/string_io.cc	/^int main()$/;"	f
main	3/string_io2.cc	/^int main()$/;"	f
main	3/string_size.cc	/^int main()$/;"	f
main	3/vec_assign.cc	/^int main()$/;"	f
main	3/word_echo.cc	/^int main() $/;"	f
main	4/arr_init.cc	/^int main()$/;"	f
main	4/copy_array.cc	/^int main()$/;"	f
main	4/cstring_exercise.cc	/^int main()$/;"	f
main	4/cstring_hdr.cc	/^int main() {$/;"	f
main	4/dbl_ptr.cc	/^int main()$/;"	f
main	4/multidim.cc	/^int main()$/;"	f
main	4/ptr_traversal.cc	/^int main()$/;"	f
main	4/string_exercise.cc	/^int main()$/;"	f
main	5/andtest.cc	/^int main() $/;"	f
main	5/arraysizeof.cc	/^int main()$/;"	f
main	5/assignment.cc	/^int main() {$/;"	f
main	5/cnt_found.cc	/^int main()$/;"	f
main	5/cond.cc	/^int main()$/;"	f
main	5/cond2.cc	/^int main()$/;"	f
main	5/find_word.cc	/^int main()$/;"	f
main	5/incr.cc	/^int main() $/;"	f
main	5/int-div.cc	/^int main() $/;"	f
main	5/oknew.cc	/^int main() $/;"	f
main	5/overflow.cc	/^int main() $/;"	f
main	5/prec.cc	/^int main() $/;"	f
main	5/shift-prec.cc	/^int main()$/;"	f
main	5/sizeof_arr.cc	/^int main()$/;"	f
main	5/sizeof_pgm.cc	/^int main() $/;"	f
main	5/vec_init.cc	/^int main()$/;"	f
main	5/warn_dbltoint.cc	/^int main()$/;"	f
main	6/copy_array.cc	/^int main()$/;"	f
main	6/doWhile.cc	/^int main()$/;"	f
main	6/exception_example.cc	/^int main() $/;"	f
main	6/forcount.cc	/^int main()$/;"	f
main	6/othercnt.cc	/^int main()$/;"	f
main	6/vowels.cc	/^int main()$/;"	f
main	6/wdebug.cc	/^int main() $/;"	f
main	7/cfcn_ex.c	/^int main()$/;"	f
main	7/conv-enums.cc	/^int main() {$/;"	f
main	7/count-calls.cc	/^int main() $/;"	f
main	7/enum-match.cc	/^int main() {$/;"	f
main	7/fact.cc	/^int main()$/;"	f
main	7/good_printmain.cc	/^int main() $/;"	f
main	7/inline_shorter.cc	/^int main()$/;"	f
main	7/mainmath.cc	/^int main()$/;"	f
main	7/mainret.cc	/^int main()$/;"	f
main	7/mk_plural.cc	/^int main()$/;"	f
main	7/pow_main.cc	/^int main()$/;"	f
main	7/ref-fcn.cc	/^int main() $/;"	f
main	7/refret-ex.cc	/^int main() {$/;"	f
main	7/rgcd.cc	/^int main()$/;"	f
main	7/stl-arr-fcns.cc	/^int main() $/;"	f
main	7/usefcnptr.cc	/^int main() $/;"	f
main	7/useptrparms.cc	/^int main() $/;"	f
main	7/useptrswap.cc	/^int main() $/;"	f
main	7/vec-parms.cc	/^int main()$/;"	f
main	7/vecprintmain.cc	/^int main() $/;"	f
main	8/badgetc.cc	/^int main()$/;"	f
main	8/buf.cc	/^int main()$/;"	f
main	8/getc.cc	/^int main()$/;"	f
main	8/getput.cc	/^int main()$/;"	f
main	8/main-proto.cc	/^int main(int argc, char **argv)$/;"	f
main	8/manips.cc	/^int main()$/;"	f
main	8/no-skipws.cc	/^int main()$/;"	f
main	8/point.cc	/^int main()$/;"	f
main	8/prec.cc	/^int main()$/;"	f
main	8/sci_dec.cc	/^int main() $/;"	f
main	8/seek.cc	/^int main()$/;"	f
main	8/setw.cc	/^int main()$/;"	f
main	8/skipws.cc	/^int main()$/;"	f
main	8/sstream.cc	/^int main()$/;"	f
main	8/use-getopen.cc	/^int main()$/;"	f
main	9/array_init.cc	/^int main()$/;"	f
main	9/capacity.cc	/^int main()$/;"	f
main	9/ctors.cc	/^int main()$/;"	f
main	9/find-str.cc	/^int main() $/;"	f
main	9/find_ops.cc	/^int main() $/;"	f
main	9/stack.cc	/^int main()$/;"	f
main	9/str_assignOps.cc	/^int main() $/;"	f
main	9/str_print.cc	/^int main() $/;"	f
main	9/substr.cc	/^int main()$/;"	f
make_plural	7/mk_plural.cc	/^string make_plural(size_t ctr, const string &word, $/;"	f
make_plural	7/mk_plural2.cc	/^string make_plural(size_t ctr, const string &word, $/;"	f
max	16/spcl-max.cc	/^T max(T t1, T t2)$/;"	f
max	16/spcl-max.cc	/^char* max<char*>(char* s1, char* s2)$/;"	f
max_qty	15/Basket.h	/^    std::size_t max_qty;   \/\/ maximum number sold at discount$/;"	m	class:Lim_item
max_qty	16/Basket.h	/^    std::size_t max_qty;   \/\/ maximum number sold at discount$/;"	m	class:Lim_item
mem	15/scope.cc	/^    int mem;   \/\/ hides mem in the base$/;"	m	struct:Derived	file:
mem	15/scope.cc	/^    int mem;$/;"	m	struct:Base	file:
messages	13/Folder.cc	/^vector<Message*> Folder::messages()$/;"	f	class:Folder
min	16/swap.cc	/^template <class T> T min(T a, T b) $/;"	f
min_element	7/usefcnptr.cc	/^int min_element(vector<int>::iterator beg, $/;"	f
min_qty	15/Basket.h	/^    std::size_t min_qty;   \/\/ minimum purchase for discount to apply$/;"	m	class:Bulk_item
min_qty	16/Basket.h	/^    std::size_t min_qty;   \/\/ minimum purchase for discount to apply$/;"	m	class:Bulk_item
move	12/screen3.h	/^Screen& Screen::move(index r, index c)$/;"	f	class:Screen
move	12/screen4.h	/^Screen& Screen::move(index r, index c)$/;"	f	class:Screen
move	12/screen5.h	/^    Screen& move(index r, index c) $/;"	f	class:Screen
move	12/screen5.h	/^    const Screen& move(index r, index c) const $/;"	f	class:Screen
msgs	13/Folder.h	/^    std::set<Message*> msgs;  \/\/ messages in this folder$/;"	m	class:Folder
name	17/Animal.h	/^    std::string name() const { return nm; }$/;"	f	class:ZooAnimal
name	17/nopandaprint.h	/^    std::string name() const { return nm; }$/;"	f	class:ZooAnimal
name	17/virt.h	/^    std::string name() const { return nm; }$/;"	f	class:ZooAnimal
name	17/virt.h	/^    std::string name;$/;"	m	class:Bear
net_price	15/Basket.cc	/^double Bulk_item::net_price(size_t cnt) const$/;"	f	class:Bulk_item
net_price	15/Basket.cc	/^double Lim_item::net_price(size_t cnt) const$/;"	f	class:Lim_item
net_price	15/Basket.h	/^    virtual double net_price(std::size_t n) const $/;"	f	class:Item_base
net_price	15/Basket2.h	/^    virtual double net_price(std::size_t n) const $/;"	f	class:Item_base
net_price	15/V2_Basket.cc	/^double Bulk_item::net_price(size_t cnt) const$/;"	f	class:Bulk_item
net_price	15/V2_Basket.cc	/^double Lim_item::net_price(size_t cnt) const$/;"	f	class:Lim_item
net_price	16/Basket.cc	/^double Bulk_item::net_price(size_t cnt) const$/;"	f	class:Bulk_item
net_price	16/Basket.cc	/^double Lim_item::net_price(size_t cnt) const$/;"	f	class:Lim_item
net_price	16/Basket.h	/^    virtual double net_price(std::size_t n) const $/;"	f	class:Item_base
newf	7/enum-match.cc	/^void newf(int) { cout << "newf(int)" << endl; }$/;"	f
newf	7/enum-match.cc	/^void newf(unsigned char) { cout << "newf(unsigned char)" << endl; }$/;"	f
next	16/Queue.h	/^    QueueItem *next;     \/\/ pointer to next element in the Queue$/;"	m	class:QueueItem
next	18/CachedObj.h	/^    T *next;$/;"	m	class:CachedObj
next	18/MS_statmem.cc	/^        QueueItem *next;     \/\/ pointer to next element in the Queue$/;"	m	struct:Queue::QueueItem	file:
next	18/Queue.h	/^        QueueItem *next;     \/\/ pointer to next element in the Queue$/;"	m	struct:Queue::QueueItem
next	18/statmem.cc	/^    QueueItem *next;     \/\/ pointer to next element in the Queue$/;"	m	struct:Queue::QueueItem	file:
nm	17/Animal.h	/^    std::string nm;$/;"	m	class:ZooAnimal
nm	17/nopandaprint.h	/^    std::string nm;$/;"	m	class:ZooAnimal
nm	17/virt.h	/^    std::string nm;$/;"	m	class:ZooAnimal
no_null	9/ctors.cc	/^char no_null[] = {'H', 'i'};  \/\/ not null-terminated$/;"	v
onExhibit	17/Animal.h	/^    bool onExhibit() const { return exhibit_stat; }$/;"	f	class:ZooAnimal
onExhibit	17/nopandaprint.h	/^    bool onExhibit() const { return exhibit_stat; }$/;"	f	class:ZooAnimal
onExhibit	17/virt.h	/^    bool onExhibit() const { return exhibit_stat; }$/;"	f	class:ZooAnimal
open_file	8/get_openfile.cc	/^ifstream& open_file(ifstream &in, const string &file)$/;"	f
open_modes	2/print_enum.cc	/^enum open_modes {input = 1, output, append};$/;"	g	file:
open_modes	2/print_enum2.cc	/^enum open_modes {input = 1, output, append};$/;"	g	file:
oper	15/Query.h	/^    const std::string oper; \/\/ name of the operator$/;"	m	class:BinaryQuery
oper	16/Query.h	/^    std::string oper; \/\/ name of the operator$/;"	m	class:BinaryQuery
operator !=	1/Sales_item.h	/^operator!=(const Sales_item &lhs, const Sales_item &rhs)$/;"	f
operator !=	14/Sales_item.h	/^operator!=(const Sales_item &lhs, const Sales_item &rhs)$/;"	f
operator !=	17/Sales_item.h	/^operator!=(const Sales_item &lhs, const Sales_item &rhs)$/;"	f
operator &	15/Query.h	/^inline Query operator&(const Query &lhs, const Query &rhs)$/;"	f
operator &	16/Query.h	/^inline Query operator&(const Query &lhs, const Query &rhs)$/;"	f
operator ()	14/absInt.cc	/^    int operator()(int val) {$/;"	f	struct:absInt
operator ()	14/count-size.cc	/^    bool operator()(const string &s) $/;"	f	class:GT_cls
operator ()	14/count-size.cc	/^    bool operator()(const string &s) { return s.size() == bound; }$/;"	f	class:EQ
operator *	14/CheckedPtr.cc	/^const int& CheckedPtr::operator*() const$/;"	f	class:CheckedPtr
operator *	14/CheckedPtr.cc	/^int& CheckedPtr::operator*() $/;"	f	class:CheckedPtr
operator *	14/ScrPtr.h	/^    Screen &operator*() { return *ptr->sp; }$/;"	f	class:ScreenPtr
operator *	14/ScrPtr.h	/^    const Screen &operator*() const { return *ptr->sp; }$/;"	f	class:ScreenPtr
operator *	15/Basket.h	/^    const Item_base &operator*() const { if (p) return *p; $/;"	f	class:Sales_item
operator *	15/Basket2.h	/^    const Item_base &operator*() const { return *p; }$/;"	f	class:Sales_item
operator *	16/Basket.h	/^    const Item_base& operator*() const { return *h; }$/;"	f	class:Sales_item
operator *	16/Handle.h	/^const T& Handle<T>::operator*() const$/;"	f	class:Handle
operator *	16/Handle.h	/^template <class T> inline T& Handle<T>::operator*() $/;"	f	class:Handle
operator *	17/Handle.h	/^const T& Handle<T>::operator*() const$/;"	f	class:Handle
operator *	17/Handle.h	/^template <class T> inline T& Handle<T>::operator*() $/;"	f	class:Handle
operator *	17/MS_Handle.h	/^const T& Handle<T>::operator*() const$/;"	f	class:Handle
operator *	17/MS_Handle.h	/^template <class T> inline T& Handle<T>::operator*() $/;"	f	class:Handle
operator +	1/Sales_item.h	/^operator+(const Sales_item& lhs, const Sales_item& rhs) $/;"	f
operator +	14/Sales_item.cc	/^operator+(const Sales_item& lhs, const Sales_item& rhs) $/;"	f
operator +	17/Sales_item.cc	/^operator+(const Sales_item& lhs, const Sales_item& rhs) $/;"	f
operator ++	14/CheckedPtr.cc	/^CheckedPtr CheckedPtr::operator++(int)$/;"	f	class:CheckedPtr
operator ++	14/CheckedPtr.cc	/^CheckedPtr& CheckedPtr::operator++()$/;"	f	class:CheckedPtr
operator +=	1/Sales_item.h	/^Sales_item& Sales_item::operator+=(const Sales_item& rhs) $/;"	f	class:Sales_item
operator +=	14/Sales_item.cc	/^Sales_item& Sales_item::operator+=(const Sales_item& rhs) $/;"	f	class:Sales_item
operator +=	17/Sales_item.cc	/^Sales_item::operator+=(const Sales_item& rhs) $/;"	f	class:Sales_item
operator --	14/CheckedPtr.cc	/^CheckedPtr CheckedPtr::operator--(int)$/;"	f	class:CheckedPtr
operator --	14/CheckedPtr.cc	/^CheckedPtr& CheckedPtr::operator--()$/;"	f	class:CheckedPtr
operator ->	14/ScrPtr.h	/^    Screen *operator->() { return ptr->sp; }$/;"	f	class:ScreenPtr
operator ->	14/ScrPtr.h	/^    const Screen *operator->() const { return ptr->sp; }$/;"	f	class:ScreenPtr
operator ->	15/Basket.h	/^    const Item_base *operator->() const { if (p) return p; $/;"	f	class:Sales_item
operator ->	15/Basket2.h	/^    const Item_base *operator->() const { return p; }$/;"	f	class:Sales_item
operator ->	16/Basket.h	/^    const Item_base* operator->() const $/;"	f	class:Sales_item
operator ->	16/Handle.h	/^const T* Handle<T>::operator->() const$/;"	f	class:Handle
operator ->	16/Handle.h	/^template <class T> inline T* Handle<T>::operator->() $/;"	f	class:Handle
operator ->	17/Handle.h	/^const T* Handle<T>::operator->() const$/;"	f	class:Handle
operator ->	17/Handle.h	/^template <class T> inline T* Handle<T>::operator->() $/;"	f	class:Handle
operator ->	17/MS_Handle.h	/^const T* Handle<T>::operator->() const$/;"	f	class:Handle
operator ->	17/MS_Handle.h	/^template <class T> inline T* Handle<T>::operator->() $/;"	f	class:Handle
operator <	16/Basket.h	/^operator<(const Item_base &lhs, const Item_base &rhs) $/;"	f
operator <	16/Basket.h	/^operator<(const Sales_item &lhs, const Sales_item &rhs) $/;"	f
operator <<	1/Sales_item.h	/^operator<<(ostream& out, const Sales_item& s)$/;"	f
operator <<	13/plain-ptr.cc	/^ostream& operator<<(ostream &os, const HasPtr &hp)$/;"	f
operator <<	13/smart-ptr.cc	/^ostream& operator<<(ostream &os, const HasPtr &hp)$/;"	f
operator <<	13/value-ptr.cc	/^ostream& operator<<(ostream &os, const HasPtr &hp)$/;"	f
operator <<	14/Sales_item.cc	/^operator<<(ostream& out, const Sales_item& s)$/;"	f
operator <<	15/Query.h	/^operator<<(std::ostream &os, const Query &q)$/;"	f
operator <<	16/Query.h	/^operator<<(std::ostream &os, const Query &q)$/;"	f
operator <<	16/Queue.cc	/^ostream& operator<<(ostream &os, const Queue<Type> &q)$/;"	f
operator <<	16/char_queue.cc	/^ostream& operator<<(ostream &os, const Queue<const char*> &q)$/;"	f
operator <<	16/newQueue.h	/^std::ostream& operator<<(std::ostream &os, const Queue<Type> &q)$/;"	f
operator <<	17/Sales_item.cc	/^operator<<(ostream& out, const Sales_item& s)$/;"	f
operator <<	18/Queue.cc	/^ostream& operator<<(ostream &os, const Queue<Type> &q)$/;"	f
operator =	13/Folder.cc	/^Folder& Folder::operator=(const Folder &f)$/;"	f	class:Folder
operator =	13/Folder.cc	/^Message& Message::operator=(const Message &rhs)$/;"	f	class:Message
operator =	13/smart-ptr.cc	/^HasPtr& HasPtr::operator=(const HasPtr &rhs)$/;"	f	class:HasPtr
operator =	13/value-ptr.cc	/^HasPtr& HasPtr::operator=(const HasPtr &rhs)$/;"	f	class:HasPtr
operator =	14/ScrPtr.h	/^ScreenPtr& ScreenPtr::operator=(const ScreenPtr &rhs)$/;"	f	class:ScreenPtr
operator =	15/Basket.cc	/^Sales_item::operator=(const Sales_item &rhs)$/;"	f	class:Sales_item
operator =	15/Query.h	/^inline Query& Query::operator=(const Query &rhs)$/;"	f	class:Query
operator =	15/V2_Basket.cc	/^Sales_item::operator=(const Sales_item &rhs)$/;"	f	class:Sales_item
operator =	16/Handle.h	/^inline Handle<T>& Handle<T>::operator=(const Handle &rhs)$/;"	f	class:Handle
operator =	16/Queue.cc	/^Queue<Type>& Queue<Type>::operator=(const Queue &rhs)$/;"	f	class:Queue
operator =	17/Handle.h	/^Handle<T>& Handle<T>::operator=(const Handle &rhs)$/;"	f	class:Handle
operator =	17/MS_Handle.h	/^Handle<T>& Handle<T>::operator=(const Handle &rhs)$/;"	f	class:Handle
operator =	18/MS_statmem.cc	/^Queue<Type>& Queue<Type>::operator=(const Queue &rhs)$/;"	f	class:Queue
operator =	18/Queue.cc	/^Queue<Type>& Queue<Type>::operator=(const Queue &rhs)$/;"	f	class:Queue
operator =	18/statmem.cc	/^Queue<Type>& Queue<Type>::operator=(const Queue &rhs)$/;"	f	class:Queue
operator ==	1/Sales_item.h	/^operator==(const Sales_item &lhs, const Sales_item &rhs)$/;"	f
operator ==	14/Sales_item.h	/^operator==(const Sales_item &lhs, const Sales_item &rhs)$/;"	f
operator ==	17/Sales_item.h	/^operator==(const Sales_item &lhs, const Sales_item &rhs)$/;"	f
operator >>	1/Sales_item.h	/^operator>>(istream& in, Sales_item& s)$/;"	f
operator >>	14/Sales_item.cc	/^operator>>(istream& in, Sales_item& s)$/;"	f
operator >>	17/Sales_item.cc	/^operator>>(istream& in, Sales_item& s)$/;"	f
operator []	14/subscript.cc	/^const int& Foo::operator[](const size_t index) const$/;"	f	class:Foo
operator []	14/subscript.cc	/^int& Foo::operator[](const size_t index)$/;"	f	class:Foo
operator []	18/vec-opnew.cc	/^    T& operator[](size_t n) { return elements[n]; }$/;"	f	class:Vector
operator []	18/vec-opnew.cc	/^    const T& operator[](size_t n) const { return elements[n]; }$/;"	f	class:Vector
operator []	18/vec.cc	/^    T& operator[](size_t n) { return elements[n]; }$/;"	f	class:Vector
operator []	18/vec.cc	/^    const T& operator[](size_t n) const { return elements[n]; }$/;"	f	class:Vector
operator int	16/Queue-assign.cc	/^    operator int() { return val; }$/;"	f	class:SmallInt
operator |	15/Query.h	/^inline Query operator|(const Query &lhs, const Query &rhs)$/;"	f
operator |	16/Query.h	/^inline Query operator|(const Query &lhs, const Query &rhs)$/;"	f
operator ~	15/Query.h	/^inline Query operator~(const Query &oper)$/;"	f
operator ~	16/Query.h	/^inline Query operator~(const Query &oper)$/;"	f
out_of_stock	17/bookexcept.h	/^    explicit out_of_stock(const std::string &s):$/;"	f	class:out_of_stock
out_of_stock	17/bookexcept.h	/^class out_of_stock: public std::runtime_error {$/;"	c
output	2/print_enum.cc	/^enum open_modes {input = 1, output, append};$/;"	e	enum:open_modes	file:
output	2/print_enum2.cc	/^enum open_modes {input = 1, output, append};$/;"	e	enum:open_modes	file:
owner	12/Account.h	/^    std::string owner;$/;"	m	class:Account
p	15/Basket.h	/^    Item_base *p;         \/\/ pointer to shared item$/;"	m	class:Sales_item
p	15/Basket2.h	/^    Item_base *p;         \/\/ pointer to shared item$/;"	m	class:Sales_item
percent	11/vocab.cc	/^percent(double numerator, double denominator)$/;"	f
period	12/Account.h	/^    static const int period = 30;  \/\/ interest posted every 30 days$/;"	m	class:Account
pettable	17/virt.h	/^    bool pettable() const {return pettable_flag;  }$/;"	f	class:Raccoon
pettable	17/virt.h	/^    void pettable(bool petval) {pettable_flag = petval;}$/;"	f	class:Raccoon
pettable_flag	17/virt.h	/^    bool pettable_flag;$/;"	m	class:Raccoon
pf	7/usefcnptr.cc	/^int (*pf)(vector<int>::iterator, vector<int>::iterator) $/;"	v
pop	16/Queue.cc	/^template <class Type> void Queue<Type>::pop()$/;"	f	class:Queue
pop	16/char_queue.h	/^    void pop()               {real_queue.pop();}$/;"	f	class:Queue
pop	16/newQueue.h	/^    void pop()               { items.erase(items.begin()); }$/;"	f	class:Queue
pop	16/queue_push_char.cc	/^void Queue<const char*>::pop()$/;"	f	class:Queue
pop	18/MS_statmem.cc	/^void Queue<Type>::pop()$/;"	f	class:Queue
pop	18/Queue.cc	/^void Queue<Type>::pop()$/;"	f	class:Queue
pop	18/statmem.cc	/^void Queue<Type>::pop()$/;"	f	class:Queue
pow	2/pow_fcn.cc	/^pow( int val, int exp )$/;"	f
power	7/pow_fcn.cc	/^power(int value, int pow)$/;"	f
price	15/Basket.h	/^    double price;       \/\/ normal, undiscounted price$/;"	m	class:Item_base
price	15/Basket2.h	/^    double price;       \/\/ normal, undiscounted price$/;"	m	class:Item_base
price	16/Basket.h	/^    double price;       \/\/ normal, undiscounted price$/;"	m	class:Item_base
print	17/Animal.h	/^std::ostream& Panda::print(std::ostream &os) const$/;"	f	class:Panda
print	7/vec-parms.cc	/^void print(const vector<int> &vec)$/;"	f
print	7/vec-parms.cc	/^void print(vector<int>::const_iterator beg,$/;"	f
printValues	7/good_printmain.cc	/^void printValues(const int ia[], size_t size) $/;"	f
printValues	7/stl-arr-fcns.cc	/^void printValues(const int *beg, const int *end) $/;"	f
printValues	7/vecprint.cc	/^void printValues(const vector<int>& vec)$/;"	f
print_message	13/Folder.h	/^    std::string print_message() { return contents; }$/;"	f	class:Message
print_results	10/querymain.cc	/^void print_results(const set<TextQuery::line_no>& locs, $/;"	f
print_results	15/get_print.cc	/^void print_results(const set<TextQuery::line_no>& locs, const TextQuery &file)$/;"	f
print_total	15/Basket.cc	/^void print_total(ostream &os, $/;"	f
print_total	15/V2_Basket.cc	/^void print_total(ostream &os, $/;"	f
print_total	16/Basket.cc	/^void print_total(ostream &os, $/;"	f
process	17/book.cc	/^void process(double) { }$/;"	f
prompt_user	11/vocab.cc	/^ifstream &prompt_user(ifstream &stream)$/;"	f
ptr	13/plain-ptr.cc	/^    int *ptr;$/;"	m	class:HasPtr	file:
ptr	13/smart-ptr.cc	/^    U_Ptr *ptr;        \/\/ points to use-counted U_Ptr class$/;"	m	class:HasPtr	file:
ptr	13/value-ptr.cc	/^    int *ptr;        \/\/ points to an int$/;"	m	class:HasPtr	file:
ptr	14/ScrPtr.h	/^    ScrPtr *ptr;        \/\/ points to use-counted ScrPtr class$/;"	m	class:ScreenPtr
ptr	16/Handle.h	/^    T* ptr;          \/\/ shared object$/;"	m	class:Handle
ptr	17/Handle.h	/^    T* ptr;$/;"	m	class:Handle
ptr	17/MS_Handle.h	/^    T* ptr;$/;"	m	class:Handle
ptrswap	7/useptrswap.cc	/^void ptrswap(int *&v1, int *&v2) $/;"	f
push	16/Queue.cc	/^template <class Type> void Queue<Type>::push(const Type &val)$/;"	f	class:Queue
push	16/char_queue.h	/^void Queue<const char*>::push(const char* val)$/;"	f	class:Queue
push	16/newQueue.h	/^    void push(const Type &t) { items.push_back(t); }$/;"	f	class:Queue
push	16/queue_push_char.cc	/^void Queue<const char*>::push(const char *const &val)$/;"	f	class:Queue
push	18/MS_statmem.cc	/^void Queue<Type>::push(const Type &val)$/;"	f	class:Queue
push	18/Queue.cc	/^void Queue<Type>::push(const Type &val)$/;"	f	class:Queue
push	18/statmem.cc	/^void Queue<Type>::push(const Type &val)$/;"	f	class:Queue
push_back	18/vec-opnew.cc	/^void Vector<T>::push_back(const T& t)$/;"	f	class:Vector
push_back	18/vec.cc	/^template <class T> void Vector<T>::push_back(const T& t)$/;"	f	class:Vector
put_Msg_in_Folders	13/Folder.cc	/^void Message::put_Msg_in_Folders(const set<Folder*> &rhs)$/;"	f	class:Message
q	15/Query.h	/^    Query_base *q;$/;"	m	class:Query
quantity	15/Basket2.h	/^    std::size_t quantity;  \/\/ purchase size for discount to apply$/;"	m	class:Disc_item
query	15/Query.h	/^    const Query query;$/;"	m	class:NotQuery
query	16/Query.h	/^    Query query;$/;"	m	class:NotQuery
query_word	15/Query.h	/^    std::string query_word;   \/\/ word for which to search $/;"	m	class:WordQuery
query_word	16/Query.h	/^    std::string query_word;$/;"	m	class:WordQuery
rate	12/Account.h	/^    static double rate() { return interestRate; }$/;"	f	class:Account
rate	12/Account.h	/^void Account::rate(double newRate) $/;"	f	class:Account
read_file	10/3ed_query.h	/^    void read_file(std::ifstream &is) $/;"	f	class:TextQuery
read_file	10/TextQuery.h	/^    void read_file(std::ifstream &is) $/;"	f	class:TextQuery
read_write	11/iostream_iter.cc	/^void read_write() {$/;"	f
real_queue	16/char_queue.h	/^    Queue<std::string> real_queue; \/\/ forward calls to real_queue$/;"	m	class:Queue
reallocate	18/vec-opnew.cc	/^void Vector<T>::reallocate()$/;"	f	class:Vector
reallocate	18/vec.cc	/^template <class T> void Vector<T>::reallocate()$/;"	f	class:Vector
remFldr	13/Folder.h	/^    void remFldr(Folder *f) { folders.erase(f); }$/;"	f	class:Message
remMsg	13/Folder.h	/^    void remMsg(Message *m) { msgs.erase(m); }$/;"	f	class:Folder
rem_ref	16/Handle.h	/^    void rem_ref() $/;"	f	class:Handle
rem_ref	17/Handle.h	/^    void rem_ref() { if (--*use == 0) {delete ptr; delete use;} }$/;"	f	class:Handle
rem_ref	17/MS_Handle.h	/^    void rem_ref() { if (--*use == 0) {delete ptr; delete use;} }$/;"	f	class:Handle
remove	13/Folder.cc	/^void Folder::remove(Message &m)$/;"	f	class:Folder
remove	13/Folder.cc	/^void Message::remove(Folder &f)$/;"	f	class:Message
remove_Msg_from_Folders	13/Folder.cc	/^void Message::remove_Msg_from_Folders()$/;"	f	class:Message
report_complexity	11/vocab.cc	/^void report_complexity(vector<string>::iterator beg,$/;"	f
reset	7/useptrparms.cc	/^void reset(int *ip)$/;"	f
restricted_wc	10/setexclusion.cc	/^void restricted_wc(ifstream &remove_file,$/;"	f
revenue	1/Sales_item.h	/^    double revenue;$/;"	m	class:Sales_item
revenue	14/Sales_item.h	/^    double revenue;$/;"	m	class:Sales_item
revenue	17/Sales_item.h	/^    double revenue;$/;"	m	class:Sales_item
rgcd	7/rgcd.cc	/^int rgcd(int v1, int v2)$/;"	f
rhs	15/Query.h	/^    const Query lhs, rhs;   \/\/ right- and left-hand operands$/;"	m	class:BinaryQuery
rhs	16/Query.h	/^    Query lhs, rhs;   \/\/ right and left hand operands$/;"	m	class:BinaryQuery
right	17/bookexcept.h	/^    const std::string left, right;$/;"	m	class:isbn_mismatch
run_query	10/3ed_query.cc	/^vector<TextQuery::location> TextQuery::run_query(const string &s)$/;"	f	class:TextQuery
run_query	10/TextQuery.cc	/^TextQuery::run_query(const string &query_word) const$/;"	f	class:TextQuery
s	9/str_assignOps.cc	/^string s, s2;$/;"	v
s1	2/scope_levels.cc	/^std::string s1 = "hello";  \/\/ s1 has global scope$/;"	v
s2	9/str_assignOps.cc	/^string s, s2;$/;"	v
same_isbn	1/Sales_item.h	/^    bool same_isbn(const Sales_item &rhs) const$/;"	f	class:Sales_item
same_isbn	14/Sales_item.h	/^    bool same_isbn(const Sales_item &rhs) const$/;"	f	class:Sales_item
same_isbn	17/Sales_item.h	/^    bool same_isbn(const Sales_item &rhs) const$/;"	f	class:Sales_item
save	13/Folder.cc	/^void Folder::save(Message &m)$/;"	f	class:Folder
save	13/Folder.cc	/^void Message::save(Folder &f)$/;"	f	class:Message
set	12/screen3.h	/^Screen& Screen::set(char c) $/;"	f	class:Screen
set	12/screen3.h	/^Screen& Screen::set(index r, index c, char ch)$/;"	f	class:Screen
set	12/screen4.h	/^Screen& Screen::set(char c) $/;"	f	class:Screen
set	12/screen4.h	/^Screen& Screen::set(index r, index c, char ch)$/;"	f	class:Screen
set	12/screen5.h	/^Screen& Screen::set(char c) $/;"	f	class:Screen
set	12/screen5.h	/^Screen& Screen::set(index r, index c, char ch)$/;"	f	class:Screen
set	18/screen.cc	/^Screen& Screen::set(char c)$/;"	f	class:Screen
set	18/screen.cc	/^Screen& Screen::set(index r, index c, char ch)$/;"	f	class:Screen
set_int	13/plain-ptr.cc	/^    void set_int(int i) { val = i; }$/;"	f	class:HasPtr
set_int	13/smart-ptr.cc	/^    void set_int(int i) { val = i; }$/;"	f	class:HasPtr
set_int	13/value-ptr.cc	/^    void set_int(int i)  { val = i; }$/;"	f	class:HasPtr
set_ptr	13/plain-ptr.cc	/^    void set_ptr(int *p) { ptr = p; }$/;"	f	class:HasPtr
set_ptr	13/smart-ptr.cc	/^    void set_ptr(int *p) { ptr->ip = p; }$/;"	f	class:HasPtr
set_ptr	13/value-ptr.cc	/^    void set_ptr(int *p) { ptr = p; }$/;"	f	class:HasPtr
set_ptr_val	13/plain-ptr.cc	/^    void set_ptr_val(int val) const { *ptr = val; }$/;"	f	class:HasPtr
set_ptr_val	13/smart-ptr.cc	/^    void set_ptr_val(int i) { *ptr->ip = i; }$/;"	f	class:HasPtr
set_ptr_val	13/value-ptr.cc	/^    void set_ptr_val(int p) const { *ptr = p; }$/;"	f	class:HasPtr
set_type	15/Basket.h	/^    typedef std::multiset<Sales_item, Comp> set_type;$/;"	t	class:Basket
shorterString	7/inline_shorter.cc	/^shorterString(const string &s1, const string &s2)$/;"	f
show_copy_control	13/plain-ptr.cc	/^void show_copy_control()$/;"	f
size	10/3ed_query.h	/^    str_size size() const { return lines_of_text.size(); }$/;"	f	class:TextQuery
size	10/TextQuery.h	/^    str_size size() const { return lines_of_text.size(); }$/;"	f	class:TextQuery
size	15/Basket.h	/^    size_type size(const Sales_item &i) const$/;"	f	class:Basket
size	15/Basket2.h	/^    size_type size(const Sales_item &i) const$/;"	f	class:Basket
size	18/vec.cc	/^    size_t size() const { return first_free - elements; }$/;"	f	class:Vector
size_compare	14/fcnobj.cc	/^bool size_compare(string s, string::size_type sz)$/;"	f
size_type	15/Basket.h	/^    typedef set_type::size_type size_type;$/;"	t	class:Basket
size_type	15/Basket2.h	/^    typedef std::multiset<Sales_item, Comp>::size_type size_type;$/;"	t	class:Basket
size_type	16/Basket.h	/^    typedef std::multiset<Sales_item>::size_type size_type;$/;"	t	class:Basket
skip_whitespace	10/3ed_query.cc	/^TextQuery::skip_whitespace(const string &line, str_size pos)$/;"	f	class:TextQuery
sleeping	17/virt.h	/^    bool sleeping() const {return sleeping_flag;}$/;"	f	class:Panda
sleeping	17/virt.h	/^    void sleeping(bool newval) {sleeping_flag = newval;}$/;"	f	class:Panda
sleeping_flag	17/virt.h	/^    bool sleeping_flag;$/;"	m	class:Panda
sp	14/ScrPtr.h	/^    Screen *sp;$/;"	m	class:ScrPtr
st	3/str_vers3.cc	/^const char *st = "The expense of spirit\\n";$/;"	v
static_mem	18/statmem.cc	/^    static int static_mem;$/;"	m	struct:Queue::QueueItem	file:
static_mem	18/statmem.cc	/^int Queue<Type>::QueueItem::static_mem = 1024;$/;"	m	class:Queue::QueueItem	file:
store_file	10/3ed_query.cc	/^void TextQuery::store_file(ifstream &is)$/;"	f	class:TextQuery
store_file	10/TextQuery.cc	/^void TextQuery::store_file(ifstream &is)$/;"	f	class:TextQuery
str	7/cfcn_ex.c	/^const char *str = "hello";$/;"	v
str_size	10/3ed_query.h	/^    typedef std::string::size_type str_size;$/;"	t	class:TextQuery
str_size	10/TextQuery.h	/^    typedef std::string::size_type str_size;$/;"	t	class:TextQuery
strip_caps	10/3ed_query.cc	/^void TextQuery::strip_caps(string &line)$/;"	f	class:TextQuery
strip_punct	10/3ed_query.cc	/^void TextQuery::strip_punct(string &line)$/;"	f	class:TextQuery
strip_suffixes	10/3ed_query.cc	/^void TextQuery::strip_suffixes(string &word)$/;"	f	class:TextQuery
suffix_s	10/3ed_query.cc	/^void TextQuery::suffix_s(string &word)$/;"	f	class:TextQuery
swap	16/swap.cc	/^void swap(T& val1, T& val2)$/;"	f
swap	7/badswap.cc	/^void swap(int v1, int v2) $/;"	f
swap	7/swap.cc	/^void swap(int &v1, int &v2) $/;"	f
tail	16/Queue.h	/^    QueueItem<Type> *tail;         \/\/ pointer to last element in Queue$/;"	m	class:Queue
tail	16/int-Queue.h	/^    QueueItem<int> *tail;   $/;"	m	class:Queue
tail	18/MS_statmem.cc	/^    QueueItem *tail;   \/\/ pointer to last element in Queue$/;"	m	class:Queue	file:
tail	18/Queue.h	/^    QueueItem *tail;   \/\/ pointer to last element in Queue$/;"	m	class:Queue
tail	18/statmem.cc	/^    QueueItem *tail;   \/\/ pointer to last element in Queue$/;"	m	class:Queue	file:
test_insert	10/3ed_query.cc	/^void TextQuery::test_insert(const string &line, str_size prev_pos, $/;"	f	class:TextQuery
text_line	10/3ed_query.h	/^    std::string text_line(line_no line) { return lines_of_text[line]; }$/;"	f	class:TextQuery
text_line	10/TextQuery.cc	/^string TextQuery::text_line(line_no line) const$/;"	f	class:TextQuery
total	15/Basket.cc	/^double Basket::total() const$/;"	f	class:Basket
total	15/V2_Basket.cc	/^double Basket::total() const$/;"	f	class:Basket
total	16/Basket.cc	/^double Basket::total() const$/;"	f	class:Basket
two_left_feet	17/Animal.h	/^enum DanceType { two_left_feet, macarena, fandango, waltz };$/;"	e	enum:Bear::DanceType
two_left_feet	17/nopandaprint.h	/^enum DanceType { two_left_feet, macarena, fandango, waltz };$/;"	e	enum:Bear::DanceType
two_left_feet	17/virt.h	/^    enum DanceType { two_left_feet, macarena, fandango };$/;"	e	enum:Bear::DanceType
units_sold	1/Sales_item.h	/^    unsigned units_sold;$/;"	m	class:Sales_item
units_sold	14/Sales_item.h	/^    unsigned units_sold;$/;"	m	class:Sales_item
units_sold	17/Sales_item.h	/^    unsigned units_sold;$/;"	m	class:Sales_item
use	13/smart-ptr.cc	/^	size_t use;$/;"	m	class:U_Ptr	file:
use	14/ScrPtr.h	/^    size_t use;$/;"	m	class:ScrPtr
use	15/Basket.h	/^    std::size_t *use;     \/\/ pointer to shared use count$/;"	m	class:Sales_item
use	15/Basket2.h	/^    std::size_t *use;     \/\/ pointer to shared use count$/;"	m	class:Sales_item
use	15/Query.h	/^    std::size_t *use;$/;"	m	class:Query
use	16/Handle.h	/^    size_t *use;     \/\/ count of how many Handles point to *ptr$/;"	m	class:Handle
use	17/Handle.h	/^    size_t *use;$/;"	m	class:Handle
use	17/MS_Handle.h	/^    size_t *use;$/;"	m	class:Handle
val	13/plain-ptr.cc	/^    int val;$/;"	m	class:HasPtr	file:
val	13/smart-ptr.cc	/^    int val;$/;"	m	class:HasPtr	file:
val	13/value-ptr.cc	/^    int val;$/;"	m	class:HasPtr	file:
val	16/Queue-assign.cc	/^    std::size_t val;$/;"	m	class:SmallInt	file:
waltz	17/Animal.h	/^enum DanceType { two_left_feet, macarena, fandango, waltz };$/;"	e	enum:Bear::DanceType
waltz	17/nopandaprint.h	/^enum DanceType { two_left_feet, macarena, fandango, waltz };$/;"	e	enum:Bear::DanceType
whitespace_chars	10/3ed_query.h	/^    static std::string whitespace_chars;     $/;"	m	class:TextQuery
whitespace_chars	10/TextQuery.h	/^    static std::string whitespace_chars;     $/;"	m	class:TextQuery
width	12/Screen.h	/^    index height, width;$/;"	m	class:Screen
width	12/screen3.h	/^    index height, width;$/;"	m	class:Screen
width	12/screen4.h	/^    int height, width;$/;"	m	class:Screen
width	12/screen5.h	/^    index height, width;$/;"	m	class:Screen
width	18/Screen.h	/^    index height, width;$/;"	m	class:Screen
word_map	10/3ed_query.h	/^    std::map< std::string, std::vector<location> > word_map;  $/;"	m	class:TextQuery
word_map	10/TextQuery.h	/^    std::map< std::string, std::set<line_no> > word_map;  $/;"	m	class:TextQuery
~Base	18/dyn_cast.cc	/^   virtual ~Base() {};$/;"	f	struct:Base
~Base	18/typeid.cc	/^    virtual ~Base() { }$/;"	f	struct:Base
~CachedObj	18/CachedObj.h	/^    virtual ~CachedObj() { }$/;"	f	class:CachedObj
~Folder	13/Folder.cc	/^Folder::~Folder()$/;"	f	class:Folder
~Handle	16/Handle.h	/^    ~Handle() { rem_ref(); }$/;"	f	class:Handle
~Handle	17/Handle.h	/^    ~Handle() { rem_ref(); }$/;"	f	class:Handle
~Handle	17/MS_Handle.h	/^    ~Handle() { rem_ref(); }$/;"	f	class:Handle
~HasPtr	13/smart-ptr.cc	/^    ~HasPtr() { if (--ptr->use == 0) delete ptr; } $/;"	f	class:HasPtr
~HasPtr	13/value-ptr.cc	/^    ~HasPtr() { delete ptr; } $/;"	f	class:HasPtr
~Item_base	15/Basket.h	/^    virtual ~Item_base() { } $/;"	f	class:Item_base
~Item_base	15/Basket2.h	/^    virtual ~Item_base() { } $/;"	f	class:Item_base
~Item_base	16/Basket.h	/^    virtual ~Item_base() { } $/;"	f	class:Item_base
~Message	13/Folder.cc	/^Message::~Message()$/;"	f	class:Message
~Query	15/Query.h	/^    ~Query() { decr_use(); }$/;"	f	class:Query
~Query_base	15/Query.h	/^    virtual ~Query_base() { }$/;"	f	class:Query_base
~Query_base	16/Query.h	/^    virtual ~Query_base() { }$/;"	f	class:Query_base
~Queue	16/Queue.h	/^    ~Queue() { destroy(); }$/;"	f	class:Queue
~Queue	18/MS_statmem.cc	/^    ~Queue() { destroy(); }$/;"	f	class:Queue
~Queue	18/Queue.h	/^    ~Queue() { destroy(); }$/;"	f	class:Queue
~Queue	18/statmem.cc	/^    ~Queue() { destroy(); }$/;"	f	class:Queue
~Sales_item	15/Basket.h	/^    ~Sales_item() { decr_use(); }$/;"	f	class:Sales_item
~Sales_item	15/Basket2.h	/^    ~Sales_item() { decr_use(); }$/;"	f	class:Sales_item
~ScrPtr	14/ScrPtr.h	/^    ~ScrPtr() { delete sp; }$/;"	f	class:ScrPtr
~ScreenPtr	14/ScrPtr.h	/^    ~ScreenPtr() { if (--ptr->use == 0) delete ptr; } $/;"	f	class:ScreenPtr
~U_Ptr	13/smart-ptr.cc	/^	~U_Ptr() { delete ip; }$/;"	f	class:U_Ptr	file:
~isbn_mismatch	17/bookexcept.h	/^    virtual ~isbn_mismatch() throw() { }$/;"	f	class:isbn_mismatch
